[
    {
        "input": "",
        "output": "### Context: This is the description of System version: Display and listing of version and copyright information. ### Instruction: What is the name of this module? ### Response: The module being described is System version."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module System version? ### Response: The purpose of the module System version is the following: Display and listing of version and copyright information."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Company codes: Company codes are necessary to be able to plan on time, for example, for external warehouses, independent of local stock levels. All logistical and MRP movements and quantities by company code are recorded separately in sub-monitors. It is therefore possible to view the entire process per company code. A company code can be attached to any business object such as a warehouse or a cost centre. When a document is posted, the system determines whether a company code must be used for posting. If this is the case, the company code is posted separately in addition to the global posting. The company code, which can be created via the master data, must be assigned to an object (warehouse) for which it is to apply. Usually these are warehouses that are to be managed via a separate company code, perhaps independently of the actual warehouse/stock. On the company code, it is possible to specify whether the stock quantity or the requirements should appear in the total account of the part or not (joint or separate parts disposition - requirements stock lists). For more information, see \"Detailed information on company codes\" and the information on domains. ### Instruction: How is this module called? ### Response: This module is called Company codes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Company codes used for? ### Response: The module Company codes is used for the following: Company codes are necessary to be able to plan on time, for example, for external warehouses, independent of local stock levels. All logistical and MRP movements and quantities by company code are recorded separately in sub-monitors. It is therefore possible to view the entire process per company code. A company code can be attached to any business object such as a warehouse or a cost centre. When a document is posted, the system determines whether a company code must be used for posting. If this is the case, the company code is posted separately in addition to the global posting. The company code, which can be created via the master data, must be assigned to an object (warehouse) for which it is to apply. Usually these are warehouses that are to be managed via a separate company code, perhaps independently of the actual warehouse/stock. On the company code, it is possible to specify whether the stock quantity or the requirements should appear in the total account of the part or not (joint or separate parts disposition - requirements stock lists). For more information, see \"Detailed information on company codes\" and the information on domains.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Communication: Basic modules for partner functions. ### Instruction: What is the name of the module being described? ### Response: This module is named Communication."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Communication serve? ### Response: The purpose of the module Communication is the following: Basic modules for partner functions."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Addresses (module): This is a module for maintaining addresses. An address can be either a street address or a PO box address. A street address can also be assigned communication objects such as telephone, fax, mobile phone objects, etc. Addresses are assigned to other business objects, whereby an address object can be assigned as often as required (see list window Anlieger/Postfachinhaber). The assignment itself can be overwritten by means of wrapper objects, so that so-called sub-addresses (with symbol ) in order to achieve very accurate address information, but without storing redundancies. ### Instruction: How is this module called? ### Response: This module is called Addresses (module)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Addresses (module) used for? ### Response: The module Addresses (module) is used for the following: This is a module for maintaining addresses. An address can be either a street address or a PO box address. A street address can also be assigned communication objects such as telephone, fax, mobile phone objects, etc. Addresses are assigned to other business objects, whereby an address object can be assigned as often as required (see list window Anlieger/Postfachinhaber). The assignment itself can be overwritten by means of wrapper objects, so that so-called sub-addresses (with symbol ) in order to achieve very accurate address information, but without storing redundancies.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Address type assignment: Addresses can be. ### Instruction: Tell me the name of this module. ### Response: This module is Address type assignment."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Address type assignment used for? ### Response: The module Address type assignment can be described as follows: Addresses can be."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Advanced search: The advanced search allows you to search using the dictionary and the fields in the list. You can freely define the search. ### Instruction: How is this module called? ### Response: This module is named Advanced search."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Advanced search. ### Response: The purpose of the module Advanced search is as follows: The advanced search allows you to search using the dictionary and the fields in the list. You can freely define the search."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Advance turnover tax return: This module has been replaced by an extended module for advance VAT returns. ### Instruction: How is this module called? ### Response: The module being described is Advance turnover tax return."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Advance turnover tax return? ### Response: The purpose of the module Advance turnover tax return is as follows: This module has been replaced by an extended module for advance VAT returns.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Aircraft: Aircraft can be managed with this module. ### Instruction: Which module is being described? ### Response: This module is named Aircraft."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Aircraft used for? ### Response: The module Aircraft can be described as follows: Aircraft can be managed with this module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Alarm clock: This module is used to output the date and time, and an alarm time can be set via the menu. ### Instruction: Name this module. ### Response: This module is named Alarm clock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Alarm clock used for? ### Response: The module Alarm clock is used for the following: This module is used to output the date and time, and an alarm time can be set via the menu.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts Use: This module displays all uses of a part in parts lists. By means of a filter, the user can choose whether he wants to see a usage of the part in order-specific production parts lists or in master parts lists. A further option is the display of a usage in sales parts lists. This includes the use of sales articles, spare parts or service units as individual parts in sales sets (not to be confused with the sales set role of a part). This module is intended as a technical aid. Related to this are the modules parts consumption (intended for use by logistics) and parts use (intended for use by service/sales). If you generally want to evaluate the use or non-use of a part in a certain period, you can do this by means of an inspection run. Validity and exchange objects It is also possible to indicate the use of the exchange objects for parts that become invalid and have one or more exchange objects. If the checkbox \"Also consider exchange objects\" is checked, every use of each exchange object is automatically displayed. By simple selection in the list of exchange objects it is possible to display the uses of individual exchange objects. A multiple selection is possible. If all objects are to be displayed again, either select all exchange objects or check the box \"Also consider exchange objects\". All entries will then lose their selections and all objects will be displayed. ### Instruction: What is the name of the module being described? ### Response: This module is named Parts Use."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Parts Use serve? ### Response: The purpose of the module Parts Use is as follows: This module displays all uses of a part in parts lists. By means of a filter, the user can choose whether he wants to see a usage of the part in order-specific production parts lists or in master parts lists. A further option is the display of a usage in sales parts lists. This includes the use of sales articles, spare parts or service units as individual parts in sales sets (not to be confused with the sales set role of a part). This module is intended as a technical aid. Related to this are the modules parts consumption (intended for use by logistics) and parts use (intended for use by service/sales). If you generally want to evaluate the use or non-use of a part in a certain period, you can do this by means of an inspection run. Validity and exchange objects It is also possible to indicate the use of the exchange objects for parts that become invalid and have one or more exchange objects. If the checkbox \"Also consider exchange objects\" is checked, every use of each exchange object is automatically displayed. By simple selection in the list of exchange objects it is possible to display the uses of individual exchange objects. A multiple selection is possible. If all objects are to be displayed again, either select all exchange objects or check the box \"Also consider exchange objects\". All entries will then lose their selections and all objects will be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Workplace use: Indicates the use of a workstation. The term \"work center\" is used as a synonym for the resources work center, workgroup, and machine. Filtering The user can choose whether he wants to see a usage in production orders and/or in master data (master routings or resource in work centres). ### Instruction: Which module is being described? ### Response: The name of this module is Workplace use."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Workplace use for me. ### Response: The purpose of the module Workplace use is the following: Indicates the use of a workstation. The term \"work center\" is used as a synonym for the resources work center, workgroup, and machine. Filtering The user can choose whether he wants to see a usage in production orders and/or in master data (master routings or resource in work centres).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts Needs analysis: This evaluation serves to analyse the consumption of parts. On the one hand, the call is made by selecting parts and/or warehouses and by selecting the evaluation period(s). A parts consumption is defined by a stock withdrawal and/or a stock transfer. The module can only be called up if financial years and periods are defined in the system. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Parts Needs analysis."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Parts Needs analysis for me. ### Response: The module Parts Needs analysis is used for the following: This evaluation serves to analyse the consumption of parts. On the one hand, the call is made by selecting parts and/or warehouses and by selecting the evaluation period(s). A parts consumption is defined by a stock withdrawal and/or a stock transfer. The module can only be called up if financial years and periods are defined in the system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of BDE analysis: This evaluation serves the analysis of recorded BDE time tickets. The following evaluation groups are formed: Reasons for longer or shorter periods (reasons for deviation) Resources (workstations, machines, employees...) Cost centres The window therefore contains 3 separate grouping lists, which contain the results of the individual evaluations They contain one entry for each grouping object (e.g. additional time due to parts list problems), the number of PDC logoffs, the ACTUAL time logged off, the TARGET time planned for this and the resulting deviations. If one entry of these 3 grouping lists is marked, all recorded PDC logoffs corresponding to this grouping appear in the lower list. The call is made by selecting the evaluation period(s). It is also possible to select one or more orders via the toolbar or by drag and drop and to evaluate the corresponding PDC hours. The module can only be called up if financial years and periods are defined in the system. ### Instruction: Which module is being described? ### Response: The name of this module is BDE analysis."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module BDE analysis for me. ### Response: The module BDE analysis is used for the following: This evaluation serves the analysis of recorded BDE time tickets. The following evaluation groups are formed: Reasons for longer or shorter periods (reasons for deviation) Resources (workstations, machines, employees...) Cost centres The window therefore contains 3 separate grouping lists, which contain the results of the individual evaluations They contain one entry for each grouping object (e.g. additional time due to parts list problems), the number of PDC logoffs, the ACTUAL time logged off, the TARGET time planned for this and the resulting deviations. If one entry of these 3 grouping lists is marked, all recorded PDC logoffs corresponding to this grouping appear in the lower list. The call is made by selecting the evaluation period(s). It is also possible to select one or more orders via the toolbar or by drag and drop and to evaluate the corresponding PDC hours. The module can only be called up if financial years and periods are defined in the system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Copier app: This app allows you to copy a new app from an existing app / module. It is thus part of the apps with which you can create new apps: Derive app Copy app Generate app. ### Instruction: What is the name of this module? ### Response: This module is named Copier app."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Copier app for me. ### Response: The module Copier app serves the purpose of the following: This app allows you to copy a new app from an existing app / module. It is thus part of the apps with which you can create new apps: Derive app Copy app Generate app."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Module Generator: This app can be used to generate a new module using a template. It is therefore part of the apps with which you can create new apps:Derive appCopy appGenerate app. ### Instruction: What is the name of this module? ### Response: This module is Module Generator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Module Generator used for? ### Response: The module Module Generator is used for the following: This app can be used to generate a new module using a template. It is therefore part of the apps with which you can create new apps:Derive appCopy appGenerate app."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Derive app: With this app, a derivative (inheritance) of an app to be selected beforehand can be generated. In the newly generated, derived (inherited) app, changes and/or extensions to the derived app can then be made.It is thus part of the apps with which one can create new apps:Derive appCopy appGenerate app. ### Instruction: Which module is being described? ### Response: This module is called Derive app."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Derive app for me. ### Response: The module Derive app serves the purpose of the following: With this app, a derivative (inheritance) of an app to be selected beforehand can be generated. In the newly generated, derived (inherited) app, changes and/or extensions to the derived app can then be made.It is thus part of the apps with which one can create new apps:Derive appCopy appGenerate app."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Vouchers to be approved: Display documents from existing approval processes. Only documents that the current user can approve are displayed, i.e. this user must be the approver or representative of an approver. ### Instruction: Name this module. ### Response: This module is named Vouchers to be approved."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Vouchers to be approved. ### Response: The module Vouchers to be approved is used for the following: Display documents from existing approval processes. Only documents that the current user can approve are displayed, i.e. this user must be the approver or representative of an approver.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Application Calendar: For tasks that are to be executed automatically in the background at certain times or that would place too heavy a load on the DP system during operation, there is the option of moving evaluation, closing and printing tasks to an application calendar. The tasks are then not executed directly, but scheduled for an automatic ClassiX service (server).Such tasks to be executed automatically are managed by means of so-called application calendars (entries). There are basically three different types of application calendars:Recurring tasksInterval tasksOne-off tasksRecurring tasks A task is called \"recurring\" if the smallest unit for repeating the task is \"one day\". These are so-called night runs, which are started daily by the system administration. To set up such a \"night run\" server, a ClassiX start file (e.g. as App Suite (*.cxp) or directly the app applicationScheduleExceute.app) must be executed on a client via batch file, which checks and processes all pending tasks at a certain time (e.g. every night as a cron service of the operating system).An example of an evaluation shifted to the night is the post-calculation of customer orders (this is a so-called system application). In the case of very large and complex orders, the ongoing post-calculation during daytime operations can cause considerable database blockages and waiting times. Such a post-run is activated in the client. Users also have the option of scheduling very extensive evaluations so that these can be found in their saved lists the next morning or these saved lists can be printed out during the night directly on the user's standard printer (these are so-called user applications). Each user can also schedule each evaluation several times with different settings. For each user, a separate user group is created with his specific settings and assigned to the respective user application. Examples of user applications: supply chain management Supplier declaration Only user applications have subordinate user groups with the execution steps they contain. System applications directly contain the execution steps. Once all these recurring tasks have been processed, the service terminates atomatically.Interval tasks If tasks are defined with an \"interval\", the call is not automatically terminated after all open tasks have been completed and the system repeatedly executes the various tasks at the respective defined intervals. \"Interval\" tasks are checked every 5 minutes (adjustable with environment variable CX_APP_SCHEDULE_SNIFFER_INTERVAL). Tasks can also be defined.One-off tasks If tasks are neither defined as \"Recurring\" nor with an \"Interval\", they are considered \"one-off\" tasks and are also only executed once. Such one-off tasks are also processed in the so-called night runs. ### Instruction: Name this module. ### Response: The name of this module is Application Calendar."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Application Calendar for me. ### Response: The module Application Calendar is used for the following: For tasks that are to be executed automatically in the background at certain times or that would place too heavy a load on the DP system during operation, there is the option of moving evaluation, closing and printing tasks to an application calendar. The tasks are then not executed directly, but scheduled for an automatic ClassiX service (server).Such tasks to be executed automatically are managed by means of so-called application calendars (entries). There are basically three different types of application calendars:Recurring tasksInterval tasksOne-off tasksRecurring tasks A task is called \"recurring\" if the smallest unit for repeating the task is \"one day\". These are so-called night runs, which are started daily by the system administration. To set up such a \"night run\" server, a ClassiX start file (e.g. as App Suite (*.cxp) or directly the app applicationScheduleExceute.app) must be executed on a client via batch file, which checks and processes all pending tasks at a certain time (e.g. every night as a cron service of the operating system).An example of an evaluation shifted to the night is the post-calculation of customer orders (this is a so-called system application). In the case of very large and complex orders, the ongoing post-calculation during daytime operations can cause considerable database blockages and waiting times. Such a post-run is activated in the client. Users also have the option of scheduling very extensive evaluations so that these can be found in their saved lists the next morning or these saved lists can be printed out during the night directly on the user's standard printer (these are so-called user applications). Each user can also schedule each evaluation several times with different settings. For each user, a separate user group is created with his specific settings and assigned to the respective user application. Examples of user applications: supply chain management Supplier declaration Only user applications have subordinate user groups with the execution steps they contain. System applications directly contain the execution steps. Once all these recurring tasks have been processed, the service terminates atomatically.Interval tasks If tasks are defined with an \"interval\", the call is not automatically terminated after all open tasks have been completed and the system repeatedly executes the various tasks at the respective defined intervals. \"Interval\" tasks are checked every 5 minutes (adjustable with environment variable CX_APP_SCHEDULE_SNIFFER_INTERVAL). Tasks can also be defined.One-off tasks If tasks are neither defined as \"Recurring\" nor with an \"Interval\", they are considered \"one-off\" tasks and are also only executed once. Such one-off tasks are also processed in the so-called night runs.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:AppsWarehouse® Browser: With this app all modules and apps of the AppsWarehouse® are displayed. This app helps the developer to get an overview of the modules and their properties. At the same time, apps can be changed or extended or new apps can be created from this app. The displayed apps are basically divided into the three categoriesAppsProjectsProviderare divided. Providers are apps whose procedures are made available to other apps (providerName::procedureName), projects are apps that can be started individually, all other apps are started from projects via messages. The basic functionality of the three app categories is essentially the same, only some functions differ in the respective context menus. ### Instruction: Tell me the name of this module. ### Response: The name of this module is English:AppsWarehouse® Browser."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module English:AppsWarehouse® Browser? ### Response: The purpose of the module English:AppsWarehouse® Browser is as follows: With this app all modules and apps of the AppsWarehouse® are displayed. This app helps the developer to get an overview of the modules and their properties. At the same time, apps can be changed or extended or new apps can be created from this app. The displayed apps are basically divided into the three categoriesAppsProjectsProviderare divided. Providers are apps whose procedures are made available to other apps (providerName::procedureName), projects are apps that can be started individually, all other apps are started from projects via messages. The basic functionality of the three app categories is essentially the same, only some functions differ in the respective context menus.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of AppsWarehouse Module Selection: ... ### Instruction: How is this module called? ### Response: This module is called AppsWarehouse Module Selection."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module AppsWarehouse Module Selection for me. ### Response: The module AppsWarehouse Module Selection is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of AppsWarehouse Modules Alignment App: The AppsWarehouse® Module Synchronisation App determines the loaded modules of the current ClassiX® instance and lists them against a total overview of all files in the corresponding folders in the file system. A graphical indication shows which files have been loaded as modules by the system and which have not. On this basis, excess files and modules can be identified and the corresponding files simply deleted. In addition, the synchronisation app offers the option of opening files directly for closer examination. ### Instruction: Which module is being described? ### Response: This module is called AppsWarehouse Modules Alignment App."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module AppsWarehouse Modules Alignment App? ### Response: The module AppsWarehouse Modules Alignment App can be described as follows: The AppsWarehouse® Module Synchronisation App determines the loaded modules of the current ClassiX® instance and lists them against a total overview of all files in the corresponding folders in the file system. A graphical indication shows which files have been loaded as modules by the system and which have not. On this basis, excess files and modules can be identified and the corresponding files simply deleted. In addition, the synchronisation app offers the option of opening files directly for closer examination.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Investment accounts: The fixed assets summary list enables the valuation of the inventory for a given financial year and the automatic determination and updating of the depreciation possible for tax purposes for each asset (annual financial statement). For each fixed asset in the inventory, the total balance is shown in this evaluation, which is made up of the subtotals of the book values on the 1st day of the financial year to be evaluated, the additions and disposals, transfers, write-ups and write-downs. If no annual financial statement has yet been carried out for an asset, the depreciation possible for tax purposes at the end of a financial year - based on the depreciation rule defined in the asset - is output as the calculated value. Otherwise, the year-end depreciation actually carried out by means of an annual financial statement is output. The totals list corresponds to the fixed asset schedule in the logic of the output of its columns. In addition, the development of the value of the fixed assets since the end of the last financial year can be tracked in the totals list. The following calculation (based on the column values) is possible for this purpose: Book value PY (previous year) plus additions in the current financial year minus \"Value on disposal\" of a financial year (do not confuse this column with column \"Disposal\") plus transfers in the current financial year plus write-ups in the current financial year minus depreciation in the current financial year = book value FY (at the end of the financial year)As a cross-check (based on the fixed-asset movement schedule), the following calculation can also be made: AfA-BMGL plus additions in the current business year minus disposals in the current financial year (do not confuse this column with the column \"value at disposal\") plus transfers in the current financial year plus write-ups in the current financial year minus accum. Depreciation = Book value FY (at the end of the financial year)The asset summary list contains all values and sorting criteria (see last columns asset classes/groups) to be able to evaluate assets. ### Instruction: What is the name of the module being described? ### Response: This module is named Investment accounts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Investment accounts? ### Response: The module Investment accounts serves the purpose of the following: The fixed assets summary list enables the valuation of the inventory for a given financial year and the automatic determination and updating of the depreciation possible for tax purposes for each asset (annual financial statement). For each fixed asset in the inventory, the total balance is shown in this evaluation, which is made up of the subtotals of the book values on the 1st day of the financial year to be evaluated, the additions and disposals, transfers, write-ups and write-downs. If no annual financial statement has yet been carried out for an asset, the depreciation possible for tax purposes at the end of a financial year - based on the depreciation rule defined in the asset - is output as the calculated value. Otherwise, the year-end depreciation actually carried out by means of an annual financial statement is output. The totals list corresponds to the fixed asset schedule in the logic of the output of its columns. In addition, the development of the value of the fixed assets since the end of the last financial year can be tracked in the totals list. The following calculation (based on the column values) is possible for this purpose: Book value PY (previous year) plus additions in the current financial year minus \"Value on disposal\" of a financial year (do not confuse this column with column \"Disposal\") plus transfers in the current financial year plus write-ups in the current financial year minus depreciation in the current financial year = book value FY (at the end of the financial year)As a cross-check (based on the fixed-asset movement schedule), the following calculation can also be made: AfA-BMGL plus additions in the current business year minus disposals in the current financial year (do not confuse this column with the column \"value at disposal\") plus transfers in the current financial year plus write-ups in the current financial year minus accum. Depreciation = Book value FY (at the end of the financial year)The asset summary list contains all values and sorting criteria (see last columns asset classes/groups) to be able to evaluate assets.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Fixed assets evaluation: Postings within financial accounting to accounts for fixed assets must be reconciled with the data in fixed asset accounting. To facilitate this work, this module lists the postings to a freely selectable balance sheet asset account with a direct assignment to the respective open item. Only general ledger entries, incoming invoices, credit notes and payments from suppliers are shown. ### Instruction: How is this module called? ### Response: The name of this module is Fixed assets evaluation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Fixed assets evaluation serve? ### Response: The module Fixed assets evaluation serves the purpose of the following: Postings within financial accounting to accounts for fixed assets must be reconciled with the data in fixed asset accounting. To facilitate this work, this module lists the postings to a freely selectable balance sheet asset account with a direct assignment to the respective open item. Only general ledger entries, incoming invoices, credit notes and payments from suppliers are shown.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Fixed Assets Schedule: A statement of changes in fixed assets shows the development of fixed assets from the original historical acquisition and production costs through the additions, disposals, transfers and write-ups of the past financial year, the accumulated depreciation, as well as the book value on the balance sheet date. The fixed-asset movement schedule therefore does not show the development during the financial year to be closed, i.e. from the residual book value at the end of the previous year to the residual book value at the end of the financial year (see the fixed-asset movement schedule), but from the original acquisition or production costs to the residual book value on the respective balance sheet date. A reconciliation of the columns of a statement of changes in fixed assets can therefore be made as follows: Original acquisition or production costs plus additions of a business year minus disposals of a financial year +/- transfers of a business year minus accumulated depreciation plus write-ups of a financial year = book value at the end of the financial year Normally, an asset history sheet is presented sorted by asset classes, which primarily follow the structure of a balance sheet. Since assets are also assigned to asset groups (classification according to properties) and cost centres, the asset history sheet can also be output according to these structured classification terms. ### Instruction: Name this module. ### Response: This module is called Fixed Assets Schedule."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Fixed Assets Schedule. ### Response: The module Fixed Assets Schedule is used for the following: A statement of changes in fixed assets shows the development of fixed assets from the original historical acquisition and production costs through the additions, disposals, transfers and write-ups of the past financial year, the accumulated depreciation, as well as the book value on the balance sheet date. The fixed-asset movement schedule therefore does not show the development during the financial year to be closed, i.e. from the residual book value at the end of the previous year to the residual book value at the end of the financial year (see the fixed-asset movement schedule), but from the original acquisition or production costs to the residual book value on the respective balance sheet date. A reconciliation of the columns of a statement of changes in fixed assets can therefore be made as follows: Original acquisition or production costs plus additions of a business year minus disposals of a financial year +/- transfers of a business year minus accumulated depreciation plus write-ups of a financial year = book value at the end of the financial year Normally, an asset history sheet is presented sorted by asset classes, which primarily follow the structure of a balance sheet. Since assets are also assigned to asset groups (classification according to properties) and cost centres, the asset history sheet can also be output according to these structured classification terms.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Associations: For each document, it is possible to create it with documents from the document master, local documents and, in the case of quotations/orders (+items), transactions. This is controlled via the Insert button and the menu that appears. When inserting, you can choose between local document references and global document references. Associations can also be other objects, such as transaction data, master data or calculations. These are inserted into the list by Drag&Drop. Associations can be stored for all document types via the document history. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Associations."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Associations? ### Response: The module Associations serves the purpose of the following: For each document, it is possible to create it with documents from the document master, local documents and, in the case of quotations/orders (+items), transactions. This is controlled via the Insert button and the menu that appears. When inserting, you can choose between local document references and global document references. Associations can also be other objects, such as transaction data, master data or calculations. These are inserted into the list by Drag&Drop. Associations can be stored for all document types via the document history.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Attribute lists (characteristic tables): Characteristics tables make it easier to work with attributes when you have to assign the same \"groups\" of attributes to an attribute set again and again. Thus, any attributes can be listed in a characteristics table, so that one only needs to insert the characteristics table. ### Instruction: What is the name of the module being described? ### Response: This module is named Attribute lists (characteristic tables)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Attribute lists (characteristic tables)? ### Response: The module Attribute lists (characteristic tables) serves the purpose of the following: Characteristics tables make it easier to work with attributes when you have to assign the same \"groups\" of attributes to an attribute set again and again. Thus, any attributes can be listed in a characteristics table, so that one only needs to insert the characteristics table.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional material characteristic: A conditional attribute determines the value of the wrapped data field using a conditional table. This conditional table determines the possible values (characteristics) of the attribute. The conditional table is only evaluated at the time of the conditional attribute query. Only then the entries (conditions) of the table are calculated. As with the evaluation of each condition (=formula) in ClassiX®, it may happen that the conditions contain variables that are not automatically found by the system. Therefore, when creating these conditions (table entries), you should make sure that the conditional attribute is later used in a context in which the conditions can be evaluated. Or in the conditional attribute the flag \"ignore non-determinable/calculable condition\" is set, i.e. such conditions are simply ignored. The conditional table can be tested directly in the input window, the required variables are then interactively queried by the system. (see menu item \"Test conditional attribute\" or corresponding button) For general information on processing conditional tables, please refer to Tables. With the special menu item (>>Edit>Conditional Tables>Rows>>) \"Fill with Attribute Table\" you can have exactly one row created for each table entry of the attribute set for the column for a newly created conditional attribute that has only one column and one attribute with a global table set there. Only the results must be edited manually. Conditions can also be taken from another conditional attribute. To do this you have to open the attribute from which you want to copy the conditions, call the copy buffer and move the desired conditions into the copy buffer. In the attribute to be extended the conditions can now be dropped into the table. New table entries are then created with the dropped conditions and an empty result. The result type results from the type of the conditioned attribute and possibly the result type of the first table entry, if it exists. You can find more information in the topic Features. Attention: Attribute values are only supported in the formulas up to a maximum of 100 characters!. ### Instruction: How is this module called? ### Response: This module is named Conditional material characteristic."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Conditional material characteristic. ### Response: The purpose of the module Conditional material characteristic is the following: A conditional attribute determines the value of the wrapped data field using a conditional table. This conditional table determines the possible values (characteristics) of the attribute. The conditional table is only evaluated at the time of the conditional attribute query. Only then the entries (conditions) of the table are calculated. As with the evaluation of each condition (=formula) in ClassiX®, it may happen that the conditions contain variables that are not automatically found by the system. Therefore, when creating these conditions (table entries), you should make sure that the conditional attribute is later used in a context in which the conditions can be evaluated. Or in the conditional attribute the flag \"ignore non-determinable/calculable condition\" is set, i.e. such conditions are simply ignored. The conditional table can be tested directly in the input window, the required variables are then interactively queried by the system. (see menu item \"Test conditional attribute\" or corresponding button) For general information on processing conditional tables, please refer to Tables. With the special menu item (>>Edit>Conditional Tables>Rows>>) \"Fill with Attribute Table\" you can have exactly one row created for each table entry of the attribute set for the column for a newly created conditional attribute that has only one column and one attribute with a global table set there. Only the results must be edited manually. Conditions can also be taken from another conditional attribute. To do this you have to open the attribute from which you want to copy the conditions, call the copy buffer and move the desired conditions into the copy buffer. In the attribute to be extended the conditions can now be dropped into the table. New table entries are then created with the dropped conditions and an empty result. The result type results from the type of the conditioned attribute and possibly the result type of the first table entry, if it exists. You can find more information in the topic Features. Attention: Attribute values are only supported in the formulas up to a maximum of 100 characters!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Calculated (formula) material characteristic: A calculated attribute determines the value of the wrapped data field using a formula. This formula determines the possible values (characteristics) of the calculated attribute. The formula is only evaluated at the time of the query of the calculated attribute. Only then is the captured formula calculated. As with the evaluation of any formula in ClassiX®, it may happen that variables are specified in the formula expression that are not automatically found by the system. When creating the formula, it is therefore important to ensure that the calculated attribute is later used in a context in which the formula can be evaluated. The formula can be tested directly in the input window, the required variables are then interactively queried by the system. (see menu item \"Test calculated attribute\" or corresponding button) In the standard case (formula type = individual) the formula is written directly into the calculated attribute. The syntax of formulas can be found under calculation formulas. You can find more information in the topic Features. ### Instruction: Name this module. ### Response: This module is called Calculated (formula) material characteristic."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Calculated (formula) material characteristic. ### Response: The module Calculated (formula) material characteristic serves the purpose of the following: A calculated attribute determines the value of the wrapped data field using a formula. This formula determines the possible values (characteristics) of the calculated attribute. The formula is only evaluated at the time of the query of the calculated attribute. Only then is the captured formula calculated. As with the evaluation of any formula in ClassiX®, it may happen that variables are specified in the formula expression that are not automatically found by the system. When creating the formula, it is therefore important to ensure that the calculated attribute is later used in a context in which the formula can be evaluated. The formula can be tested directly in the input window, the required variables are then interactively queried by the system. (see menu item \"Test calculated attribute\" or corresponding button) In the standard case (formula type = individual) the formula is written directly into the calculated attribute. The syntax of formulas can be found under calculation formulas. You can find more information in the topic Features.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Attribute (module): There are three attribute types in ClassiX®: Preset material characteristic Calculated material characteristic Conditional material characteristic You can find more information in the topic Features. ### Instruction: What is the name of this module? ### Response: This module is Attribute (module)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Attribute (module) serve? ### Response: The module Attribute (module) can be described as follows: There are three attribute types in ClassiX®: Preset material characteristic Calculated material characteristic Conditional material characteristic You can find more information in the topic Features.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Attributes Value Editing App: This app is used to change the value of an attribute. ### Instruction: Tell me the name of this module. ### Response: This module is called Attributes Value Editing App."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Attributes Value Editing App serve? ### Response: The module Attributes Value Editing App serves the purpose of the following: This app is used to change the value of an attribute.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Attributes: This module is used to list all attributes (regardless of whether they are of the type preset, calculated, conditional or table) or to calculate the value of an attribute that can be freely entered by name (in the case of calculated or conditional attributes). The second functionality is used from other modules, e.g. if you want to query the value of an attribute in a subitem of an order to check how the value is calculated from the characteristics of the subitem itself and the higher-level items. You can find more information in the topic Features. ### Instruction: Which module is being described? ### Response: The name of this module is Attributes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Attributes? ### Response: The module Attributes serves the purpose of the following: This module is used to list all attributes (regardless of whether they are of the type preset, calculated, conditional or table) or to calculate the value of an attribute that can be freely entered by name (in the case of calculated or conditional attributes). The second functionality is used from other modules, e.g. if you want to query the value of an attribute in a subitem of an order to check how the value is calculated from the characteristics of the subitem itself and the higher-level items. You can find more information in the topic Features.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Object characteristics: Each object (derived from CX_CONTAINER ) can have freely definable attributes that can be edited with this module. ### Instruction: What is the name of the module being described? ### Response: This module is Object characteristics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Object characteristics serve? ### Response: The purpose of the module Object characteristics is as follows: Each object (derived from CX_CONTAINER ) can have freely definable attributes that can be edited with this module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Subject characteristics bar: The characteristics list of a variant part determines the characteristics which can be differently pronounced for the part. In addition to the use of the variant part itself, the variant part can also be assigned to so-called sub-parts, which are differently pronounced in exactly these characteristics. ### Instruction: How is this module called? ### Response: This module is Subject characteristics bar."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Subject characteristics bar used for? ### Response: The purpose of the module Subject characteristics bar is the following: The characteristics list of a variant part determines the characteristics which can be differently pronounced for the part. In addition to the use of the variant part itself, the variant part can also be assigned to so-called sub-parts, which are differently pronounced in exactly these characteristics.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Attribute node: Attribute nodes allow the gradual and conditional expression of attributes. This is particularly useful in product configuration (the specification of variant parts), but can also be useful when entering any form (document) or master data. ### Instruction: How is this module called? ### Response: This module is Attribute node."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Attribute node serve? ### Response: The module Attribute node is used for the following: Attribute nodes allow the gradual and conditional expression of attributes. This is particularly useful in product configuration (the specification of variant parts), but can also be useful when entering any form (document) or master data.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Preset attribute: A preset attribute wraps a dynamic data field with a value specification. This value is offered each time the preset attribute is used, but can then be overwritten individually. The type of presetting depends on the (data) type of the wrapped dynamic data field. For example, if the type is a STRING (character string), you can specify a text or leave the field empty. For example, if the type is CX_VALUE, you can specify the number of decimal places and the unit for the value. For enumeration types (enumerations: ENUMCHAR or ENUMSHORT) the value tables stored in the system (with binding to the dynamic data field) are offered for presetting. However, these tables can also be individually overwritten by the preset characteristics. The property of preset characteristics to manage their own tables also applies to other data types. For example, for a dynamic data field of type CX_VALUE, you can specify a table with values for the \"width\", such as \"100 mm\", \"200mm\" and \"300mm\". These values are then offered each time the preset attribute is used. If you want to allow only these values to be entered, you can do so by clicking on the \"Exclusive\" button. You can find more information in the topic Features. Attention: Attribute values are only supported in the formulas up to a maximum of 100 characters!. ### Instruction: How is this module called? ### Response: This module is called Preset attribute."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Preset attribute. ### Response: The purpose of the module Preset attribute is the following: A preset attribute wraps a dynamic data field with a value specification. This value is offered each time the preset attribute is used, but can then be overwritten individually. The type of presetting depends on the (data) type of the wrapped dynamic data field. For example, if the type is a STRING (character string), you can specify a text or leave the field empty. For example, if the type is CX_VALUE, you can specify the number of decimal places and the unit for the value. For enumeration types (enumerations: ENUMCHAR or ENUMSHORT) the value tables stored in the system (with binding to the dynamic data field) are offered for presetting. However, these tables can also be individually overwritten by the preset characteristics. The property of preset characteristics to manage their own tables also applies to other data types. For example, for a dynamic data field of type CX_VALUE, you can specify a table with values for the \"width\", such as \"100 mm\", \"200mm\" and \"300mm\". These values are then offered each time the preset attribute is used. If you want to allow only these values to be entered, you can do so by clicking on the \"Exclusive\" button. You can find more information in the topic Features. Attention: Attribute values are only supported in the formulas up to a maximum of 100 characters!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Process Auditing: This app is used for an application-related auditing of programme processes. Once activated, the trace instructions stored in the program code are sent from this machine to this app as an indication of the program sequences being processed. During program execution, it is thus possible to observe at which points in the program code the system is currently located - which program parts are currently being run through - and which objects are changed in the process. One could also speak of \"semantic debugging\" here. In addition, this app is used to implement access control. ### Instruction: What is the name of this module? ### Response: The module being described is Process Auditing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Process Auditing serve? ### Response: The module Process Auditing is used for the following: This app is used for an application-related auditing of programme processes. Once activated, the trace instructions stored in the program code are sent from this machine to this app as an indication of the program sequences being processed. During program execution, it is thus possible to observe at which points in the program code the system is currently located - which program parts are currently being run through - and which objects are changed in the process. One could also speak of \"semantic debugging\" here. In addition, this app is used to implement access control.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Requirements and stock overview: In the stock/requirements overview you can clearly see when material bottlenecks occur for selected parts. For each calendar week in the specified period, colour-coded boxes indicate whether sufficient material is available to cover requirements. This evaluation is also available as a stock/requirements list in a detailed list view. ### Instruction: Which module is being described? ### Response: This module is named Requirements and stock overview."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Requirements and stock overview serve? ### Response: The purpose of the module Requirements and stock overview is as follows: In the stock/requirements overview you can clearly see when material bottlenecks occur for selected parts. For each calendar week in the specified period, colour-coded boxes indicate whether sufficient material is available to cover requirements. This evaluation is also available as a stock/requirements list in a detailed list view.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Demand and stock list: The demand/inventory list (short: B&B list) offers two modes/options of demand/inventory evaluation: 1. during the date control, requirement coverage documents (planned goods receipts) are analysed with regard to their existence and the replenishment time of the part. Thus, it can be checked whether the stock becomes negative at all or within the respective replenishment time. In such a case, requirement requests for purchased parts or stock orders for production parts can be generated directly from the list. 2. inventory control involves analysing the stocks available today (total stock of a part as of today) and the balance of future movements (balance of all stock reservations, orders, production orders, etc.) This analysis is supported by rules (formulas). These rules include evaluations for e.g. lists of slow-moving items, test runs for parts with negative stock, negative order or production quantity and, of course, balanced minimum stock underruns. This evaluation is available in a time-aggregated form as a requirements/stock overview . The requirements and stock list can also be called up for individual company codes. ### Instruction: Name this module. ### Response: This module is Demand and stock list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Demand and stock list? ### Response: The purpose of the module Demand and stock list is as follows: The demand/inventory list (short: B&B list) offers two modes/options of demand/inventory evaluation: 1. during the date control, requirement coverage documents (planned goods receipts) are analysed with regard to their existence and the replenishment time of the part. Thus, it can be checked whether the stock becomes negative at all or within the respective replenishment time. In such a case, requirement requests for purchased parts or stock orders for production parts can be generated directly from the list. 2. inventory control involves analysing the stocks available today (total stock of a part as of today) and the balance of future movements (balance of all stock reservations, orders, production orders, etc.) This analysis is supported by rules (formulas). These rules include evaluations for e.g. lists of slow-moving items, test runs for parts with negative stock, negative order or production quantity and, of course, balanced minimum stock underruns. This evaluation is available in a time-aggregated form as a requirements/stock overview . The requirements and stock list can also be called up for individual company codes.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Business unit balances: This module displays the annual and period balances of offers, orders, invoices and credit notes booked in the business areas. In addition, periodised planning figures can be stored for each area. In the case of business unit nodes, the subordinate business units are also displayed!. ### Instruction: What is the name of this module? ### Response: This module is called Business unit balances."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Business unit balances serve? ### Response: The module Business unit balances is used for the following: This module displays the annual and period balances of offers, orders, invoices and credit notes booked in the business areas. In addition, periodised planning figures can be stored for each area. In the case of business unit nodes, the subordinate business units are also displayed!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Account balances (cost accounting): This module displays the annual and period balances of cost centre, cost type and cost unit accounts posted in cost accounting. Furthermore, periodised plan costs can be stored. ### Instruction: Tell me the name of this module. ### Response: The module being described is Account balances (cost accounting)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Account balances (cost accounting). ### Response: The purpose of the module Account balances (cost accounting) is as follows: This module displays the annual and period balances of cost centre, cost type and cost unit accounts posted in cost accounting. Furthermore, periodised plan costs can be stored.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Account balances: With this module, the annual and period balances of a general ledger or personal account posted in financial accounting are displayed. ### Instruction: Which module is being described? ### Response: This module is Account balances."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Account balances. ### Response: The module Account balances is used for the following: With this module, the annual and period balances of a general ledger or personal account posted in financial accounting are displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Bank details: This module is used to maintain bank details of partner objects (companies or persons). Bank details objects belong to the class of communication objects, such as address, telephone or e-mail address. You must enter bank details such as bank name and account number, and for Germany also the bank code. For the internationally unique identification of the bank details, the IBAN (International bank account number) and the BIC code (also called SWIFT code) can also be entered. With this module the IBAN can be checked syntactically, an automatic generation does not make sense as the IBAN is always determined by the bank itself. ### Instruction: How is this module called? ### Response: The name of this module is Bank details."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Bank details. ### Response: The module Bank details serves the purpose of the following: This module is used to maintain bank details of partner objects (companies or persons). Bank details objects belong to the class of communication objects, such as address, telephone or e-mail address. You must enter bank details such as bank name and account number, and for Germany also the bank code. For the internationally unique identification of the bank details, the IBAN (International bank account number) and the BIC code (also called SWIFT code) can also be entered. With this module the IBAN can be checked syntactically, an automatic generation does not make sense as the IBAN is always determined by the bank itself.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Bank codes: ClassiX® manages a register of bank codes or bank identification numbers to protect you from incorrect entries. If you confirm a bank code with RETURN somewhere in the program, the system searches for a corresponding entry in the bank code/ sort code list. If there are several entries for the entered bank code, you can select the correct bank from a list. It is very common that you will find several entries under one bank code, this also applies to the SWIFT code. These codes are not unique. Internally, however, the individual entries are distinguished by a - unique - consecutive number of the data record. This register can be loaded from files provided by central banks (see below). You can also do this several times to update your register. When you update, the record is checked based on its serial number. Since only this sequence number of the data set allows a unique allocation, it is not possible for the user to change this field. ### Instruction: What is the name of the module being described? ### Response: This module is named Bank codes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Bank codes used for? ### Response: The purpose of the module Bank codes is the following: ClassiX® manages a register of bank codes or bank identification numbers to protect you from incorrect entries. If you confirm a bank code with RETURN somewhere in the program, the system searches for a corresponding entry in the bank code/ sort code list. If there are several entries for the entered bank code, you can select the correct bank from a list. It is very common that you will find several entries under one bank code, this also applies to the SWIFT code. These codes are not unique. Internally, however, the individual entries are distinguished by a - unique - consecutive number of the data record. This register can be loaded from files provided by central banks (see below). You can also do this several times to update your register. When you update, the record is checked based on its serial number. Since only this sequence number of the data set allows a unique allocation, it is not possible for the user to change this field.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Batch Error Module: Some data operations are below the visible range, which prevents error messages from being output directly to the user. In ClassiX®, these errors are collected in monitors provided for this purpose and can be clearly accessed and managed/corrected by the user. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Batch Error Module."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Batch Error Module? ### Response: The module Batch Error Module serves the purpose of the following: Some data operations are below the visible range, which prevents error messages from being output directly to the user. In ClassiX®, these errors are collected in monitors provided for this purpose and can be clearly accessed and managed/corrected by the user.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional parts list item: A conditional BOM item of a bill of material contains a conditional list of individual BOM items, the so-called variants. This provides a tool for defining different parts in a BOM item, e.g. due to different characteristics of the part to be produced. Different quantity specifications can also be stored in an individual bill of material item as a table. In the course of a bill of material explosion, the item whose condition is fulfilled first is inserted into the production bill of material. Attention: See also special features of conditional tables. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Conditional parts list item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Conditional parts list item? ### Response: The module Conditional parts list item is used for the following: A conditional BOM item of a bill of material contains a conditional list of individual BOM items, the so-called variants. This provides a tool for defining different parts in a BOM item, e.g. due to different characteristics of the part to be produced. Different quantity specifications can also be stored in an individual bill of material item as a table. In the course of a bill of material explosion, the item whose condition is fulfilled first is inserted into the production bill of material. Attention: See also special features of conditional tables."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Invoice or credit note: This module is used to maintain invoices and credit notes. An invoice is a receipt (document) by which a natural or legal person asks the recipient of a delivery or service to pay the agreed price within a certain time. A credit note is used for settlement in the same way as an invoice for a delivery or service. The credit note is issued by the recipient of the goods or services and not by the supplier. Instructions for printing invoices and credit notes can be found here. ### Instruction: Which module is being described? ### Response: The module being described is Invoice or credit note."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Invoice or credit note serve? ### Response: The module Invoice or credit note is used for the following: This module is used to maintain invoices and credit notes. An invoice is a receipt (document) by which a natural or legal person asks the recipient of a delivery or service to pay the agreed price within a certain time. A credit note is used for settlement in the same way as an invoice for a delivery or service. The credit note is issued by the recipient of the goods or services and not by the supplier. Instructions for printing invoices and credit notes can be found here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts lists: Parts lists describe the composition of a production part. A bill of material consists of parts, which in turn can have a bill of material. Each bill of material item describes which parts are required in which quantity for the production of a manufacturing part. There are two item types of a bill of material: Single item Variant item (conditional parts list item) The basic heading contains a part from the parts master that is required in the specified (constant or calculated) quantity. A variant item is a conditional list of single items. When exploding the bill of material, the (single) item whose condition is fulfilled first is used. If a subpart (of a variant part) is inserted into a bill of material, its characteristics are not automatically transferred, as these bills of material do not represent master data. During further processing of the parts list in orders or similar, the master data of the individual parts \"shine through\" and can then be changed later. ### Instruction: Tell me the name of this module. ### Response: This module is Parts lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Parts lists serve? ### Response: The module Parts lists serves the purpose of the following: Parts lists describe the composition of a production part. A bill of material consists of parts, which in turn can have a bill of material. Each bill of material item describes which parts are required in which quantity for the production of a manufacturing part. There are two item types of a bill of material: Single item Variant item (conditional parts list item) The basic heading contains a part from the parts master that is required in the specified (constant or calculated) quantity. A variant item is a conditional list of single items. When exploding the bill of material, the (single) item whose condition is fulfilled first is used. If a subpart (of a variant part) is inserted into a bill of material, its characteristics are not automatically transferred, as these bills of material do not represent master data. During further processing of the parts list in orders or similar, the master data of the individual parts \"shine through\" and can then be changed later.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts list entry: A parts list consists of individual parts list entries. This module is used to record individual parts list entries, i.e. those entries which only define a certain part at a time. The part can also be a variant part, which may be automatically replaced by a subpart in the course of the parts list explosion. If, however, you want to define a bill of material entry variably with regard to the part, you can insert a conditional bill of material item into the bill of material. ### Instruction: What is the name of this module? ### Response: The module being described is Parts list entry."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Parts list entry used for? ### Response: The module Parts list entry is used for the following: A parts list consists of individual parts list entries. This module is used to record individual parts list entries, i.e. those entries which only define a certain part at a time. The part can also be a variant part, which may be automatically replaced by a subpart in the course of the parts list explosion. If, however, you want to define a bill of material entry variably with regard to the part, you can insert a conditional bill of material item into the bill of material.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Blockers: This program can be used to check which blockages are present in the machine. An extended version is also available in the ClassiX® system (see Display segments). ### Instruction: What is the name of the module being described? ### Response: This module is called English:Blockers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Blockers for me. ### Response: The module English:Blockers serves the purpose of the following: This program can be used to check which blockages are present in the machine. An extended version is also available in the ClassiX® system (see Display segments).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Budget Offer: This module primarily supports the sales/field service in preparing so-called budget offers (short offers). The normal quotation module is designed to record a quotation both commercially (sales prices, conditions) and technically (article incl. characteristics) in detail and exactly. A sales representative usually does not have this option, as he may have limited access to the ClassiX® ERP system. In order to support the sales representative in preparing and submitting offers, this module can be used together with an offline solution of the ClassiX® system. The aim is that the field service enters the budget offers via the offline solution and transfers them to the main database at the next online access. (In addition to the offline solution, it is also planned to record the budget offers via a web interface). The sales representative benefits from the use of the budget offers by accessing various master information (standard sales articles/ sets, sales conditions) and a uniform and automated output of the offer (forms). Due to the import of the budget quotations into the main database, the head office benefits from a lower follow-up effort of the quotations/orders and a better, more uniform overview of the quotations submitted by the field service. ### Instruction: Name this module. ### Response: This module is named Budget Offer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Budget Offer for me. ### Response: The module Budget Offer serves the purpose of the following: This module primarily supports the sales/field service in preparing so-called budget offers (short offers). The normal quotation module is designed to record a quotation both commercially (sales prices, conditions) and technically (article incl. characteristics) in detail and exactly. A sales representative usually does not have this option, as he may have limited access to the ClassiX® ERP system. In order to support the sales representative in preparing and submitting offers, this module can be used together with an offline solution of the ClassiX® system. The aim is that the field service enters the budget offers via the offline solution and transfers them to the main database at the next online access. (In addition to the offline solution, it is also planned to record the budget offers via a web interface). The sales representative benefits from the use of the budget offers by accessing various master information (standard sales articles/ sets, sales conditions) and a uniform and automated output of the offer (forms). Due to the import of the budget quotations into the main database, the head office benefits from a lower follow-up effort of the quotations/orders and a better, more uniform overview of the quotations submitted by the field service.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Business Fields: The various sales areas or markets can be defined via the business segments. The focus should be on the own definition of the markets without having to take into account generally valid definitions such as branches. Each turnover is assigned to a business segment, this is done by means of the definition in the client, customer or cost unit. A tree structure can be created through the hierarchical linking of the business areas. The following table shows you when which values are booked in the business segments or in the statistics: Document Status Offers Bid submitted Offer converted into order Orders Order confirmed Invoices Invoice registered. ### Instruction: Name this module. ### Response: The module being described is Business Fields."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Business Fields serve? ### Response: The module Business Fields serves the purpose of the following: The various sales areas or markets can be defined via the business segments. The focus should be on the own definition of the markets without having to take into account generally valid definitions such as branches. Each turnover is assigned to a business segment, this is done by means of the definition in the client, customer or cost unit. A tree structure can be created through the hierarchical linking of the business areas. The following table shows you when which values are booked in the business segments or in the statistics: Document Status Offers Bid submitted Offer converted into order Orders Order confirmed Invoices Invoice registered."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Financial year: In addition to an operating calendar for maintaining production times and a personnel calendar for recording and maintaining absences (holidays, sick days) and working with flexitime, this module is used to manage financial years and their periods. The maintenance of the financial years is usually the responsibility of the controlling department. For fiscal years and their periods, any time periods can be entered, e.g. to be able to specify a short fiscal year. After logging in to the system, the closest posting period is automatically registered by means of the session date - when the system is started it corresponds to the system or current date. If the session date is not in a business period declared as started, a warning message is displayed. The currently logged on fiscal year is displayed in the bottom line of the main window. You can - after logging in to the system - change the session date at any time or change to another started fiscal year. In all document masks (outgoing invoices, material postings, time sheets, financial postings, etc.) all started posting periods of the currently logged in - started - business year are always offered for selection. As a rule, however, only one period is/should be started at a time. At the beginning of a new month, two periods are often temporarily started in order to be able to add postings from the previous month. To give the accounting department time for the closing operations of a period, this period is first declared as \"finished\". This means that it can no longer be selected in all other areas outside accounting. A period is finally closed when it has the status \"archived\". ### Instruction: Tell me the name of this module. ### Response: This module is called Financial year."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Financial year. ### Response: The module Financial year serves the purpose of the following: In addition to an operating calendar for maintaining production times and a personnel calendar for recording and maintaining absences (holidays, sick days) and working with flexitime, this module is used to manage financial years and their periods. The maintenance of the financial years is usually the responsibility of the controlling department. For fiscal years and their periods, any time periods can be entered, e.g. to be able to specify a short fiscal year. After logging in to the system, the closest posting period is automatically registered by means of the session date - when the system is started it corresponds to the system or current date. If the session date is not in a business period declared as started, a warning message is displayed. The currently logged on fiscal year is displayed in the bottom line of the main window. You can - after logging in to the system - change the session date at any time or change to another started fiscal year. In all document masks (outgoing invoices, material postings, time sheets, financial postings, etc.) all started posting periods of the currently logged in - started - business year are always offered for selection. As a rule, however, only one period is/should be started at a time. At the beginning of a new month, two periods are often temporarily started in order to be able to add postings from the previous month. To give the accounting department time for the closing operations of a period, this period is first declared as \"finished\". This means that it can no longer be selected in all other areas outside accounting. A period is finally closed when it has the status \"archived\".."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Calendar: This module is used to display a calendar. The display of the calendar is adjusted according to the location (e.g. week starts with a Sunday, various holidays, etc.) The calendar allows you to select a specific date or period of time. ### Instruction: What is the name of this module? ### Response: This module is called Calendar."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Calendar serve? ### Response: The purpose of the module Calendar is as follows: This module is used to display a calendar. The display of the calendar is adjusted according to the location (e.g. week starts with a Sunday, various holidays, etc.) The calendar allows you to select a specific date or period of time.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Reversal and correction document: The reversal document is generated as a successor to a document. It enables the partial or complete cancellation of this document. At the moment the reversal document supports the following documents: inventory, part request, exploded parts list items. internal order and order items (partial quantities). The document is therefore primarily used to cancel a partial quantity from a parts request, an order or advance requirements, regardless of the processing status of these. In addition, it is possible to document a cancellation (who, when, why) and to take it back again. Document to be reversed Description Inventory No further changes can be made to a cancelled inventory. If the inventory was already posted before the cancellation, this posting is reversed. Part requirements Resolved BOM item internal order Order items (subset) The remaining quantity of the item must be greater than zero and must be greater than or equal to the quantity already staged, delivered or invoiced. If a part request is behind the item, it is also cancelled. Items that have already been produced or delivered are stopped and can be processed further in change management. If it is a dispositive purchased part, i.e. there is a requisition or purchase order directly behind the item, this is checked and if these quantities are too large, a warning message is displayed. The following are documents that can be removed from the DISPO account with the correction document: Document to be corrected Description Part requirements without successor The parts request will be marked as provided without making a further booking. This removes these items from the DISPO account. Only part requests without successors can be corrected in this way. If a successor is available, the document must be cancelled! Goods receipt Goods receipts that are not to be put into storage or returned. When corrected, the goods receipt is set to the status \"provided\" and is thus removed from the DISPO account. Goods receipts that have a parts request with the status \"stopped\" as a predecessor cannot be entered with the correction document. These must be stored or cancelled via the closing / change management. ### Instruction: Which module is being described? ### Response: The name of this module is Reversal and correction document."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Reversal and correction document for me. ### Response: The module Reversal and correction document can be described as follows: The reversal document is generated as a successor to a document. It enables the partial or complete cancellation of this document. At the moment the reversal document supports the following documents: inventory, part request, exploded parts list items. internal order and order items (partial quantities). The document is therefore primarily used to cancel a partial quantity from a parts request, an order or advance requirements, regardless of the processing status of these. In addition, it is possible to document a cancellation (who, when, why) and to take it back again. Document to be reversed Description Inventory No further changes can be made to a cancelled inventory. If the inventory was already posted before the cancellation, this posting is reversed. Part requirements Resolved BOM item internal order Order items (subset) The remaining quantity of the item must be greater than zero and must be greater than or equal to the quantity already staged, delivered or invoiced. If a part request is behind the item, it is also cancelled. Items that have already been produced or delivered are stopped and can be processed further in change management. If it is a dispositive purchased part, i.e. there is a requisition or purchase order directly behind the item, this is checked and if these quantities are too large, a warning message is displayed. The following are documents that can be removed from the DISPO account with the correction document: Document to be corrected Description Part requirements without successor The parts request will be marked as provided without making a further booking. This removes these items from the DISPO account. Only part requests without successors can be corrected in this way. If a successor is available, the document must be cancelled! Goods receipt Goods receipts that are not to be put into storage or returned. When corrected, the goods receipt is set to the status \"provided\" and is thus removed from the DISPO account. Goods receipts that have a parts request with the status \"stopped\" as a predecessor cannot be entered with the correction document. These must be stored or cancelled via the closing / change management.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Capacity planning: To be able to calculate the planned workload of an employee, workstation, machine or other resource against the available time budget, a total planned time for a period (usually calendar weeks) must be entered. Here the full working time is given without taking holidays into account, e.g. for employees with 40 hour weeks for one year 8 hours daily. Capacity planning therefore only forms the basic time frame of the employee. Absence times, such as holiday or illness, are maintained via the employee's absence times, which automatically reduces the planned capacity in this period by the employee and all assigned work groups. Employees and work groups can be planned precisely by the day, other resources only by the week. For employees, it is advisable to schedule the capacity in normal daily working hours, i.e. as a rule, 8h is entered in the Capacity field and the grid is set to \"Days\". The weekly working time is only extrapolated and also entered for employees on the basis of the daily capacity (8h) times the number of working days within the calendar week. An evaluation is therefore later possible both on a daily and weekly basis. The planned capacity is then saved by clicking on the \"Set capacity\" button. ### Instruction: Which module is being described? ### Response: This module is named Capacity planning."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Capacity planning used for? ### Response: The purpose of the module Capacity planning is as follows: To be able to calculate the planned workload of an employee, workstation, machine or other resource against the available time budget, a total planned time for a period (usually calendar weeks) must be entered. Here the full working time is given without taking holidays into account, e.g. for employees with 40 hour weeks for one year 8 hours daily. Capacity planning therefore only forms the basic time frame of the employee. Absence times, such as holiday or illness, are maintained via the employee's absence times, which automatically reduces the planned capacity in this period by the employee and all assigned work groups. Employees and work groups can be planned precisely by the day, other resources only by the week. For employees, it is advisable to schedule the capacity in normal daily working hours, i.e. as a rule, 8h is entered in the Capacity field and the grid is set to \"Days\". The weekly working time is only extrapolated and also entered for employees on the basis of the daily capacity (8h) times the number of working days within the calendar week. An evaluation is therefore later possible both on a daily and weekly basis. The planned capacity is then saved by clicking on the \"Set capacity\" button.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Capacity utilisation: This module was implemented in order to get an overview of the overall utilisation of all resources in the company. It offers the possibility to see at a glance for a selected time period by means of green, yellow and red boxes, whether the actual booked workload is higher than the planned capacity, which is available to a resource, e.g. due to assigned employees (e.g. 4 employees of 40 hours each per week = 160 hours capacity at the machine). Employee deployment planning This capacity utilisation list can also be used for the scheduling of employees: Tasks from service provider groups, work orders and service assignments are posted to the employee's planning pool. In this way, it is possible to monitor which employee is working at what time and to what extent, or where he or she may be out in the field, absent due to holidays, illness or other reasons, or whether he or she is on emergency duty for the selected calendar week. For the capacity planning of employees there are a few special features: Flexitime days Flexitime absences can be entered via the employee mask. These are then displayed in the overview with a blue symbol with a white square. This should then mean that the employee is free (blue means no capacity due to holidays, illness or other absence), but can be contacted in case of bottlenecks. For this reason, there is a different symbol for the \"flexitime\" absence than for all other full-day absences where the reason cannot be identified. Emergency services The emergency service is also determined by an employee's absence. The overview then checks whether the employee has an emergency service on the first Monday shown and displays this in red under the employee name in the list. The emergency services are always valid per week in the usual cases. Receipts posted In order to display the documents that were used to represent the workload, you can use the toolbar or by right-clicking and then using the context menu entry\"Capacity overview\" to jump to a list of booked vouchers divided by calendar weeks. The planned capacity can be entered in the capacity planning module, which can be accessed via the resources (Menu in search list \"Edit - Set - Capacity planning\". It can also be set via the list of the capacity overview by double-clicking. The evaluation and display can be influenced via the option window. Restriction criteria Resource In the area \"Resource\" you can set for which type of resource an evaluation should be made. The following resource types are available: Production area Workplace Working Group Machine Employees Depending on the selected resource category, a restriction option appears in the embedded subgroup \"Selected resource\" to start the evaluation for only one resource or only one production area which in turn can contain several resources. It is also possible to drag and drop resources into the list. However, if there are several entries, the option \"Empty list before new search\" in the option window must be deactivated first. Evaluation options There are two other ways to generate the evaluation: by the day or by the week. However, this option is only possible for employees and work groups. List view The list can be displayed in various ways: Quick overview - coloured boxes are displayed for a quick overview of whether there is sufficient capacity for the booked requirements Detailed - No coloured boxes were used. In this mode all relevant data is displayed divided into columns, e.g. total demand, overhang, projected demand... Shift plan - The shift plan is a short overview that also shows for which customer the planned capacity is needed, or for which customer the employee was scheduled. This is determined exclusively from booked service provider groups from quotations and orders. This way it is possible to clearly identify for each employee in a given period of time if and where he is scheduled to work or where he is currently located. - Attention: In order not to make the list too confusing, only the first 50 letters of all locations are displayed per day or per week per resource! So if an employee is at 6 different customers on one day, the exact location can only be determined via the capacity overview ( in the toolbar or by double clicking on the line)! Exemplary example of a deployment plan: {img type=\"fileId\" fileId=\"374\" thumb=\"box\" width=\"100%\"} Attention during employee evaluations: If the evaluation option \"Employee Graphic Mode\" is set, the evaluation logic behaves a little differently than in normal mode: In the list, only the days that have LESS workload than originally planned appear in red. For all other resources it is exactly the other way round, there the overplanning is marked in red. If no capacity has been specified for a booked period, or if an absence has been booked for the employee for this day (illness, holiday, etc.), the blue box is displayed. If the employee has a \"flexitime day\" absence, a white square is displayed in the blue box. Also in the graphics a difference can be seen: In red, the working time is marked that was actually assigned by the daily working time assigned to the employee, but not logged off by hourly data entry. This time is therefore unlogged working time. In white, the bar shows the time that was logged off by a time sheet, but the project hanging on the time sheet has the \"do not calculate\" check mark. This time is considered as working time that cannot be calculated further. In blue, the time is shown in the bar, which has been logged off by time sheets and can also be charged to the customer. Display A time range for the evaluation can be specified in the right group. A possible entry would be 25th week 06 to 30th week 06 or May to June or even 2005 to 2006. The longer the selected time period, the longer the evaluation will take, of course, but the more accurate the development can be, the more accurate the resources can be graphically displayed. Once all the details have been entered, you can click on the button or by pressing Enter in the date field the evaluation can be started. The progress is indicated by a progress bar at the bottom of the screen. When the determination is complete, the result is displayed as shown above: It is now very easy to see in which workstation the workload in which calendar week is greater than planned. The planned workload is calculated by multiplying the number of employees assigned to this workstation by their weekly hours. So if a red square is visible, either the schedule would have to be rescheduled, the employees would have to be asked to work overtime or an external worker would have to be called in for this week in order to increase the planned capacity. The workloads can also be displayed in a graph for individual resources (mark entry in list). For this purpose, the toolbar button to operate. Depending on the display graphics set in the option window, a window with a bar or line chart, flat or in 3D, appears: Here it can be read even more precisely how far a planned capacity has been exceeded or whether the utilisation rate for a resource is permanently lower than planned. In this case, the planned capacity could be reduced by reassigning an employee to a different work area and at the same time the planned capacity could be increased in his new work area. With the help of the graphics, a load overview can also be created retrospectively for a whole year. Overhangs If work from previous periods is still open, this is referred to as overhangs. These overhangs are listed separately as standard. In order to see which documents make up the total of the overhangs, the entry can be marked in the list and the context menu opened by right-clicking on it. In this context menu, select the entry \"Display open documents of previous periods\". The worklist opens and displays all these documents. From here the documents can then be logged off. If old documents are still found, they can also be simply set to completed by clicking on \"Change status\" (right click on worklist). Configured times from network plan. ### Instruction: What is the name of the module being described? ### Response: The module being described is Capacity utilisation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Capacity utilisation for me. ### Response: The purpose of the module Capacity utilisation is the following: This module was implemented in order to get an overview of the overall utilisation of all resources in the company. It offers the possibility to see at a glance for a selected time period by means of green, yellow and red boxes, whether the actual booked workload is higher than the planned capacity, which is available to a resource, e.g. due to assigned employees (e.g. 4 employees of 40 hours each per week = 160 hours capacity at the machine). Employee deployment planning This capacity utilisation list can also be used for the scheduling of employees: Tasks from service provider groups, work orders and service assignments are posted to the employee's planning pool. In this way, it is possible to monitor which employee is working at what time and to what extent, or where he or she may be out in the field, absent due to holidays, illness or other reasons, or whether he or she is on emergency duty for the selected calendar week. For the capacity planning of employees there are a few special features: Flexitime days Flexitime absences can be entered via the employee mask. These are then displayed in the overview with a blue symbol with a white square. This should then mean that the employee is free (blue means no capacity due to holidays, illness or other absence), but can be contacted in case of bottlenecks. For this reason, there is a different symbol for the \"flexitime\" absence than for all other full-day absences where the reason cannot be identified. Emergency services The emergency service is also determined by an employee's absence. The overview then checks whether the employee has an emergency service on the first Monday shown and displays this in red under the employee name in the list. The emergency services are always valid per week in the usual cases. Receipts posted In order to display the documents that were used to represent the workload, you can use the toolbar or by right-clicking and then using the context menu entry\"Capacity overview\" to jump to a list of booked vouchers divided by calendar weeks. The planned capacity can be entered in the capacity planning module, which can be accessed via the resources (Menu in search list \"Edit - Set - Capacity planning\". It can also be set via the list of the capacity overview by double-clicking. The evaluation and display can be influenced via the option window. Restriction criteria Resource In the area \"Resource\" you can set for which type of resource an evaluation should be made. The following resource types are available: Production area Workplace Working Group Machine Employees Depending on the selected resource category, a restriction option appears in the embedded subgroup \"Selected resource\" to start the evaluation for only one resource or only one production area which in turn can contain several resources. It is also possible to drag and drop resources into the list. However, if there are several entries, the option \"Empty list before new search\" in the option window must be deactivated first. Evaluation options There are two other ways to generate the evaluation: by the day or by the week. However, this option is only possible for employees and work groups. List view The list can be displayed in various ways: Quick overview - coloured boxes are displayed for a quick overview of whether there is sufficient capacity for the booked requirements Detailed - No coloured boxes were used. In this mode all relevant data is displayed divided into columns, e.g. total demand, overhang, projected demand... Shift plan - The shift plan is a short overview that also shows for which customer the planned capacity is needed, or for which customer the employee was scheduled. This is determined exclusively from booked service provider groups from quotations and orders. This way it is possible to clearly identify for each employee in a given period of time if and where he is scheduled to work or where he is currently located. - Attention: In order not to make the list too confusing, only the first 50 letters of all locations are displayed per day or per week per resource! So if an employee is at 6 different customers on one day, the exact location can only be determined via the capacity overview ( in the toolbar or by double clicking on the line)! Exemplary example of a deployment plan: {img type=\"fileId\" fileId=\"374\" thumb=\"box\" width=\"100%\"} Attention during employee evaluations: If the evaluation option \"Employee Graphic Mode\" is set, the evaluation logic behaves a little differently than in normal mode: In the list, only the days that have LESS workload than originally planned appear in red. For all other resources it is exactly the other way round, there the overplanning is marked in red. If no capacity has been specified for a booked period, or if an absence has been booked for the employee for this day (illness, holiday, etc.), the blue box is displayed. If the employee has a \"flexitime day\" absence, a white square is displayed in the blue box. Also in the graphics a difference can be seen: In red, the working time is marked that was actually assigned by the daily working time assigned to the employee, but not logged off by hourly data entry. This time is therefore unlogged working time. In white, the bar shows the time that was logged off by a time sheet, but the project hanging on the time sheet has the \"do not calculate\" check mark. This time is considered as working time that cannot be calculated further. In blue, the time is shown in the bar, which has been logged off by time sheets and can also be charged to the customer. Display A time range for the evaluation can be specified in the right group. A possible entry would be 25th week 06 to 30th week 06 or May to June or even 2005 to 2006. The longer the selected time period, the longer the evaluation will take, of course, but the more accurate the development can be, the more accurate the resources can be graphically displayed. Once all the details have been entered, you can click on the button or by pressing Enter in the date field the evaluation can be started. The progress is indicated by a progress bar at the bottom of the screen. When the determination is complete, the result is displayed as shown above: It is now very easy to see in which workstation the workload in which calendar week is greater than planned. The planned workload is calculated by multiplying the number of employees assigned to this workstation by their weekly hours. So if a red square is visible, either the schedule would have to be rescheduled, the employees would have to be asked to work overtime or an external worker would have to be called in for this week in order to increase the planned capacity. The workloads can also be displayed in a graph for individual resources (mark entry in list). For this purpose, the toolbar button to operate. Depending on the display graphics set in the option window, a window with a bar or line chart, flat or in 3D, appears: Here it can be read even more precisely how far a planned capacity has been exceeded or whether the utilisation rate for a resource is permanently lower than planned. In this case, the planned capacity could be reduced by reassigning an employee to a different work area and at the same time the planned capacity could be increased in his new work area. With the help of the graphics, a load overview can also be created retrospectively for a whole year. Overhangs If work from previous periods is still open, this is referred to as overhangs. These overhangs are listed separately as standard. In order to see which documents make up the total of the overhangs, the entry can be marked in the list and the context menu opened by right-clicking on it. In this context menu, select the entry \"Display open documents of previous periods\". The worklist opens and displays all these documents. From here the documents can then be logged off. If old documents are still found, they can also be simply set to completed by clicking on \"Change status\" (right click on worklist). Configured times from network plan."
    },
    {
        "input": "",
        "output": "### Context: This is the description of CAR: In the CyberEnterprise® Enterprise Model, vehicles are treated as a special form of parts, i.e. according to the terminology of object orientation, vehicles are also said to be derived from parts and vehicles are inherited from parts. Another specialisation of vehicles are cars and trucks. Vehicles are maintained in the CyberEnterprise® enterprise model as part of a company's vehicle fleet. For example, an assignment to a car is stored in the route plan of a delivery. ### Instruction: Which module is being described? ### Response: The name of this module is CAR."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module CAR serve? ### Response: The purpose of the module CAR is the following: In the CyberEnterprise® Enterprise Model, vehicles are treated as a special form of parts, i.e. according to the terminology of object orientation, vehicles are also said to be derived from parts and vehicles are inherited from parts. Another specialisation of vehicles are cars and trucks. Vehicles are maintained in the CyberEnterprise® enterprise model as part of a company's vehicle fleet. For example, an assignment to a car is stored in the route plan of a delivery.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Distribution list: With this module distributors for vouchers can be entered and maintained. ### Instruction: Tell me the name of this module. ### Response: The module being described is Distribution list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Distribution list for me. ### Response: The purpose of the module Distribution list is as follows: With this module distributors for vouchers can be entered and maintained.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:CarPrio: This application allows the purchase, sale and management of the vehicle stock. The special feature here is the data linking via the SOAP interface from Schwacke. The interface includes the transfer of vehicle data and buyer/seller data. ### Instruction: Tell me the name of this module. ### Response: This module is named English:CarPrio."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module English:CarPrio. ### Response: The purpose of the module English:CarPrio is as follows: This application allows the purchase, sale and management of the vehicle stock. The special feature here is the data linking via the SOAP interface from Schwacke. The interface includes the transfer of vehicle data and buyer/seller data.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cash book: The cash book is used to record the expenditure/receipts of a cash office. You can create as many cash registers as you wish, and keep a record of their respective stock. Cash vouchers can be immediately assigned to an account when they are entered, but it is important to keep the cash balance correct. A cash balance is done in 2 steps: first a cash report is created, whereby their cash receipts are removed from the current cash book. The cash documents of a cash report can be changed afterwards only with regard to their period or account assignment. In the second step a cash report can then be transferred to the financial accounting. The cash documents of a cash report posted in financial accounting cannot be changed. ### Instruction: What is the name of this module? ### Response: This module is Cash book."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Cash book for me. ### Response: The module Cash book is used for the following: The cash book is used to record the expenditure/receipts of a cash office. You can create as many cash registers as you wish, and keep a record of their respective stock. Cash vouchers can be immediately assigned to an account when they are entered, but it is important to keep the cash balance correct. A cash balance is done in 2 steps: first a cash report is created, whereby their cash receipts are removed from the current cash book. The cash documents of a cash report can be changed afterwards only with regard to their period or account assignment. In the second step a cash report can then be transferred to the financial accounting. The cash documents of a cash report posted in financial accounting cannot be changed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Terms of payment: In ClassiX® payment terms can belong to both purchase and sale. ### Instruction: Which module is being described? ### Response: The name of this module is Terms of payment."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Terms of payment? ### Response: The module Terms of payment can be described as follows: In ClassiX® payment terms can belong to both purchase and sale.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost centre totals list: With this module, the costs accrued on cost centres can be listed. On the one hand, the costs are displayed for the selected posting period (the so-called period costs), on the other hand they are cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. A further option enables the additional output of the cost elements posted per cost centre. A difference line is output if the total of these cost centre/cost element postings does not match the total costs posted to the cost centre. Costs are posted from financial accounting to the cost centres. Since these postings may also be posted to a cost object at the same time, these values are displayed separately (see columns \"thereof with cost object\"). One has the possibility to separate especially the revenue postings (=negative costs) from the other \"net\" costs (see\"net\" columns). A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year. ### Instruction: Name this module. ### Response: This module is named Cost centre totals list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Cost centre totals list serve? ### Response: The module Cost centre totals list is used for the following: With this module, the costs accrued on cost centres can be listed. On the one hand, the costs are displayed for the selected posting period (the so-called period costs), on the other hand they are cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. A further option enables the additional output of the cost elements posted per cost centre. A difference line is output if the total of these cost centre/cost element postings does not match the total costs posted to the cost centre. Costs are posted from financial accounting to the cost centres. Since these postings may also be posted to a cost object at the same time, these values are displayed separately (see columns \"thereof with cost object\"). One has the possibility to separate especially the revenue postings (=negative costs) from the other \"net\" costs (see\"net\" columns). A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost centre evaluation: Cost centres can be directly subordinated to other cost centres, the entire structure is called an organisation chart. This module displays for each node of the organisation chart the current costs and planned costs (with variance in %) of the selected posting period (period costs) and the cumulative costs and cumulative planned costs (with variance in %) from the beginning of the fiscal year belonging to the posting period up to the specified accrual period - or optionally up to the end of the corresponding fiscal year. A period range can also be specified as the current posting period, e.g. for a quarterly evaluation. Costs can be posted to cost centres via financial accounting, via cost/service postings and via goods storage or removal. When goods are put away or removed from storage, they are posted for withdrawals for or receipts from cost centres together with the allocation cost element for storage stored in the client. If several company codes are assigned to a client, the cost centre evaluation can be called up for individual or cumulative for several company codes at the same time. This module can be called up for all cost centres in general (Controlling) or only for users who are responsible for cost centres. In the latter case, this user can only call up the costs of his and the subordinate cost centres. However, the costs themselves are only displayed to a limited extent, as they are only those costs whose cost elements are public. Both the controlling department and the cost centre managers can delegate an evaluation for a specific cost centre to any user using the functionality of saved lists. Even in this case, the evaluation can only be run to a limited extent for the cost centre (and its subordinate cost centres) once it has been transferred, it corresponds to the usage rights of a cost centre manager. ### Instruction: How is this module called? ### Response: This module is named Cost centre evaluation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Cost centre evaluation serve? ### Response: The module Cost centre evaluation serves the purpose of the following: Cost centres can be directly subordinated to other cost centres, the entire structure is called an organisation chart. This module displays for each node of the organisation chart the current costs and planned costs (with variance in %) of the selected posting period (period costs) and the cumulative costs and cumulative planned costs (with variance in %) from the beginning of the fiscal year belonging to the posting period up to the specified accrual period - or optionally up to the end of the corresponding fiscal year. A period range can also be specified as the current posting period, e.g. for a quarterly evaluation. Costs can be posted to cost centres via financial accounting, via cost/service postings and via goods storage or removal. When goods are put away or removed from storage, they are posted for withdrawals for or receipts from cost centres together with the allocation cost element for storage stored in the client. If several company codes are assigned to a client, the cost centre evaluation can be called up for individual or cumulative for several company codes at the same time. This module can be called up for all cost centres in general (Controlling) or only for users who are responsible for cost centres. In the latter case, this user can only call up the costs of his and the subordinate cost centres. However, the costs themselves are only displayed to a limited extent, as they are only those costs whose cost elements are public. Both the controlling department and the cost centre managers can delegate an evaluation for a specific cost centre to any user using the functionality of saved lists. Even in this case, the evaluation can only be run to a limited extent for the cost centre (and its subordinate cost centres) once it has been transferred, it corresponds to the usage rights of a cost centre manager.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Payment plan amounts: The payment plan amounts describe a payment plan by defining the time and amount of the down payment requests and final invoices to be issued. The due date of the payment plan amounts can be evaluated using the down payment request book. ### Instruction: Name this module. ### Response: The module being described is Payment plan amounts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Payment plan amounts serve? ### Response: The module Payment plan amounts can be described as follows: The payment plan amounts describe a payment plan by defining the time and amount of the down payment requests and final invoices to be issued. The due date of the payment plan amounts can be evaluated using the down payment request book.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Receipt book for cheques received: This module is used to manage cheques received in specially set up entry books. Received cheques can be entered (status: received), open items assigned, posted in a second step in the financial accounting (status: posted) and a list can be printed as a deposit form for the bank (status: deposited). This module is used particularly in countries (e.g. USA) where payments by cheque are widespread. Outgoing cheques are created and printed in the payment run . ### Instruction: Tell me the name of this module. ### Response: This module is called Receipt book for cheques received."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Receipt book for cheques received for me. ### Response: The purpose of the module Receipt book for cheques received is the following: This module is used to manage cheques received in specially set up entry books. Received cheques can be entered (status: received), open items assigned, posted in a second step in the financial accounting (status: posted) and a list can be printed as a deposit form for the bank (status: deposited). This module is used particularly in countries (e.g. USA) where payments by cheque are widespread. Outgoing cheques are created and printed in the payment run .."
    },
    {
        "input": "",
        "output": "### Context: This is the description of ClassiX® Copy Buffer: ClassiX® enables the copying of sales types, sales articles and complete offers or orders. Attention! The copy buffer does not copy job groups that are marked as option groups or as \"do not calculate\"!. ### Instruction: What is the name of the module being described? ### Response: This module is named ClassiX® Copy Buffer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module ClassiX® Copy Buffer for me. ### Response: The module ClassiX® Copy Buffer can be described as follows: ClassiX® enables the copying of sales types, sales articles and complete offers or orders. Attention! The copy buffer does not copy job groups that are marked as option groups or as \"do not calculate\"!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Class tree: This app displays the classes of the CyberEnterprise® enterprise model in a tree structure. If a class with a blue diamond is displayed, then it is a class defined in C++, if the colour of the diamond is red, then it is a pseudo class, i.e. a class without own definition in C++. ### Instruction: What is the name of this module? ### Response: The name of this module is Class tree."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Class tree serve? ### Response: The module Class tree can be described as follows: This app displays the classes of the CyberEnterprise® enterprise model in a tree structure. If a class with a blue diamond is displayed, then it is a class defined in C++, if the colour of the diamond is red, then it is a pseudo class, i.e. a class without own definition in C++.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Summary and balance list for representatives (commission accounts): This module is used to call up the summary, balance list (for the commission account) of representatives. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances. ### Instruction: Tell me the name of this module. ### Response: This module is Summary and balance list for representatives (commission accounts)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Summary and balance list for representatives (commission accounts) for me. ### Response: The module Summary and balance list for representatives (commission accounts) can be described as follows: This module is used to call up the summary, balance list (for the commission account) of representatives. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Operational accounting Account sheets: This module is used to output/print account sheets/account statements of the cost accounts of the operational accounting. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Operational accounting Account sheets."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Operational accounting Account sheets used for? ### Response: The purpose of the module Operational accounting Account sheets is as follows: This module is used to output/print account sheets/account statements of the cost accounts of the operational accounting.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost element evaluation per cost object: For individual cost units - separated by cost elements - the accumulated costs posted in financial accounting are displayed. The financial accounting costs can be delimited according to posting periods \"from-to\" or in total up to one posting period. The cost elements can be output either as a list of one another or structured by means of a classification term (e.g. P&L, BWA, etc.). ### Instruction: What is the name of this module? ### Response: The module being described is Cost element evaluation per cost object."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Cost element evaluation per cost object used for? ### Response: The module Cost element evaluation per cost object is used for the following: For individual cost units - separated by cost elements - the accumulated costs posted in financial accounting are displayed. The financial accounting costs can be delimited according to posting periods \"from-to\" or in total up to one posting period. The cost elements can be output either as a list of one another or structured by means of a classification term (e.g. P&L, BWA, etc.).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Table columns: The display of a table can be changed by specifying the table columns. ### Instruction: Tell me the name of this module. ### Response: This module is called Table columns."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Table columns. ### Response: The module Table columns can be described as follows: The display of a table can be changed by specifying the table columns.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Note: Capture and maintenance of monolingual or multilingual notes on objects.This app is also used to only display monolingual or multilingual texts. In this case, all editing functions and the Save button are not active. ### Instruction: How is this module called? ### Response: This module is Note."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Note serve? ### Response: The module Note serves the purpose of the following: Capture and maintenance of monolingual or multilingual notes on objects.This app is also used to only display monolingual or multilingual texts. In this case, all editing functions and the Save button are not active.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Commission agreement: The commission agreement is the document in ClassiX® which records the client's agreement with a representative for the payment of a commission. As a rule, the commission agreement is the successor to an order, which is therefore the basis of the agreement. The amount of commission is defined in the commission agreement. The settlement is carried out via the creation of an outgoing credit note. Commission agreements can be created manually or automatically. They are created automatically if one or more representatives are assigned to a customer. When an order is created for this customer, a commission agreement is automatically created for each of these representatives. The amount of the commission is determined by the standard commission of the representative. However, the amount of the commission can also be specified individually for individual customers. ### Instruction: How is this module called? ### Response: The module being described is Commission agreement."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Commission agreement? ### Response: The purpose of the module Commission agreement is as follows: The commission agreement is the document in ClassiX® which records the client's agreement with a representative for the payment of a commission. As a rule, the commission agreement is the successor to an order, which is therefore the basis of the agreement. The amount of commission is defined in the commission agreement. The settlement is carried out via the creation of an outgoing credit note. Commission agreements can be created manually or automatically. They are created automatically if one or more representatives are assigned to a customer. When an order is created for this customer, a commission agreement is automatically created for each of these representatives. The amount of the commission is determined by the standard commission of the representative. However, the amount of the commission can also be specified individually for individual customers.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional account: This module is called from the modules of the sales statistics groups and purchasing statistics groups and is used for the account assignment of outgoing and incoming invoices. If the account assignment is carried out via the classification term \"sales statistics\" in such a way that the respective structure nodes lead to individual sales statistics groups and these in turn are to directly address an account, then this account can be entered in this module without any conditions. As a rule, however, the account assignment is made via the header of the sales statistics structure and the account assignment is dependent on the customer or the control key. In this case the following variables can be used for the conditional account: Variable Value Comment Example customer.uniqueID Customer number Special account assignment rules for individual customers (e.g. for affiliated companies) customer.uniqueID=\"001234\" customer.taxEnum 1 Residents customer.taxEnum=1 \" 2 EU customer.taxEnum=2 \" 4 Third country customer.taxEnum=4 sales.tax.uniqueID Control key Special account assignment rules depending on the control key sales.tax.uniqueID=\"03\" For purchasing statistics groups, the following variables apply to the formulation of conditions: Variable Value Comment Example supplier.uniqueID Customer number Special account assignment rules for individual customers (e.g. for affiliated companies) supplier.uniqueID=\"701789\" supplier.taxEnum 1 Residents supplier.taxEnum=1 \" 2 EU supplier.taxEnum=2 \" 4 Third country supplier.taxEnum=4 tax.uniqueID Control key Special account assignment rules depending on the control key tax.uniqueID=\"08\". ### Instruction: What is the name of this module? ### Response: The name of this module is Conditional account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Conditional account for me. ### Response: The module Conditional account can be described as follows: This module is called from the modules of the sales statistics groups and purchasing statistics groups and is used for the account assignment of outgoing and incoming invoices. If the account assignment is carried out via the classification term \"sales statistics\" in such a way that the respective structure nodes lead to individual sales statistics groups and these in turn are to directly address an account, then this account can be entered in this module without any conditions. As a rule, however, the account assignment is made via the header of the sales statistics structure and the account assignment is dependent on the customer or the control key. In this case the following variables can be used for the conditional account: Variable Value Comment Example customer.uniqueID Customer number Special account assignment rules for individual customers (e.g. for affiliated companies) customer.uniqueID=\"001234\" customer.taxEnum 1 Residents customer.taxEnum=1 \" 2 EU customer.taxEnum=2 \" 4 Third country customer.taxEnum=4 sales.tax.uniqueID Control key Special account assignment rules depending on the control key sales.tax.uniqueID=\"03\" For purchasing statistics groups, the following variables apply to the formulation of conditions: Variable Value Comment Example supplier.uniqueID Customer number Special account assignment rules for individual customers (e.g. for affiliated companies) supplier.uniqueID=\"701789\" supplier.taxEnum 1 Residents supplier.taxEnum=1 \" 2 EU supplier.taxEnum=2 \" 4 Third country supplier.taxEnum=4 tax.uniqueID Control key Special account assignment rules depending on the control key tax.uniqueID=\"08\"."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional conditions: For more efficient entry of quotations/orders, customer-specific conditions can be stored in the customer role, which are automatically adopted when a quotation/order is created. Since this rule cannot be generalised to all conditions, it is possible to attach a condition to conditions. ### Instruction: What is the name of this module? ### Response: This module is named Conditional conditions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Conditional conditions. ### Response: The module Conditional conditions is used for the following: For more efficient entry of quotations/orders, customer-specific conditions can be stored in the customer role, which are automatically adopted when a quotation/order is created. Since this rule cannot be generalised to all conditions, it is possible to attach a condition to conditions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Condition groups: Using condition groups, different conditions can be combined and transferred to the documents in one. In this way, for example, the standard conditions for the order of a certain type can be defined. All conditions (cash discount, pricing, warranty, etc.) are then assigned to this condition group. When creating the order, not all conditions are then selected individually, but only the condition group intended for this category. ### Instruction: How is this module called? ### Response: This module is named Condition groups."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Condition groups used for? ### Response: The purpose of the module Condition groups is as follows: Using condition groups, different conditions can be combined and transferred to the documents in one. In this way, for example, the standard conditions for the order of a certain type can be defined. All conditions (cash discount, pricing, warranty, etc.) are then assigned to this condition group. When creating the order, not all conditions are then selected individually, but only the condition group intended for this category.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Calculatory conditions: We define imputed conditions as additional fees or discounts to be paid. They therefore change the value (price) of a document in which they are used and thus offer a flexible instrument for pricing. Examples of imputed conditions are discounts/surcharges, freight surcharges or packaging surcharges. ### Instruction: Name this module. ### Response: This module is named Calculatory conditions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Calculatory conditions? ### Response: The module Calculatory conditions serves the purpose of the following: We define imputed conditions as additional fees or discounts to be paid. They therefore change the value (price) of a document in which they are used and thus offer a flexible instrument for pricing. Examples of imputed conditions are discounts/surcharges, freight surcharges or packaging surcharges.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Terms and conditions: Business conditions (conditions) are objects that extend the functionality of business objects in a certain way or define additional properties; compared to attributes, conditions combine more complex data structures. Business condition Warranty defines for example warranty period and number of shifts, business condition Freight - freight value, calculation type, G/L account and freight table. A distinction is made: Terms of payment (terms of payment, partial payment) Calculatory conditions or discounts and surcharges (discount, packaging surcharge, etc.) other conditions (pricing, delivery time, etc.). Text modules (text module) Terms of payment and text modules are described individually (see links above). All conditions (except text modules) are divided into two areas: Purchase and sales conditions:. ### Instruction: Tell me the name of this module. ### Response: This module is Terms and conditions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Terms and conditions for me. ### Response: The purpose of the module Terms and conditions is as follows: Business conditions (conditions) are objects that extend the functionality of business objects in a certain way or define additional properties; compared to attributes, conditions combine more complex data structures. Business condition Warranty defines for example warranty period and number of shifts, business condition Freight - freight value, calculation type, G/L account and freight table. A distinction is made: Terms of payment (terms of payment, partial payment) Calculatory conditions or discounts and surcharges (discount, packaging surcharge, etc.) other conditions (pricing, delivery time, etc.). Text modules (text module) Terms of payment and text modules are described individually (see links above). All conditions (except text modules) are divided into two areas: Purchase and sales conditions:."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Consultant: The colloquially established term \"consultant\" combines the German professional titles \"Berater\" and \"Planer\", which is why it was retained in the German language version. ### Instruction: What is the name of this module? ### Response: The name of this module is English:Consultant."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Consultant for me. ### Response: The purpose of the module English:Consultant is the following: The colloquially established term \"consultant\" combines the German professional titles \"Berater\" and \"Planer\", which is why it was retained in the German language version.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Wizard: This module is used to automatically create projects and SOFs (order/sales planning documents) using an Excel template. A sales forecast and market analysis can be carried out on the basis of projects and SOFs. The information for this is usually provided by the sales department. Since they cannot always enter the data directly in ClassiX®, the template offers them the possibility to enter the data in Excel first and then import them via the cost unit wizard module. ### Instruction: What is the name of the module being described? ### Response: The name of this module is English:Wizard."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Wizard for me. ### Response: The purpose of the module English:Wizard is the following: This module is used to automatically create projects and SOFs (order/sales planning documents) using an Excel template. A sales forecast and market analysis can be carried out on the basis of projects and SOFs. The information for this is usually provided by the sales department. Since they cannot always enter the data directly in ClassiX®, the template offers them the possibility to enter the data in Excel first and then import them via the cost unit wizard module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Affiliated companies: This app can be used to maintain the relationships of affiliated companies. For this purpose, it is possible to specify for companies which other company is the parent or parent company or which other companies are subordinates or subsidiaries. This information is used, for example, in the account assignment of outgoing or incoming invoices. The term 'associated enterprises' should not be confused with the term 'branch'. Enterprises are affiliated if they are independent companies that cooperate with each other through participations. Branches are locations/departments of one and the same company. Branches are maintained in the company master module. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Affiliated companies."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Affiliated companies. ### Response: The module Affiliated companies is used for the following: This app can be used to maintain the relationships of affiliated companies. For this purpose, it is possible to specify for companies which other company is the parent or parent company or which other companies are subordinates or subsidiaries. This information is used, for example, in the account assignment of outgoing or incoming invoices. The term 'associated enterprises' should not be confused with the term 'branch'. Enterprises are affiliated if they are independent companies that cooperate with each other through participations. Branches are locations/departments of one and the same company. Branches are maintained in the company master module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost and service postings: Cost accounting - consisting of cost type, cost centre and cost unit accounting - is integrated into financial accounting and is supplied with data from there as far as possible. Additional repostings or distributions of costs are carried out with this module, in which you specify the cost elements, cost centres and cost objects that are to be transferred and/or the cost elements, cost centres and cost objects that are to be included. Transfer or distribution postings between cost elements are only possible if the issuing and the receiving cost element is totalled to the same profit and loss account. Cost or service postings can be booked directly as individual documents or entered as periodically recurring postings. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Cost and service postings."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Cost and service postings used for? ### Response: The purpose of the module Cost and service postings is as follows: Cost accounting - consisting of cost type, cost centre and cost unit accounting - is integrated into financial accounting and is supplied with data from there as far as possible. Additional repostings or distributions of costs are carried out with this module, in which you specify the cost elements, cost centres and cost objects that are to be transferred and/or the cost elements, cost centres and cost objects that are to be included. Transfer or distribution postings between cost elements are only possible if the issuing and the receiving cost element is totalled to the same profit and loss account. Cost or service postings can be booked directly as individual documents or entered as periodically recurring postings.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost centres: Cost centres are part of cost accounting alongside cost types and cost units. This module is used to maintain and display cost centres. This also includes the maintenance of planned costs. ### Instruction: What is the name of this module? ### Response: The name of this module is Cost centres."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Cost centres used for? ### Response: The module Cost centres serves the purpose of the following: Cost centres are part of cost accounting alongside cost types and cost units. This module is used to maintain and display cost centres. This also includes the maintenance of planned costs.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Internal cost unit: Cost objects are part of cost accounting alongside cost types and cost centres. However, the term cost object is also used synonymously with the term opportunity (marketing/sales), the term project (order processing) and the term framework contract (purchasing), depending on the field of expertise. A cost object thus describes a business object to which various existing objects and various documents can be assigned. Internal cost units are e.g. own development orders or trade fair appearances. The costs posted via financial accounting can also be posted to cost centres in parallel (similar to \"statistical internal orders\" in an SAP system). The documents assigned to an internal cost object, i.e. the documents posted with an internal cost object can also contain costs/services. Thus, costs/services can be assigned to an internal cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets). ### Instruction: Name this module. ### Response: This module is called Internal cost unit."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Internal cost unit used for? ### Response: The module Internal cost unit is used for the following: Cost objects are part of cost accounting alongside cost types and cost centres. However, the term cost object is also used synonymously with the term opportunity (marketing/sales), the term project (order processing) and the term framework contract (purchasing), depending on the field of expertise. A cost object thus describes a business object to which various existing objects and various documents can be assigned. Internal cost units are e.g. own development orders or trade fair appearances. The costs posted via financial accounting can also be posted to cost centres in parallel (similar to \"statistical internal orders\" in an SAP system). The documents assigned to an internal cost object, i.e. the documents posted with an internal cost object can also contain costs/services. Thus, costs/services can be assigned to an internal cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Marketing cost unit (sales opportunity): Along with cost types and cost centres, cost objects are part of cost accounting. However, the term cost object is also used synonymously - depending on the field - with the term project (order processing), the term framework agreement (purchasing) and the term internal cost object (e.g. R&D). A cost object thus describes a business object to which a wide variety of inventory objects and a wide variety of documents can be assigned. Within the marketing or sales acquisition process, marketing cost objects or sales opportunities form the second stage after the assignment of an interested party object or lead. The documents assigned to a cost object, i.e. the documents posted with a cost object can also contain costs/services. Thus, costs/services can be assigned to a cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets). Inventory data of a plant (industrial plant, machine, part (e.g. for development projects)) and/or a business partner(prospective customer, customer, operator) or an operative partner(prospective customer, operator) can be assigned to the cost units themselves. Transaction data such as offers or orders can also be assigned to the cost units. Here, a \"project\" is thus the superordinate node for various offer or order documents. Usually at the beginning of a quotation processing there is the definition of a project, with specification of the external and internal project manager, the assignment to a plant and possibly also the determination of a first rough cost framework(order/sales planning) and a time schedule(network), which can be imported directly from a planning by means of MS-Projects and can also be reconciled with it. Therefore, offers can be created directly from a marketing cost object via certain buttons on the toolbar. In order to assign a marketing cost object to an order, the marketing cost object must first be converted into a sales cost object. ### Instruction: How is this module called? ### Response: This module is named Marketing cost unit (sales opportunity)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Marketing cost unit (sales opportunity) serve? ### Response: The module Marketing cost unit (sales opportunity) serves the purpose of the following: Along with cost types and cost centres, cost objects are part of cost accounting. However, the term cost object is also used synonymously - depending on the field - with the term project (order processing), the term framework agreement (purchasing) and the term internal cost object (e.g. R&D). A cost object thus describes a business object to which a wide variety of inventory objects and a wide variety of documents can be assigned. Within the marketing or sales acquisition process, marketing cost objects or sales opportunities form the second stage after the assignment of an interested party object or lead. The documents assigned to a cost object, i.e. the documents posted with a cost object can also contain costs/services. Thus, costs/services can be assigned to a cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets). Inventory data of a plant (industrial plant, machine, part (e.g. for development projects)) and/or a business partner(prospective customer, customer, operator) or an operative partner(prospective customer, operator) can be assigned to the cost units themselves. Transaction data such as offers or orders can also be assigned to the cost units. Here, a \"project\" is thus the superordinate node for various offer or order documents. Usually at the beginning of a quotation processing there is the definition of a project, with specification of the external and internal project manager, the assignment to a plant and possibly also the determination of a first rough cost framework(order/sales planning) and a time schedule(network), which can be imported directly from a planning by means of MS-Projects and can also be reconciled with it. Therefore, offers can be created directly from a marketing cost object via certain buttons on the toolbar. In order to assign a marketing cost object to an order, the marketing cost object must first be converted into a sales cost object.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost object totals list: With this module, the costs accrued on cost units can be listed. The costs can be calculated cumulatively until the end of the adjustable accrual period or for a from-to period. Cost objects can be selected according to their type and duration. A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year. ### Instruction: What is the name of the module being described? ### Response: This module is called Cost object totals list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Cost object totals list used for? ### Response: The module Cost object totals list can be described as follows: With this module, the costs accrued on cost units can be listed. The costs can be calculated cumulatively until the end of the adjustable accrual period or for a from-to period. Cost objects can be selected according to their type and duration. A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost object listing and selection: Within the CyberEnterprise business OS there are 4 types of different cost objects: sales cost objects (projects), purchase cost objects (contracts), internal cost objects and marketing cost objects (sales opportunities). These different types of cost objects are managed in their own modules, with this module cost objects of different types can be listed or selected together. ### Instruction: Name this module. ### Response: This module is named Cost object listing and selection."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Cost object listing and selection serve? ### Response: The module Cost object listing and selection is used for the following: Within the CyberEnterprise business OS there are 4 types of different cost objects: sales cost objects (projects), purchase cost objects (contracts), internal cost objects and marketing cost objects (sales opportunities). These different types of cost objects are managed in their own modules, with this module cost objects of different types can be listed or selected together.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Purchasing cost unit: Along with cost types and cost centres, cost objects are part of cost accounting. However, the term cost object is also used synonymously with the term sales opportunity (marketing/sales), the term project (order processing) and the term internal cost object (e.g. R&D), depending on the specialist area. A cost object thus describes a business object to which a wide variety of inventory objects and a wide variety of documents can be assigned. The documents assigned to a cost object, i.e. the documents posted with a cost object can also contain costs/services. Thus, costs/services can be assigned to a cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets). A company can receive different types of incoming invoices. The majority of incoming invoices are based on a purchase order, through which the invoice is entered in ClassiX. Thus, the invoice can be entered semi-automatically with regard to the data and an automatic invoice verification can be carried out against the order. A second type of incoming invoice are \"free invoices\", which are usually entered manually in the system without direct trigger/predecessor and therefore always have to be checked manually. By creating purchasing cost units, invoices for a maintenance, leasing or rental contract, for example, can also be entered and checked semi-automatically even though they are not preceded by a purchase order. Especially with monthly maintenance invoices, a manual run means regular, unnecessary additional work. The purchasing cost unit represents the contract concluded between the company and the customer. ### Instruction: Name this module. ### Response: The module being described is Purchasing cost unit."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Purchasing cost unit used for? ### Response: The module Purchasing cost unit can be described as follows: Along with cost types and cost centres, cost objects are part of cost accounting. However, the term cost object is also used synonymously with the term sales opportunity (marketing/sales), the term project (order processing) and the term internal cost object (e.g. R&D), depending on the specialist area. A cost object thus describes a business object to which a wide variety of inventory objects and a wide variety of documents can be assigned. The documents assigned to a cost object, i.e. the documents posted with a cost object can also contain costs/services. Thus, costs/services can be assigned to a cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets). A company can receive different types of incoming invoices. The majority of incoming invoices are based on a purchase order, through which the invoice is entered in ClassiX. Thus, the invoice can be entered semi-automatically with regard to the data and an automatic invoice verification can be carried out against the order. A second type of incoming invoice are \"free invoices\", which are usually entered manually in the system without direct trigger/predecessor and therefore always have to be checked manually. By creating purchasing cost units, invoices for a maintenance, leasing or rental contract, for example, can also be entered and checked semi-automatically even though they are not preceded by a purchase order. Especially with monthly maintenance invoices, a manual run means regular, unnecessary additional work. The purchasing cost unit represents the contract concluded between the company and the customer.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost unit (project): Along with cost types and cost centres, cost objects are part of cost accounting. However, the term cost object is also used synonymously with the term sales opportunity (marketing/sales), the term framework agreement (purchasing) and the term internal cost object (e.g. R&D), depending on the specialist area. A cost object thus describes a business object to which a wide variety of inventory objects and a wide variety of documents can be assigned.The documents assigned to a cost object, i.e. the documents posted with a cost object can also contain costs/services. Thus, costs/services can be assigned to a cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets).A (specialised) sales cost unit can be assigned inventory data of a plant (industrial plant, machine, part (e.g. for development projects)) and/or a business partner(customer, interested party, operator) or an operative partner(interested party, operator).Transaction data such as offers or orders can also be assigned to a sales cost unit. In this case, a \"project\" is thus the superordinate node for various offer or order documents. Usually at the beginning of a quotation or order processing there is the definition of a project, with specification of the external and internal project manager, the assignment to a plant and possibly also the determination of a first rough cost framework(order/sales planning) and a time schedule(network), which can be imported directly from a planning by means of MS-Projects and can also be reconciled with it.Using certain buttons in the toolbar, quotations and orders can therefore be created directly from a sales cost unit. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Cost unit (project)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Cost unit (project). ### Response: The module Cost unit (project) is used for the following: Along with cost types and cost centres, cost objects are part of cost accounting. However, the term cost object is also used synonymously with the term sales opportunity (marketing/sales), the term framework agreement (purchasing) and the term internal cost object (e.g. R&D), depending on the specialist area. A cost object thus describes a business object to which a wide variety of inventory objects and a wide variety of documents can be assigned.The documents assigned to a cost object, i.e. the documents posted with a cost object can also contain costs/services. Thus, costs/services can be assigned to a cost object either directly via financial accounting or via special (cost) documents (e.g. time sheets).A (specialised) sales cost unit can be assigned inventory data of a plant (industrial plant, machine, part (e.g. for development projects)) and/or a business partner(customer, interested party, operator) or an operative partner(interested party, operator).Transaction data such as offers or orders can also be assigned to a sales cost unit. In this case, a \"project\" is thus the superordinate node for various offer or order documents. Usually at the beginning of a quotation or order processing there is the definition of a project, with specification of the external and internal project manager, the assignment to a plant and possibly also the determination of a first rough cost framework(order/sales planning) and a time schedule(network), which can be imported directly from a planning by means of MS-Projects and can also be reconciled with it.Using certain buttons in the toolbar, quotations and orders can therefore be created directly from a sales cost unit.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost categories: Cost types are part of cost accounting alongside cost centres and cost units. Cost elements can be assigned to a higher-level account in financial accounting (P&L account) and then serve to make accounting evaluations clearer and not to inflate the accounts unnecessarily. Such cost elements belong in the structure of the profit and loss account. In addition, allocation cost types can also be defined, which are only posted via cost and activity postings and are thus neutral to financial accounting. Cost elements are only posted if the corresponding setting has been made in the client under cost accounting/cost element accounting. ### Instruction: Which module is being described? ### Response: This module is named Cost categories."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Cost categories serve? ### Response: The module Cost categories is used for the following: Cost types are part of cost accounting alongside cost centres and cost units. Cost elements can be assigned to a higher-level account in financial accounting (P&L account) and then serve to make accounting evaluations clearer and not to inflate the accounts unnecessarily. Such cost elements belong in the structure of the profit and loss account. In addition, allocation cost types can also be defined, which are only posted via cost and activity postings and are thus neutral to financial accounting. Cost elements are only posted if the corresponding setting has been made in the client under cost accounting/cost element accounting.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Windows code page 1252: The Windows code page 1252 (CP1252) is based on the ISO 8859-1 character standard, which attempts to cover the special characters of Western European languages. The extension ISO 8859-15 takes the Euro symbol and other French special characters into account. The Windows code page 1252 integrates all these extensions, the difference to ISO 8859-1 is the following: Code ..0 ..1 ..2 ..3 ..4 ..5 ..6 ..7 ..8 ..9 ..A ..B ..C ..D ..E ..F 8.. € ‚ ƒ „ … † ‡ ˆ ‰ Š ‹ Œ Ž 9.. ‘ ’ “ ” -• – — ˜ ™ š › œ ž Ÿ The codes can be generated using a keyboard by simultaneously pressing the Alt key and the decimal value of the code in the numeric keypad (with leading 0). (e.g. hex code 80 = 0128 decimal code). In order to be able to enter characters from different languages (e.g. in vocabulary), a list of language-specific special characters follows:. ### Instruction: What is the name of the module being described? ### Response: This module is named Windows code page 1252."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Windows code page 1252 for me. ### Response: The purpose of the module Windows code page 1252 is as follows: The Windows code page 1252 (CP1252) is based on the ISO 8859-1 character standard, which attempts to cover the special characters of Western European languages. The extension ISO 8859-15 takes the Euro symbol and other French special characters into account. The Windows code page 1252 integrates all these extensions, the difference to ISO 8859-1 is the following: Code ..0 ..1 ..2 ..3 ..4 ..5 ..6 ..7 ..8 ..9 ..A ..B ..C ..D ..E ..F 8.. € ‚ ƒ „ … † ‡ ˆ ‰ Š ‹ Œ Ž 9.. ‘ ’ “ ” -• – — ˜ ™ š › œ ž Ÿ The codes can be generated using a keyboard by simultaneously pressing the Alt key and the decimal value of the code in the numeric keypad (with leading 0). (e.g. hex code 80 = 0128 decimal code). In order to be able to enter characters from different languages (e.g. in vocabulary), a list of language-specific special characters follows:."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Vendors (suppliers) summary and balance list: This module is used to call up the totals and balance list for vendor accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances. ### Instruction: Name this module. ### Response: The module being described is Vendors (suppliers) summary and balance list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Vendors (suppliers) summary and balance list. ### Response: The purpose of the module Vendors (suppliers) summary and balance list is the following: This module is used to call up the totals and balance list for vendor accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost elements totals list: With this module the costs accrued on cost elements can be listed. On the one hand, the costs are displayed for the selected posting period (the so-called period costs), on the other hand they are cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Costs can be posted to cost elements via financial accounting, via cost/service postings and via goods storage or removal. When goods are placed into or removed from storage or retrieved from a cost centre, they are only posted to the allocation cost element for storage stored in the client. A further option enables the additional output of the cost centres booked per cost type. A difference line is output if the total of these cost element/cost centre postings does not match the total costs posted to the cost element. In the special output form in the style of a company accounting sheet (BAB), the costs of the individual cost elements are also output per line, but the costs related to each cost element and cost centre are shown as columns of the individual line. A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year. ### Instruction: What is the name of this module? ### Response: This module is called Cost elements totals list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Cost elements totals list used for? ### Response: The purpose of the module Cost elements totals list is the following: With this module the costs accrued on cost elements can be listed. On the one hand, the costs are displayed for the selected posting period (the so-called period costs), on the other hand they are cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Costs can be posted to cost elements via financial accounting, via cost/service postings and via goods storage or removal. When goods are placed into or removed from storage or retrieved from a cost centre, they are only posted to the allocation cost element for storage stored in the client. A further option enables the additional output of the cost centres booked per cost type. A difference line is output if the total of these cost element/cost centre postings does not match the total costs posted to the cost element. In the special output form in the style of a company accounting sheet (BAB), the costs of the individual cost elements are also output per line, but the costs related to each cost element and cost centre are shown as columns of the individual line. A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Evaluation of cost elements: If cost elements of cost accounting are structured by means of classification keys (below structure trees of the type \"P&L\", \"BWA\" or \"TAS\"), business management evaluations (BWA) can be created using this module. Analogous to this module, there is the account evaluation for G/L accounts in financial accounting. For each structure main and sub node, the current costs of the selected posting period (period costs) and the cumulative costs from the beginning of the fiscal year belonging to the posting period up to the specified accrual period - or optionally up to the end of the corresponding fiscal year - are displayed. A period range can also be specified as the current posting period, e.g. to make a quarterly evaluation. Optionally, the cost element accounts organised in a structure node can be issued additionally with the corresponding costs. If several company codes are assigned to a client, the cost element evaluation can be called up for individual company codes or cumulatively for several company codes simultaneously. ### Instruction: What is the name of the module being described? ### Response: This module is called Evaluation of cost elements."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Evaluation of cost elements? ### Response: The purpose of the module Evaluation of cost elements is the following: If cost elements of cost accounting are structured by means of classification keys (below structure trees of the type \"P&L\", \"BWA\" or \"TAS\"), business management evaluations (BWA) can be created using this module. Analogous to this module, there is the account evaluation for G/L accounts in financial accounting. For each structure main and sub node, the current costs of the selected posting period (period costs) and the cumulative costs from the beginning of the fiscal year belonging to the posting period up to the specified accrual period - or optionally up to the end of the corresponding fiscal year - are displayed. A period range can also be specified as the current posting period, e.g. to make a quarterly evaluation. Optionally, the cost element accounts organised in a structure node can be issued additionally with the corresponding costs. If several company codes are assigned to a client, the cost element evaluation can be called up for individual company codes or cumulatively for several company codes simultaneously.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Current account: Current or cash accounts are managed by banks and the \"custodian\" partner role assigned to them. Their main function in ClassiX® is to maintain the connection to the money accounts in the financial accounting. Bank statements provided electronically by banks are assigned to the accounts maintained here after being read into ClassiX®(bank statements) and can also be viewed here. ### Instruction: What is the name of the module being described? ### Response: This module is Current account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Current account serve? ### Response: The module Current account can be described as follows: Current or cash accounts are managed by banks and the \"custodian\" partner role assigned to them. Their main function in ClassiX® is to maintain the connection to the money accounts in the financial accounting. Bank statements provided electronically by banks are assigned to the accounts maintained here after being read into ClassiX®(bank statements) and can also be viewed here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Currency translation: Conversion of convertible currencies. ### Instruction: Name this module. ### Response: This module is called Currency translation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Currency translation serve? ### Response: The module Currency translation can be described as follows: Conversion of convertible currencies.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Customer Agreement: Customer agreements keep customer specific data of a sales item, such as a negotiated price or customer's own number. ### Instruction: Which module is being described? ### Response: The module being described is Customer Agreement."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Customer Agreement for me. ### Response: The module Customer Agreement can be described as follows: Customer agreements keep customer specific data of a sales item, such as a negotiated price or customer's own number.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Topography: Especially for the purpose of path optimisation in a high bay warehouse (or other storage locations), access nodes (CX_ACCESS_NODE) and weighted access paths(CX_ACCESS_WAY) between access nodes are maintained in this module.To set up a topography for a bearing, the following procedure is recommended:Assign storage locations to newly created access nodesCreate warehouse topographyWeighting of access routes Check node/path graph Once the topography has been set up, the optimal route between two access nodes or between several access nodes can be displayed. ### Instruction: Name this module. ### Response: This module is named Topography."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Topography serve? ### Response: The module Topography serves the purpose of the following: Especially for the purpose of path optimisation in a high bay warehouse (or other storage locations), access nodes (CX_ACCESS_NODE) and weighted access paths(CX_ACCESS_WAY) between access nodes are maintained in this module.To set up a topography for a bearing, the following procedure is recommended:Assign storage locations to newly created access nodesCreate warehouse topographyWeighting of access routes Check node/path graph Once the topography has been set up, the optimal route between two access nodes or between several access nodes can be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Packing list: The packing lists are used for internal deliveries to construction sites and thus distinguish themselves from external delivery notes. The packing lists thus provide an overview of the material flow between the companies and the construction sites of the articles that are not level 0 parts of the order. Consequently, packing lists can be created from the following documents:Order items without delivery statusProduction parts list items Goods receipt items Material withdrawal items In addition, free positions can be entered without a predecessor.The packing list can be printed and enclosed with the delivery. Thus, the reference to the goods can be established on the construction site. ### Instruction: Which module is being described? ### Response: The module being described is Packing list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Packing list serve? ### Response: The module Packing list is used for the following: The packing lists are used for internal deliveries to construction sites and thus distinguish themselves from external delivery notes. The packing lists thus provide an overview of the material flow between the companies and the construction sites of the articles that are not level 0 parts of the order. Consequently, packing lists can be created from the following documents:Order items without delivery statusProduction parts list items Goods receipt items Material withdrawal items In addition, free positions can be entered without a predecessor.The packing list can be printed and enclosed with the delivery. Thus, the reference to the goods can be established on the construction site.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of API key: This module is used to maintain API keys. An API key is required to access an application programming interface (API). In addition, the use of an API key can be restricted to certain source IP addresses. Furthermore, the validity period of the API key can be defined.Logically, an API key is the reverse of a web service that provides access to an external resource. ### Instruction: Name this module. ### Response: The module being described is API key."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module API key serve? ### Response: The purpose of the module API key is as follows: This module is used to maintain API keys. An API key is required to access an application programming interface (API). In addition, the use of an API key can be restricted to certain source IP addresses. Furthermore, the validity period of the API key can be defined.Logically, an API key is the reverse of a web service that provides access to an external resource.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Application solution: Basic module for application solutions. ### Instruction: Name this module. ### Response: This module is named Application solution."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Application solution? ### Response: The module Application solution can be described as follows: Basic module for application solutions."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Asset: With this module of fixed asset accounting, the fixed assets or assets of a company are managed. The fixed assets of a company include all assets that are intended to serve the business operations on a permanent or long-term basis. The fixed asset accounts of the general ledger of the financial accounting are managed as collective accounts. In order to be able to determine the depreciation within the scope of the inventory on the balance sheet date correctly, a fixed asset accounting is required as subledger.The management of fixed assets also includes posting, for example, as additions, subsequent increases or disposals.Since 01.01.2004 the simplification rule has ceased to apply and newly acquired assets are written off pro rata temporis - to the month.Changes in the book value of an asset are made by means of manually or automatically created postings (e.g. automatic depreciation at the end of a fiscal year):AccessOutletPartial outflowAttribution DepreciationCollective depreciationNormally, the module automatically calculates the depreciation allowed for tax purposes at the end of a current fiscal year. In the case of fixed assets for which the calculation of depreciation is generally very individual (e.g. buildings), you can always enter \"individual plan\" as the type of depreciation. This is an indication that the annual depreciation should and will always and only be posted manually. In addition, a depreciation posting can be marked as an annual depreciation posting, which also means that the annual depreciation is not calculated automatically. If asset accounting is newly set up, a standardised import interface is available. ### Instruction: Tell me the name of this module. ### Response: This module is Asset."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Asset for me. ### Response: The module Asset serves the purpose of the following: With this module of fixed asset accounting, the fixed assets or assets of a company are managed. The fixed assets of a company include all assets that are intended to serve the business operations on a permanent or long-term basis. The fixed asset accounts of the general ledger of the financial accounting are managed as collective accounts. In order to be able to determine the depreciation within the scope of the inventory on the balance sheet date correctly, a fixed asset accounting is required as subledger.The management of fixed assets also includes posting, for example, as additions, subsequent increases or disposals.Since 01.01.2004 the simplification rule has ceased to apply and newly acquired assets are written off pro rata temporis - to the month.Changes in the book value of an asset are made by means of manually or automatically created postings (e.g. automatic depreciation at the end of a fiscal year):AccessOutletPartial outflowAttribution DepreciationCollective depreciationNormally, the module automatically calculates the depreciation allowed for tax purposes at the end of a current fiscal year. In the case of fixed assets for which the calculation of depreciation is generally very individual (e.g. buildings), you can always enter \"individual plan\" as the type of depreciation. This is an indication that the annual depreciation should and will always and only be posted manually. In addition, a depreciation posting can be marked as an annual depreciation posting, which also means that the annual depreciation is not calculated automatically. If asset accounting is newly set up, a standardised import interface is available.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Campaign: In a campaign you can write to different people with one form. In contrast to the transaction document, the contents of the individual mails are saved for each person. This is why this campaign is preferable to the normal transaction document if the contents per person differ greatly and are snapshots of a certain data situation. Functionality Input window List window Selection window Option window. ### Instruction: Name this module. ### Response: This module is Campaign."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Campaign. ### Response: The module Campaign can be described as follows: In a campaign you can write to different people with one form. In contrast to the transaction document, the contents of the individual mails are saved for each person. This is why this campaign is preferable to the normal transaction document if the contents per person differ greatly and are snapshots of a certain data situation. Functionality Input window List window Selection window Option window."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Postcodes and area codes: Postal codes always determine a (postal correct) name of a city. In addition to the postcodes for geographical delivery areas, there are also separate postcodes for major customers and post office box cabinets. Keeping a postcode register thus simplifies the entry of place names when entering addresses. In ClassiX® , such postcode registers can be maintained for different countries. If you confirm a postcode with RETURN anywhere in a ClassiX® module (exception: P.O. box address editing module), the system searches for a corresponding entry in the postcode register. If there are several entries for the postcode entered, you can select the correct location from a list. If, in addition, location-specific data (locales) are persistently available in the database, a location can be assigned to them directly. You can thus determine the location as well as its location-specific data via a postcode. The prerequisite for this is, of course, that a postcode register is stored in ClassiX® for each country in question. These country-specific registers can be loaded automatically or entered manually: - For Germany, you can load the postcodes and area codes from the OpenGeoDB database (e.g. at http://fa-technik.adfc.de/code/opengeodb/DE.tab). ### Instruction: How is this module called? ### Response: This module is Postcodes and area codes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Postcodes and area codes for me. ### Response: The purpose of the module Postcodes and area codes is the following: Postal codes always determine a (postal correct) name of a city. In addition to the postcodes for geographical delivery areas, there are also separate postcodes for major customers and post office box cabinets. Keeping a postcode register thus simplifies the entry of place names when entering addresses. In ClassiX® , such postcode registers can be maintained for different countries. If you confirm a postcode with RETURN anywhere in a ClassiX® module (exception: P.O. box address editing module), the system searches for a corresponding entry in the postcode register. If there are several entries for the postcode entered, you can select the correct location from a list. If, in addition, location-specific data (locales) are persistently available in the database, a location can be assigned to them directly. You can thus determine the location as well as its location-specific data via a postcode. The prerequisite for this is, of course, that a postcode register is stored in ClassiX® for each country in question. These country-specific registers can be loaded automatically or entered manually: - For Germany, you can load the postcodes and area codes from the OpenGeoDB database (e.g. at http://fa-technik.adfc.de/code/opengeodb/DE.tab).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Combined Nomenclature: In the context of trade in goods into and out of the EU, the goods supplied must be classified by commodity code. This module is used to load, compare and maintain commodity codes according to the combined nomenclature of the EU and the SOVA master file of the Federal Statistical Office in Germany. The Combined Nomenclature is the classification of goods (list of commodity numbers) issued by the EU for statistical purposes in intra-Community trade (eurostat). The Federal Statistical Office of the Federal Republic of Germany provides the nomenclature in the form of the commodity code index as a link to the Sova master file (e.g. for the year 2012 in the file SOVA2012.txt). In addition, data on eurostat are also available as a download on the pages of the European Commission(http://ec.europa.eu/eurostat/ramon). There you can find the download of the combined nomenclature (in different official languages) under the metadata on the classification server and further as a selection of the combined nomenclature of the respective current year (e.g. for 2012: Combined Nomenclature, 2012). The entry \"Structure of the classification in various formats: ANS, HTML, MDB, UDB, UTX, WXT, XML (these formats are described in the document \"formaten.pdf\")/Structure of the classification in various formats: ANS, HTML, MDB, UDB, UTX, WXT, XML (a document describing these formats is included)\", whereby with this module the loading of data is currently only supported with files in .ans/.anf format. Since the total scope of these commodity number directories far exceeds the classification required by a company in the partial master, only those commodity numbers are (should be) maintained with this module that are actually required and used.The above data of the Combined Nomenclature are published annually and must be checked against the own data. This module also serves this purpose. ### Instruction: Name this module. ### Response: This module is Combined Nomenclature."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Combined Nomenclature? ### Response: The module Combined Nomenclature serves the purpose of the following: In the context of trade in goods into and out of the EU, the goods supplied must be classified by commodity code. This module is used to load, compare and maintain commodity codes according to the combined nomenclature of the EU and the SOVA master file of the Federal Statistical Office in Germany. The Combined Nomenclature is the classification of goods (list of commodity numbers) issued by the EU for statistical purposes in intra-Community trade (eurostat). The Federal Statistical Office of the Federal Republic of Germany provides the nomenclature in the form of the commodity code index as a link to the Sova master file (e.g. for the year 2012 in the file SOVA2012.txt). In addition, data on eurostat are also available as a download on the pages of the European Commission(http://ec.europa.eu/eurostat/ramon). There you can find the download of the combined nomenclature (in different official languages) under the metadata on the classification server and further as a selection of the combined nomenclature of the respective current year (e.g. for 2012: Combined Nomenclature, 2012). The entry \"Structure of the classification in various formats: ANS, HTML, MDB, UDB, UTX, WXT, XML (these formats are described in the document \"formaten.pdf\")/Structure of the classification in various formats: ANS, HTML, MDB, UDB, UTX, WXT, XML (a document describing these formats is included)\", whereby with this module the loading of data is currently only supported with files in .ans/.anf format. Since the total scope of these commodity number directories far exceeds the classification required by a company in the partial master, only those commodity numbers are (should be) maintained with this module that are actually required and used.The above data of the Combined Nomenclature are published annually and must be checked against the own data. This module also serves this purpose.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditions table: Standard window for editing conditional tables. A conditional table is a list of entries in which - depending on mutually exclusive rules or conditions - only one entry can or is valid at a time. ### Instruction: Name this module. ### Response: The module being described is Conditions table."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Conditions table for me. ### Response: The purpose of the module Conditions table is as follows: Standard window for editing conditional tables. A conditional table is a list of entries in which - depending on mutually exclusive rules or conditions - only one entry can or is valid at a time.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Contact person: Contact persons are the employees of other companies. (The employees of your own company (the clients defined in the system) are maintained separately in the employee module ). When trying to create a contact person for a branch of the own company, this person is automatically created as an employee and not as a contact person, because a branch of the own company cannot have contact persons. Business-relevant data, such as a person 's function, department, business e-mail and telephone extensions, are maintained with this module. For the purpose of a successful CRM, it is also necessary to classify contact persons according to their importance or other criteria (e.g. \"gets Christmas card\"). This can be done by means of general classification terms or user-specific favourites (see additional data). Persons can be employees of different companies at the same time; employee information is role objects for persons. As a rule, the person object is automatically created when a new employee is created; if the person already exists, the employee information must be created by inserting a role. The listing or maintenance of employees can be done from the company master screen or one of its roles using the button This distinction becomes particularly important when a transaction document is called up from the contact person: Accordingly, the activity folder of his company or company role is inserted in addition to the activity folder of the contact person. ### Instruction: What is the name of the module being described? ### Response: This module is Contact person."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Contact person serve? ### Response: The purpose of the module Contact person is the following: Contact persons are the employees of other companies. (The employees of your own company (the clients defined in the system) are maintained separately in the employee module ). When trying to create a contact person for a branch of the own company, this person is automatically created as an employee and not as a contact person, because a branch of the own company cannot have contact persons. Business-relevant data, such as a person 's function, department, business e-mail and telephone extensions, are maintained with this module. For the purpose of a successful CRM, it is also necessary to classify contact persons according to their importance or other criteria (e.g. \"gets Christmas card\"). This can be done by means of general classification terms or user-specific favourites (see additional data). Persons can be employees of different companies at the same time; employee information is role objects for persons. As a rule, the person object is automatically created when a new employee is created; if the person already exists, the employee information must be created by inserting a role. The listing or maintenance of employees can be done from the company master screen or one of its roles using the button This distinction becomes particularly important when a transaction document is called up from the contact person: Accordingly, the activity folder of his company or company role is inserted in addition to the activity folder of the contact person.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Counter: Counters are used to maintain all number ranges (registers) used in the system. Counters are required for master data (customers, G/L accounts, parts, etc.) and documents (invoices, orders, purchase orders, etc.) in order to specify sequential numbering. The formatting of the number (e.g. whether with or without leading zeros) is also determined in the counter. Usually, the name of the meter is the same as the class name of the object to be numbered (e.g. CX_CUSTOMER for the customer number meter). The register of a counter can be delegated to the register of another counter. This is used, for example, if the number range for outgoing invoices and outgoing credit memos is to be the same. In this case, the counter for A/R credit notes (CX_CREDIT_NOTE) is delegated to the counter for A/R invoices (CX_INVOICE). A conditional table can also be used to distribute a register to several other counters, e.g. if the number range for orders is to be different depending on the order type.If you want to reset the counters for e.g. A/R invoices at the beginning of a fiscal year, you can create (copy) a separate counter for each fiscal year - controlled by the validity. In this way, for example, the counter \"CX_INVOICE\" for A/R invoices would then exist several times, each with a validity related to the fiscal year. It should be noted that the counter number should include the year of the fiscal year in order to avoid double numbers. ### Instruction: Which module is being described? ### Response: This module is named Counter."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Counter for me. ### Response: The purpose of the module Counter is the following: Counters are used to maintain all number ranges (registers) used in the system. Counters are required for master data (customers, G/L accounts, parts, etc.) and documents (invoices, orders, purchase orders, etc.) in order to specify sequential numbering. The formatting of the number (e.g. whether with or without leading zeros) is also determined in the counter. Usually, the name of the meter is the same as the class name of the object to be numbered (e.g. CX_CUSTOMER for the customer number meter). The register of a counter can be delegated to the register of another counter. This is used, for example, if the number range for outgoing invoices and outgoing credit memos is to be the same. In this case, the counter for A/R credit notes (CX_CREDIT_NOTE) is delegated to the counter for A/R invoices (CX_INVOICE). A conditional table can also be used to distribute a register to several other counters, e.g. if the number range for orders is to be different depending on the order type.If you want to reset the counters for e.g. A/R invoices at the beginning of a fiscal year, you can create (copy) a separate counter for each fiscal year - controlled by the validity. In this way, for example, the counter \"CX_INVOICE\" for A/R invoices would then exist several times, each with a validity related to the fiscal year. It should be noted that the counter number should include the year of the fiscal year in order to avoid double numbers.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Credit cards: This module is used to maintain credit cards of partner objects (companies or persons). Credit card objects belong to the class of communication objects, such as address, telephone or e-mail address.The information to be entered includes the type of credit card, card holder, card number and expiry date.Functionality Input window List window. ### Instruction: Which module is being described? ### Response: This module is called Credit cards."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Credit cards? ### Response: The module Credit cards serves the purpose of the following: This module is used to maintain credit cards of partner objects (companies or persons). Credit card objects belong to the class of communication objects, such as address, telephone or e-mail address.The information to be entered includes the type of credit card, card holder, card number and expiry date.Functionality Input window List window."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Currency table: The conversion of currencies, unlike the conversion of other units, is a special case in that the relationship (i.e. the exchange rate) between two currencies is not fixed but changes daily. The conversion must be done using a currency table that defines exchange rates between different currencies. This currency table can be present in the system - for individual days or periods of time it may be different - but it can exist several times.In order to be able to differentiate between these - time dependent - currency tables, it is advisable to give the currency tables unique names (e.g. EUROFX for the currency table of the ECB (European Central Bank) which can be updated daily). All currency tables of a certain name are kept apart as to their validity, i.e. only one currency table of a certain name should be valid in the system at any given time. In order to have up-to-date conversion rates, you can have the rates updated automatically via the Internet.Normally, the system converts a value in a foreign currency to the value of the local currency using the currently logged in currency table. In some cases, this may be undesirable, for example, for outgoing invoices, incoming invoices and the transfer of bank statements. In these cases, the currency table valid only on a certain day may be used instead of the currently registered currency table. The necessary settings for this are made in the client (see for outgoing invoices, incoming invoices and bank statements).Besides the currency tables, which are valid for the whole system after logging in, there are also tables which can only be assigned to one company (one customer). (see customer documentation and foreign currency). ### Instruction: Which module is being described? ### Response: This module is called Currency table."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Currency table. ### Response: The module Currency table serves the purpose of the following: The conversion of currencies, unlike the conversion of other units, is a special case in that the relationship (i.e. the exchange rate) between two currencies is not fixed but changes daily. The conversion must be done using a currency table that defines exchange rates between different currencies. This currency table can be present in the system - for individual days or periods of time it may be different - but it can exist several times.In order to be able to differentiate between these - time dependent - currency tables, it is advisable to give the currency tables unique names (e.g. EUROFX for the currency table of the ECB (European Central Bank) which can be updated daily). All currency tables of a certain name are kept apart as to their validity, i.e. only one currency table of a certain name should be valid in the system at any given time. In order to have up-to-date conversion rates, you can have the rates updated automatically via the Internet.Normally, the system converts a value in a foreign currency to the value of the local currency using the currently logged in currency table. In some cases, this may be undesirable, for example, for outgoing invoices, incoming invoices and the transfer of bank statements. In these cases, the currency table valid only on a certain day may be used instead of the currently registered currency table. The necessary settings for this are made in the client (see for outgoing invoices, incoming invoices and bank statements).Besides the currency tables, which are valid for the whole system after logging in, there are also tables which can only be assigned to one company (one customer). (see customer documentation and foreign currency).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cloud account (client): This app is used to maintain the cloud user accounts of clients. A client is defined as the sub-client of a client and is used, for example, by cloud operators. The operator of a cloud itself is a client, its customers who use this cloud are then the clients or the sub-clients of this client.Clients or sub-clients manage the software offers (SaaS) of the cloud operator (client) used by them and their own administrators of these used SaaS solutions in their respective user accounts.This app is thus specifically designed for the maintenance of cloud user accounts from the perspective of the clients (sub-clients). ### Instruction: What is the name of the module being described? ### Response: This module is Cloud account (client)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Cloud account (client). ### Response: The module Cloud account (client) is used for the following: This app is used to maintain the cloud user accounts of clients. A client is defined as the sub-client of a client and is used, for example, by cloud operators. The operator of a cloud itself is a client, its customers who use this cloud are then the clients or the sub-clients of this client.Clients or sub-clients manage the software offers (SaaS) of the cloud operator (client) used by them and their own administrators of these used SaaS solutions in their respective user accounts.This app is thus specifically designed for the maintenance of cloud user accounts from the perspective of the clients (sub-clients).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Data connector (AppsWarehouse modules): Data connectors form the link between the database and reports. The data connectors define possible data fields, which can also contain complex logic, and commands for loading all objects of a data connector. Reports, in turn, are based on these and use only a subset of the fields of the data connector and can filter the data. In special cases a report can also define new data fields or overwrite the commands for loading the data. While reports are intended for the end user and are used, for example, for individual lists, the data connectors are of a technical nature and not intended for direct use by end users. Data connectors can either be defined manually or created automatically from the data in a database using the Web Crawler object. The latter has the advantage that the data connectors then represent exactly the data in the database. The Web Crawler object and its logic are described on a separate page. There is a distinction between main data connectors and auxiliary data connectors. Main data connectors are created by the Web Crawler object only for main objects. Main objects are mainly objects of a REP. This logic is further refined by a blacklist and a whitelist. For more information, please see the page of the object Web Crawler. Auxiliary data connectors are created for all objects that are found but are not main objects. These do not appear in the lists of data connectors, they are only used for navigation in the apps that display data connectors and their links. ### Instruction: Tell me the name of this module. ### Response: The module being described is Data connector (AppsWarehouse modules)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Data connector (AppsWarehouse modules) serve? ### Response: The module Data connector (AppsWarehouse modules) serves the purpose of the following: Data connectors form the link between the database and reports. The data connectors define possible data fields, which can also contain complex logic, and commands for loading all objects of a data connector. Reports, in turn, are based on these and use only a subset of the fields of the data connector and can filter the data. In special cases a report can also define new data fields or overwrite the commands for loading the data. While reports are intended for the end user and are used, for example, for individual lists, the data connectors are of a technical nature and not intended for direct use by end users. Data connectors can either be defined manually or created automatically from the data in a database using the Web Crawler object. The latter has the advantage that the data connectors then represent exactly the data in the database. The Web Crawler object and its logic are described on a separate page. There is a distinction between main data connectors and auxiliary data connectors. Main data connectors are created by the Web Crawler object only for main objects. Main objects are mainly objects of a REP. This logic is further refined by a blacklist and a whitelist. For more information, please see the page of the object Web Crawler. Auxiliary data connectors are created for all objects that are found but are not main objects. These do not appear in the lists of data connectors, they are only used for navigation in the apps that display data connectors and their links.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Data field: Data fields belong to the data connectors. While data connectors describe classes, data fields describe the attributes and methods of these classes. ### Instruction: Name this module. ### Response: This module is Data field."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Data field. ### Response: The purpose of the module Data field is as follows: Data fields belong to the data connectors. While data connectors describe classes, data fields describe the attributes and methods of these classes.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Document: A document is used to output receipts. It consists of document modules and has other characteristics such as margin settings, document type, name and document number. ### Instruction: What is the name of the module being described? ### Response: This module is called Document."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Document serve? ### Response: The module Document serves the purpose of the following: A document is used to output receipts. It consists of document modules and has other characteristics such as margin settings, document type, name and document number.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Document module: OLE objects in the document moduleExport / ImportA comprehensive document management system is also available in all ClassiX® applications. In it, you can not only create all your correspondence and all documents, but also design them flexibly and according to your needs. In addition, all documents are automatically managed on a transaction basis. ClassiX® thus implements an electronic document management in which you can find individual documents at any time directly via your business transactions or document history.The document modules are the enveloping objects for the OLE objects. They have a multilingual name, a number, the type, the OLE text and sub-modules.If a document module has submodules, these are taken into account when printing. The system behaves as if the module itself were a document, i.e. all submodules are printed in the same sequence as in the document (see Sequence when printing document modules). ### Instruction: What is the name of this module? ### Response: This module is named Document module."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Document module used for? ### Response: The module Document module is used for the following: OLE objects in the document moduleExport / ImportA comprehensive document management system is also available in all ClassiX® applications. In it, you can not only create all your correspondence and all documents, but also design them flexibly and according to your needs. In addition, all documents are automatically managed on a transaction basis. ClassiX® thus implements an electronic document management in which you can find individual documents at any time directly via your business transactions or document history.The document modules are the enveloping objects for the OLE objects. They have a multilingual name, a number, the type, the OLE text and sub-modules.If a document module has submodules, these are taken into account when printing. The system behaves as if the module itself were a document, i.e. all submodules are printed in the same sequence as in the document (see Sequence when printing document modules).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Document master: Terms/Definitions File Location Printing documentsThe document master in ClassiX® offers the possibility to manage digital documents. An EDM system (Electronic Document Management), respectively a DMS(Document Management System) is already integrated in ClassiX®.The advantage of the integrated solution is the direct association of documents to receipts or master data. The drawings of an article can thus be maintained directly via the parts mask and the documents belonging to an order can be directly linked to the ClassiX order.The associations of the transaction data with the documents can be maintained via a separate editing mask, which can be called up via the document history module, for example. In the master data there is a tab \"Documents\" for this purpose, as for example in the parts mask. If this tab is not available on the processing mask, documents can be linked via the transaction folder or directly via the processing mask of the document entry.Both the master data and the transaction data can either refer directly to the documents or via a conditional table. A conditional table is useful, for example, if the documents of a variant part are managed and different versions should lead to different documents. ### Instruction: What is the name of the module being described? ### Response: The module being described is Document master."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Document master used for? ### Response: The purpose of the module Document master is as follows: Terms/Definitions File Location Printing documentsThe document master in ClassiX® offers the possibility to manage digital documents. An EDM system (Electronic Document Management), respectively a DMS(Document Management System) is already integrated in ClassiX®.The advantage of the integrated solution is the direct association of documents to receipts or master data. The drawings of an article can thus be maintained directly via the parts mask and the documents belonging to an order can be directly linked to the ClassiX order.The associations of the transaction data with the documents can be maintained via a separate editing mask, which can be called up via the document history module, for example. In the master data there is a tab \"Documents\" for this purpose, as for example in the parts mask. If this tab is not available on the processing mask, documents can be linked via the transaction folder or directly via the processing mask of the document entry.Both the master data and the transaction data can either refer directly to the documents or via a conditional table. A conditional table is useful, for example, if the documents of a variant part are managed and different versions should lead to different documents.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Real estate: ... ### Instruction: What is the name of this module? ### Response: This module is named Real estate."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Real estate. ### Response: The module Real estate can be described as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Forklift: ... ### Instruction: Which module is being described? ### Response: This module is called Forklift."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Forklift used for? ### Response: The module Forklift serves the purpose of the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Chart of Accounts: This module is used for the administration of G/L accounts in financial accounting and their listing as G/L chart of accounts. Specialised G/L accounts such as reconciliation accounts (own module), cash accounts (own module), tax accounts and cash discount accounts are also created from this module. In addition to general information on a G/L account, any other descriptive characteristics (attributes) can be added to it and a G/L account can be assigned to different charts of accounts (e.g. as P&L, balance sheet), which must be stored as classification terms beforehand. ### Instruction: How is this module called? ### Response: This module is Chart of Accounts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Chart of Accounts? ### Response: The module Chart of Accounts can be described as follows: This module is used for the administration of G/L accounts in financial accounting and their listing as G/L chart of accounts. Specialised G/L accounts such as reconciliation accounts (own module), cash accounts (own module), tax accounts and cash discount accounts are also created from this module. In addition to general information on a G/L account, any other descriptive characteristics (attributes) can be added to it and a G/L account can be assigned to different charts of accounts (e.g. as P&L, balance sheet), which must be stored as classification terms beforehand.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Industrial plants: This module is used to maintain industrial plants. These can be self-produced or externally produced plants. Equipment, instruments or even complex industrial plants are considered to be plants. A distinction is made between machines that are used in the company's own production process. Projects (cost objects) are (can be) assigned to facilities when they are created. Since most documents are assigned directly or indirectly to a cost object, the reference to an industrial plant is also always given. For example, an industrial plant can be indirectly linked to quotations and or orders via the project assignment (quotation or order header) or indirectly linked to plant group items in quotations and orders via its plant groups and components. One thus obtains an important information tool for service (listing of the service operations of Customer Support) and a reference work for sales and quality assurance. ### Instruction: What is the name of this module? ### Response: This module is Industrial plants."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Industrial plants serve? ### Response: The module Industrial plants can be described as follows: This module is used to maintain industrial plants. These can be self-produced or externally produced plants. Equipment, instruments or even complex industrial plants are considered to be plants. A distinction is made between machines that are used in the company's own production process. Projects (cost objects) are (can be) assigned to facilities when they are created. Since most documents are assigned directly or indirectly to a cost object, the reference to an industrial plant is also always given. For example, an industrial plant can be indirectly linked to quotations and or orders via the project assignment (quotation or order header) or indirectly linked to plant group items in quotations and orders via its plant groups and components. One thus obtains an important information tool for service (listing of the service operations of Customer Support) and a reference work for sales and quality assurance.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Proof of assembly: Installation certificates or passes are the documents that field service technicians fill out to identify their activities. In most cases, the hours worked are reported and any material used can also be reported. The hours worked (and additional arrival, departure or waiting times, as well as surcharges and discounts) are specified more precisely by means of service articles, the material can be specified in the form of sales articles or spare parts (cost-type accounting). An installation certificate is always assigned to the employee who performs the work and can therefore also serve as the basis for an expense report. Through assignment to an order or an order item, the costs incurred are accumulated in the order and project within the scope of the final costing (cost unit accounting). For the purposes of cost centre accounting, the cost centre(s) to be debited can be specified directly; by default, the employee's cost centre is always used first. For a percentage distribution of the costs to different cost centres, the cost distribution on the \"Evaluation\" tab can be used. After registering the apportioned cost centre costs, this assembly record appears in the assembly cost allocation book. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Proof of assembly."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Proof of assembly serve? ### Response: The module Proof of assembly can be described as follows: Installation certificates or passes are the documents that field service technicians fill out to identify their activities. In most cases, the hours worked are reported and any material used can also be reported. The hours worked (and additional arrival, departure or waiting times, as well as surcharges and discounts) are specified more precisely by means of service articles, the material can be specified in the form of sales articles or spare parts (cost-type accounting). An installation certificate is always assigned to the employee who performs the work and can therefore also serve as the basis for an expense report. Through assignment to an order or an order item, the costs incurred are accumulated in the order and project within the scope of the final costing (cost unit accounting). For the purposes of cost centre accounting, the cost centre(s) to be debited can be specified directly; by default, the employee's cost centre is always used first. For a percentage distribution of the costs to different cost centres, the cost distribution on the \"Evaluation\" tab can be used. After registering the apportioned cost centre costs, this assembly record appears in the assembly cost allocation book.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Interim Storage: This module is used to record intermediate storage. Intermediate storage is necessary if a commodity ordered from a supplier is to be sent by direct delivery to a packaging company and from there to the customer. In this example, instead of the direct delivery document on the purchase order, an intermediate storage document is created on which the packer's warehouse is then specified. As a result, the goods are temporarily in the packer's external warehouse (interim storage document acts like a goods receipt). Since it must still be possible to allocate the value of the goods to the company's assets until delivery to the customer, this warehouse stock is also listed in the warehouse statistics. Likewise, in the warehouse account of the part, the warehouse stocks at the possibly different packer companies where the goods are temporarily stored can be viewed. The goods that are temporarily stored via an intermediate storage document are not freely available because they were ordered directly for an order item. For this reason, the goods are also directly marked as reserved in the warehouse account (quantity on hold). So that it is still possible to recognise which requirement reserves this reserved quantity, the interim storage document is displayed in the MRP account via a normal delivery note until its complete delivery. Attention! If the intermediate storage is not available, the intermediate storage document is also NOT registered in the MRP account! Only the total stock of the storage part is counted up (total.quantity), but not the available stock (current.quantity). This also does not increase the quantity put back! However, the stock movements can be seen in the stock statistics. It is advisable to mark the supplier's warehouses as \"not available for planning\" so that it is not assumed that there is a stock in the company which does not exist. In conjunction with an intermediate storage document, the delivery note acts like a goods withdrawal document. It is also listed in the warehouse statistics. The valuation of these goods is, in contrast to the normal warehouse valuation, not based on the average price, but directly on the standard price of the order part. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Interim Storage."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Interim Storage serve? ### Response: The module Interim Storage can be described as follows: This module is used to record intermediate storage. Intermediate storage is necessary if a commodity ordered from a supplier is to be sent by direct delivery to a packaging company and from there to the customer. In this example, instead of the direct delivery document on the purchase order, an intermediate storage document is created on which the packer's warehouse is then specified. As a result, the goods are temporarily in the packer's external warehouse (interim storage document acts like a goods receipt). Since it must still be possible to allocate the value of the goods to the company's assets until delivery to the customer, this warehouse stock is also listed in the warehouse statistics. Likewise, in the warehouse account of the part, the warehouse stocks at the possibly different packer companies where the goods are temporarily stored can be viewed. The goods that are temporarily stored via an intermediate storage document are not freely available because they were ordered directly for an order item. For this reason, the goods are also directly marked as reserved in the warehouse account (quantity on hold). So that it is still possible to recognise which requirement reserves this reserved quantity, the interim storage document is displayed in the MRP account via a normal delivery note until its complete delivery. Attention! If the intermediate storage is not available, the intermediate storage document is also NOT registered in the MRP account! Only the total stock of the storage part is counted up (total.quantity), but not the available stock (current.quantity). This also does not increase the quantity put back! However, the stock movements can be seen in the stock statistics. It is advisable to mark the supplier's warehouses as \"not available for planning\" so that it is not assumed that there is a stock in the company which does not exist. In conjunction with an intermediate storage document, the delivery note acts like a goods withdrawal document. It is also listed in the warehouse statistics. The valuation of these goods is, in contrast to the normal warehouse valuation, not based on the average price, but directly on the standard price of the order part.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of IP address: This module is used to maintain IP addresses. IP addresses can be assigned to network objects (e.g. computers) or also restrict incoming and outgoing access (e.g. API keys). In addition, the validity period of the IP address can be defined. ### Instruction: Tell me the name of this module. ### Response: This module is called IP address."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module IP address used for? ### Response: The module IP address serves the purpose of the following: This module is used to maintain IP addresses. IP addresses can be assigned to network objects (e.g. computers) or also restrict incoming and outgoing access (e.g. API keys). In addition, the validity period of the IP address can be defined.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts preliminary calculation: Capture of characteristics (optional) Recording cost rates (optional) Select part(s) Calculate Error log Edit Resolved Resources (optional) Transferring the calculation values into the master data Possibly new calculation with changed settings This module is used for the pre-calculation of parts from the parts master. The main screen - from which the preliminary costing is carried out - has three windows/cards: the card with the list of parts to be calculated (parts), a card with attributes (attributes) and a card with cost rates (cost rates). The general procedure of a parts pre-calculation is the following: 0a. Capture physical characteristics (optional) Since a preliminary cost estimate can also be made using variant parts, you can store characteristic values in the Characteristics window in advance: this prevents the interactive query of characteristics during the explosion of the BOMs and routings. This is one way of storing characteristic values. Another is that each preliminary cost estimate can have its own characteristic values, which is described below. Characteristic features can be transferred from the master data (part + production role) by clicking on the \"Transfer\" button above the list of characteristic features. 0b. Recording cost rates (optional) The cost rates in the form of overhead rates for materials, wages, sales and administration are copied by default from the corresponding deposits with the client into the Cost Rates window. These values can be overwritten here. Here, too, each preliminary calculation saves the cost rates for itself and these can be overwritten there. This is also explained in more detail below. 1. select part(s) Here you have the choice between a simple selection by number/text, etc. or via further more complex search criteria, such as warehouse, logistics indicator, etc.\". Only parts that have a production role can be selected for a preliminary costing: the parts list and the routing of a part are defined in the production role. A new preliminary cost estimate is automatically created for each newly selected part. This preliminary cost estimate is given its own number and is stored with the production role of the part. Any existing characteristics from the Characteristics window and the cost rates from the Cost Rates window are also copied into the preliminary cost estimate. In addition, you can insert or change characteristics manually, for example, if none have been specified in the main window or if they are insufficient. Just as in the main window, there are two ways of inserting here: A lot size is also copied into the preliminary calculation: This depends on the \"Lot size\" option, according to which the lot size is copied from the production roll or from a manual specification. It is also possible to draw results of the sales item turnover statistics into the parts pre-calculation list. In the sales article sales statistics, it is possible, for example, to display all spare parts with a positive sales volume in the current statistics period and to start the preliminary calculation for these parts only. 2. calculate The (or all) parts selected in the list can then be pre-calculated. You can choose between a calculation according to standard values (only the characteristics and cost rates from the pre-calculation windows are taken into account) or an individual calculation: the values from the saved pre-calculation are taken. If neither the values in the preliminary costing nor the values in the windows have been changed after selecting a part, both procedures are of course identical. During costing, the parts list(s) and routings are exploded according to the specifications under Option/Stage. The respective status of an explosion is displayed in the status line of the precalculation window. At the end of a cost estimate, the new values for material and labour (per lot size) and thus the manufacturing costs (per 1 unit) are displayed. 3. error log Possible errors in the explosion of the bills of material and routings, as well as missing valuations, lead to an incorrect preliminary costing. An error log can therefore optionally be output on the screen or written to a file. The following error causes are checked: If a preliminary cost estimate has one or more errors, this data cannot be transferred to the production role of the part as new production costs. 4. edit resolved resources (optional) The resulting bill of material and the exploded routing can be viewed. On the one hand as a structure tree, on the other hand in a tabular form with exact display of the costs and overhead rates. 5. transfer the costing values to the master data. The new(error-free) preliminary costing values are transferred with date to the production role of the part. 6. possibly new costing with changed settings. So that you do not have to fill in a complete preliminary part costing again, for example, inserting material characteristics again and defining them accordingly, possibly even inserting the cost rates or documents, you can copy an already existing preliminary part costing from the list window. This can be done either via the main menu of the list window or via the context menu in the list. The description, lot size, characteristics including features, cost rates and documents (no conditional ones) are copied. ### Instruction: Which module is being described? ### Response: This module is named Parts preliminary calculation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Parts preliminary calculation. ### Response: The purpose of the module Parts preliminary calculation is as follows: Capture of characteristics (optional) Recording cost rates (optional) Select part(s) Calculate Error log Edit Resolved Resources (optional) Transferring the calculation values into the master data Possibly new calculation with changed settings This module is used for the pre-calculation of parts from the parts master. The main screen - from which the preliminary costing is carried out - has three windows/cards: the card with the list of parts to be calculated (parts), a card with attributes (attributes) and a card with cost rates (cost rates). The general procedure of a parts pre-calculation is the following: 0a. Capture physical characteristics (optional) Since a preliminary cost estimate can also be made using variant parts, you can store characteristic values in the Characteristics window in advance: this prevents the interactive query of characteristics during the explosion of the BOMs and routings. This is one way of storing characteristic values. Another is that each preliminary cost estimate can have its own characteristic values, which is described below. Characteristic features can be transferred from the master data (part + production role) by clicking on the \"Transfer\" button above the list of characteristic features. 0b. Recording cost rates (optional) The cost rates in the form of overhead rates for materials, wages, sales and administration are copied by default from the corresponding deposits with the client into the Cost Rates window. These values can be overwritten here. Here, too, each preliminary calculation saves the cost rates for itself and these can be overwritten there. This is also explained in more detail below. 1. select part(s) Here you have the choice between a simple selection by number/text, etc. or via further more complex search criteria, such as warehouse, logistics indicator, etc.\". Only parts that have a production role can be selected for a preliminary costing: the parts list and the routing of a part are defined in the production role. A new preliminary cost estimate is automatically created for each newly selected part. This preliminary cost estimate is given its own number and is stored with the production role of the part. Any existing characteristics from the Characteristics window and the cost rates from the Cost Rates window are also copied into the preliminary cost estimate. In addition, you can insert or change characteristics manually, for example, if none have been specified in the main window or if they are insufficient. Just as in the main window, there are two ways of inserting here: A lot size is also copied into the preliminary calculation: This depends on the \"Lot size\" option, according to which the lot size is copied from the production roll or from a manual specification. It is also possible to draw results of the sales item turnover statistics into the parts pre-calculation list. In the sales article sales statistics, it is possible, for example, to display all spare parts with a positive sales volume in the current statistics period and to start the preliminary calculation for these parts only. 2. calculate The (or all) parts selected in the list can then be pre-calculated. You can choose between a calculation according to standard values (only the characteristics and cost rates from the pre-calculation windows are taken into account) or an individual calculation: the values from the saved pre-calculation are taken. If neither the values in the preliminary costing nor the values in the windows have been changed after selecting a part, both procedures are of course identical. During costing, the parts list(s) and routings are exploded according to the specifications under Option/Stage. The respective status of an explosion is displayed in the status line of the precalculation window. At the end of a cost estimate, the new values for material and labour (per lot size) and thus the manufacturing costs (per 1 unit) are displayed. 3. error log Possible errors in the explosion of the bills of material and routings, as well as missing valuations, lead to an incorrect preliminary costing. An error log can therefore optionally be output on the screen or written to a file. The following error causes are checked: If a preliminary cost estimate has one or more errors, this data cannot be transferred to the production role of the part as new production costs. 4. edit resolved resources (optional) The resulting bill of material and the exploded routing can be viewed. On the one hand as a structure tree, on the other hand in a tabular form with exact display of the costs and overhead rates. 5. transfer the costing values to the master data. The new(error-free) preliminary costing values are transferred with date to the production role of the part. 6. possibly new costing with changed settings. So that you do not have to fill in a complete preliminary part costing again, for example, inserting material characteristics again and defining them accordingly, possibly even inserting the cost rates or documents, you can copy an already existing preliminary part costing from the list window. This can be done either via the main menu of the list window or via the context menu in the list. The description, lot size, characteristics including features, cost rates and documents (no conditional ones) are copied.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts requirement (Gozintograph): Starting from parts scheduling, the production-specific parts lists selected there - sorted according to production stages - are summarised in so-called gozintographs. The parts request module(business pattern) described here is used to maintain such - automatically created - gozintographs.The task of this module is to be able to carry out a purely logistical material planning in a first step. This is done in six steps:Determination of the disposition type of the partsDetermination of the standard replenishment lead time according to the disposition typeScheduling of the necessary provision of parts Checking the availability of materials Triggering of production orders, purchase requisitions and stock reservations Release of the parts requirementLink with ex ante needs Quantity changeDelete direct successor documents Steps 1, 2 and 3 can be called up and carried out directly and automatically as one process from parts planning. The \"standard information\" on the procurement type and time from the master information of the parts master is used as the basis. Steps 3 and 4 (planning) may have to be carried out iteratively several times after manually changing the disposition type and/or procurement time of individual parts so that the planned dates can be met. This planning can also be carried out graphically supported by means of a Gantt chart. ### Instruction: What is the name of the module being described? ### Response: This module is called Parts requirement (Gozintograph)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Parts requirement (Gozintograph) for me. ### Response: The module Parts requirement (Gozintograph) serves the purpose of the following: Starting from parts scheduling, the production-specific parts lists selected there - sorted according to production stages - are summarised in so-called gozintographs. The parts request module(business pattern) described here is used to maintain such - automatically created - gozintographs.The task of this module is to be able to carry out a purely logistical material planning in a first step. This is done in six steps:Determination of the disposition type of the partsDetermination of the standard replenishment lead time according to the disposition typeScheduling of the necessary provision of parts Checking the availability of materials Triggering of production orders, purchase requisitions and stock reservations Release of the parts requirementLink with ex ante needs Quantity changeDelete direct successor documents Steps 1, 2 and 3 can be called up and carried out directly and automatically as one process from parts planning. The \"standard information\" on the procurement type and time from the master information of the parts master is used as the basis. Steps 3 and 4 (planning) may have to be carried out iteratively several times after manually changing the disposition type and/or procurement time of individual parts so that the planned dates can be met. This planning can also be carried out graphically supported by means of a Gantt chart.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Module Presets: In the modules in which options for their processing are available - especially in the case of list modules - a user can secure (even several) different combinations of options. ### Instruction: What is the name of this module? ### Response: The name of this module is Module Presets."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Module Presets. ### Response: The module Module Presets can be described as follows: In the modules in which options for their processing are available - especially in the case of list modules - a user can secure (even several) different combinations of options.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Neural network parameters: This app is used to set the parameters of a neural network. Some parameters can/must be set directly when creating a new neural network, others can be adjusted during training. Therefore, the editing window is divided into a \"Setup Parameters\" window and a \"Training Parameters\" window.However, the first fixed setting is always a distinction between a \"Regression\" or a \"Classifying\" neural network, so this setting must be made first. Once created, this specification and the \"Setup Parameters\" can no longer be changed. ### Instruction: What is the name of this module? ### Response: This module is called Neural network parameters."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Neural network parameters used for? ### Response: The module Neural network parameters is used for the following: This app is used to set the parameters of a neural network. Some parameters can/must be set directly when creating a new neural network, others can be adjusted during training. Therefore, the editing window is divided into a \"Setup Parameters\" window and a \"Training Parameters\" window.However, the first fixed setting is always a distinction between a \"Regression\" or a \"Classifying\" neural network, so this setting must be made first. Once created, this specification and the \"Setup Parameters\" can no longer be changed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Specifications: Specifications are automatically generated by the system if variant parts for which there is no distinct sub-part are to be booked into the warehouse as surplus or remaining quantity. The specifications save the characteristics of the variant part and the standard costs for the specification. This enables the automatic use of these quantities in parts planning and the warehouse value calculation in inventory and warehouse statistics. ### Instruction: Tell me the name of this module. ### Response: This module is called Specifications."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Specifications. ### Response: The purpose of the module Specifications is the following: Specifications are automatically generated by the system if variant parts for which there is no distinct sub-part are to be booked into the warehouse as surplus or remaining quantity. The specifications save the characteristics of the variant part and the standard costs for the specification. This enables the automatic use of these quantities in parts planning and the warehouse value calculation in inventory and warehouse statistics.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Vocabulary: This module serves to maintain any multilingual vocabulary and is part of the multilingual dictionary in ClassiX®. It can record words or whole sentences (e.g. idioms) - so-called phrases - in any language. At the same time, the corresponding translations into other languages can be maintained. Since a word of a language can have several meanings at the same time, each word is directly assigned to one or more meanings, which - each meaning on its own - are or can be assigned to other words of other languages. Additional information about a word - such as part of speech (noun, verb, adjective, etc.), numerus (singular, plural, plural noun, etc.), case, genus, etc. allow a word to be output with all its properties by means of the grammar rules for the individual languages stored in the module: for nouns, for example, with the definite article, the singular and plural form, as well as its declension. The number and type of languages is set in the system settings; by default, the languages German, English, French, Spanish, Portuguese, Italian, Dutch, Swedish, Danish and Russian are stored in the dictionary. A built-in repetitor helps to learn words of any language. The representation of characters on Windows platforms - with a German language environment - is carried out using code page 1252. It allows words of almost all Western European languages to be recorded. In addition, the character set language in ClassiX can be changed to display characters from other languages, such as Cyrillic, Arabic, etc. (MSFonts).(MSFonts). ### Instruction: Name this module. ### Response: The module being described is Vocabulary."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Vocabulary for me. ### Response: The module Vocabulary can be described as follows: This module serves to maintain any multilingual vocabulary and is part of the multilingual dictionary in ClassiX®. It can record words or whole sentences (e.g. idioms) - so-called phrases - in any language. At the same time, the corresponding translations into other languages can be maintained. Since a word of a language can have several meanings at the same time, each word is directly assigned to one or more meanings, which - each meaning on its own - are or can be assigned to other words of other languages. Additional information about a word - such as part of speech (noun, verb, adjective, etc.), numerus (singular, plural, plural noun, etc.), case, genus, etc. allow a word to be output with all its properties by means of the grammar rules for the individual languages stored in the module: for nouns, for example, with the definite article, the singular and plural form, as well as its declension. The number and type of languages is set in the system settings; by default, the languages German, English, French, Spanish, Portuguese, Italian, Dutch, Swedish, Danish and Russian are stored in the dictionary. A built-in repetitor helps to learn words of any language. The representation of characters on Windows platforms - with a German language environment - is carried out using code page 1252. It allows words of almost all Western European languages to be recorded. In addition, the character set language in ClassiX can be changed to display characters from other languages, such as Cyrillic, Arabic, etc. (MSFonts).(MSFonts)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Picklist: ... ### Instruction: What is the name of this module? ### Response: This module is named Picklist."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Picklist used for? ### Response: The module Picklist is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Events: This module is used for the overview and processing of all transactions for a business object. For example, a business object can be a partner, a user or a part. The window title shows who the displayed transactions originate from. If the transactions are listed from a contact person, the window title shows not only the associated company, but also whether and from which company role the contact person was called. When creating transaction documents, this information controls whether the transaction folder of the company or the company role is placed in the transaction document in addition to the transaction folder of the contact person. Transactions primarily include transactions that are automatically posted to the transaction folder of the corresponding business object. This is done according to the transaction description of the individual document types, such as invoices, orders, etc.. Subfolders (period, status, etc.) are also automatically created in which the documents are filed. In this way, a structure is created, as can be seen on the right-hand side, for example. (The number in brackets indicates how many receipts are in the corresponding folder.){img type=\"fileId\" fileId=\"526\" thumb=\"box\" width=\"100%\"}Furthermore, there are so-called transaction documents that are manually posted in transaction folders. These include letters, faxes and e-mails, but also simple notes or visit logs. To categorise these documents in transaction fold ers, a folder structure can also be created manually.The transaction folder is for master data what the document history is for documents. Thus, in addition to the transactions, documents and cost objects can also be displayed and partially maintained here. ### Instruction: Which module is being described? ### Response: This module is named Events."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Events for me. ### Response: The module Events is used for the following: This module is used for the overview and processing of all transactions for a business object. For example, a business object can be a partner, a user or a part. The window title shows who the displayed transactions originate from. If the transactions are listed from a contact person, the window title shows not only the associated company, but also whether and from which company role the contact person was called. When creating transaction documents, this information controls whether the transaction folder of the company or the company role is placed in the transaction document in addition to the transaction folder of the contact person. Transactions primarily include transactions that are automatically posted to the transaction folder of the corresponding business object. This is done according to the transaction description of the individual document types, such as invoices, orders, etc.. Subfolders (period, status, etc.) are also automatically created in which the documents are filed. In this way, a structure is created, as can be seen on the right-hand side, for example. (The number in brackets indicates how many receipts are in the corresponding folder.){img type=\"fileId\" fileId=\"526\" thumb=\"box\" width=\"100%\"}Furthermore, there are so-called transaction documents that are manually posted in transaction folders. These include letters, faxes and e-mails, but also simple notes or visit logs. To categorise these documents in transaction fold ers, a folder structure can also be created manually.The transaction folder is for master data what the document history is for documents. Thus, in addition to the transactions, documents and cost objects can also be displayed and partially maintained here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Production data acquisition: This module enables different ways of recording production data. The respective detailed description can be found under the description of the different windows (functionality). ### Instruction: Name this module. ### Response: This module is named Production data acquisition."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Production data acquisition serve? ### Response: The module Production data acquisition is used for the following: This module enables different ways of recording production data. The respective detailed description can be found under the description of the different windows (functionality).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Return receipt: Return documents can be created to return goods to suppliers. However, they are only used after the goods receipt PO has created a goods receipt document. Return documents are not created if the goods are rejected at goods receipt.In order to be able to carry out a supplier evaluation, several defect reasons can be given per item of a return document why the goods are returned in quantity(QS defects).In addition, it can be indicated on the return item how and whether a new delivery is to be made at all(instruction): Return for rework Return for new production Cancellation When a return document is created, the quantity is determined as follows: The delivery note quantity on the return item is the quantity originally stored on the goods receipt. This quantity cannot be changed here. The recorded return quantity also reduces the open QA quantity of the goods receipt if the part has been marked as a QA part.QS part: Open QA quantity can be returned and is entered as a default quantity in the return document when it is created. When saving, however, you also have the option of returning the entire quantity already released by QA that has neither been provided, returned or put into storage.Non-QS part: The goods receipt quantity is reduced by the quantity already provided, the quantity put away and any quantity already sent back. The quantity left over here is transferred to the return document as a proposal. The suggested quantity can no longer be increased for non-QA parts.Goods receipts can only be sent back by return document if this goods receipt has not yet been completely prepared. It is therefore the responsibility of the goods receipt department to create these return documents. ### Instruction: Name this module. ### Response: The name of this module is Return receipt."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Return receipt? ### Response: The purpose of the module Return receipt is as follows: Return documents can be created to return goods to suppliers. However, they are only used after the goods receipt PO has created a goods receipt document. Return documents are not created if the goods are rejected at goods receipt.In order to be able to carry out a supplier evaluation, several defect reasons can be given per item of a return document why the goods are returned in quantity(QS defects).In addition, it can be indicated on the return item how and whether a new delivery is to be made at all(instruction): Return for rework Return for new production Cancellation When a return document is created, the quantity is determined as follows: The delivery note quantity on the return item is the quantity originally stored on the goods receipt. This quantity cannot be changed here. The recorded return quantity also reduces the open QA quantity of the goods receipt if the part has been marked as a QA part.QS part: Open QA quantity can be returned and is entered as a default quantity in the return document when it is created. When saving, however, you also have the option of returning the entire quantity already released by QA that has neither been provided, returned or put into storage.Non-QS part: The goods receipt quantity is reduced by the quantity already provided, the quantity put away and any quantity already sent back. The quantity left over here is transferred to the return document as a proposal. The suggested quantity can no longer be increased for non-QA parts.Goods receipts can only be sent back by return document if this goods receipt has not yet been completely prepared. It is therefore the responsibility of the goods receipt department to create these return documents.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Reports (module): In the ClassiX system all lists displayed on the screen can be transferred to other programs - such as Excel - via the clipboard. Consequently, reports can and are created from these lists. A report is - according to the ClassiX terminology - a list prepared with a design tool, the lists always represent the data basis for reports.It is therefore best to create a new report from the reporting window that has already been called up with the data of a list. Only in this case, i.e. if data (from a list) is already available, can you open the Designer report. If you do not have a current list window with data, however, you can also build on an already existing XML file.Alternatively, you may have opened the Report window because you want to edit an existing report. You can then, for example, change the name and/or the description or edit the layout of the report with the report design tool.Another way to create reports is to use the Data Query Wizard. ### Instruction: What is the name of the module being described? ### Response: This module is named Reports (module)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Reports (module) serve? ### Response: The purpose of the module Reports (module) is as follows: In the ClassiX system all lists displayed on the screen can be transferred to other programs - such as Excel - via the clipboard. Consequently, reports can and are created from these lists. A report is - according to the ClassiX terminology - a list prepared with a design tool, the lists always represent the data basis for reports.It is therefore best to create a new report from the reporting window that has already been called up with the data of a list. Only in this case, i.e. if data (from a list) is already available, can you open the Designer report. If you do not have a current list window with data, however, you can also build on an already existing XML file.Alternatively, you may have opened the Report window because you want to edit an existing report. You can then, for example, change the name and/or the description or edit the layout of the report with the report design tool.Another way to create reports is to use the Data Query Wizard.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Product configurator: The variety of variants desired from the sales point of view leads to complexity in the article master. To master this complexity, ClassiX® provides the user with various modules. One of them is the product configurator.The aim of a product configuration is to create a sales bill of materials using articles and sets. This can be done as with a modular system, in which individual components from the article master are assembled manually. However, it can also be done semi-automatically by using variant parts or sets with variant items. By querying variables (characteristics), the correct positions are automatically suggested. Another possibility is the import of a product configuration via AutoCAD or MS Excel, for example.The sales bill of material as a result of the product configuration is automatically valuated with costs and sales prices. In addition, it can be transferred to a quotation or order. ### Instruction: Tell me the name of this module. ### Response: This module is named Product configurator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Product configurator. ### Response: The module Product configurator can be described as follows: The variety of variants desired from the sales point of view leads to complexity in the article master. To master this complexity, ClassiX® provides the user with various modules. One of them is the product configurator.The aim of a product configuration is to create a sales bill of materials using articles and sets. This can be done as with a modular system, in which individual components from the article master are assembled manually. However, it can also be done semi-automatically by using variant parts or sets with variant items. By querying variables (characteristics), the correct positions are automatically suggested. Another possibility is the import of a product configuration via AutoCAD or MS Excel, for example.The sales bill of material as a result of the product configuration is automatically valuated with costs and sales prices. In addition, it can be transferred to a quotation or order.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of SAP Business One Warehouse: ... SAP® and SAP Business One® are trademarks or registered trademarks of SAP SE in Germany and other countries. ### Instruction: What is the name of this module? ### Response: The module being described is SAP Business One Warehouse."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module SAP Business One Warehouse? ### Response: The module SAP Business One Warehouse serves the purpose of the following: ... SAP® and SAP Business One® are trademarks or registered trademarks of SAP SE in Germany and other countries.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Meaning: With this module - as a partial application of the multilingual dictionary in ClassiX® - the data of meaning objects are maintained. Objects of meaning are always used together with words. ### Instruction: Which module is being described? ### Response: This module is Meaning."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Meaning serve? ### Response: The purpose of the module Meaning is the following: With this module - as a partial application of the multilingual dictionary in ClassiX® - the data of meaning objects are maintained. Objects of meaning are always used together with words.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Status: Status monitors indicate the current processing status of documents.Thus, an order item is first in the status \"Created\" after creation. After the sales release, it changes to the status \"Design check\". The designers now find this order item in their lists and can examine and technically release this order item, whereby it changes to the next processing status (explode bill of materials).In order to teach the system when a change from one state to the next should take place, there are the transition descriptions. Calculation formulas are stored here, which are evaluated at the time the documents are posted. ### Instruction: What is the name of this module? ### Response: This module is called Status."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Status serve? ### Response: The module Status can be described as follows: Status monitors indicate the current processing status of documents.Thus, an order item is first in the status \"Created\" after creation. After the sales release, it changes to the status \"Design check\". The designers now find this order item in their lists and can examine and technically release this order item, whereby it changes to the next processing status (explode bill of materials).In order to teach the system when a change from one state to the next should take place, there are the transition descriptions. Calculation formulas are stored here, which are evaluated at the time the documents are posted.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Structure status: A structure status in ClassiX® is the combination of the status monitor of a business process and the structure node of a classification key. Master data is structured and categorised via evaluation groups, while documents have a status that results automatically from the data. Via the structure status, master data can now also receive an automatically determined status, which at the same time represents a structuring. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Structure status."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Structure status? ### Response: The module Structure status is used for the following: A structure status in ClassiX® is the combination of the status monitor of a business process and the structure node of a classification key. Master data is structured and categorised via evaluation groups, while documents have a status that results automatically from the data. Via the structure status, master data can now also receive an automatically determined status, which at the same time represents a structuring.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stock execution documents: ... ### Instruction: Tell me the name of this module. ### Response: This module is Stock execution documents."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Stock execution documents serve? ### Response: The module Stock execution documents is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Storage area: Storage bins are objects of the type \"account\" (CX_STOCK_SPACE) and have the task of managing stock quantities of parts in a warehouse or storage aids. Other business objects can also hold an account of the type \"storage bin\", e.g. forklift trucks for the short-term storage of goods. It is not possible to make a stock entry (entry, removal, transfer) without having defined at least one warehouse with at least one storage bin beforehand. A warehouse can have any number of storage bins, a storage bin is always assigned to only one warehouse. Storage bins typically have a bin \"number\" which is or should be exactly the same as the identification of a particular storage bin in the physical warehouse. In addition to information on location, size and capacity calculation, storage bins can be assigned to various sort keys, for example, to assign the storage bin to a storage type, storage section, picking area, staging area, door, or transfer zone, etc. Once the evaluation groups have been assigned, characteristics can be added to them in order to optimally control the warehouse management. In the standard system, the term \"picking zone\" (also often referred to as storage area) is predefined as a classification term for a storage bin with identifier \"PICKING_ZONE\". Sub-terms for freely definable picking areas are: Fast-moving items, Slow-moving items, etc....The term \"perpetual inventory\" is also predefined in the standard system as a classification term with the identifier \"CONTINOUS_STOCKTAKING\". Within this order structure, the storage bins are divided into individual subgroups for which inventories are then carried out one after the other in the course of a year. In this way, an inventory plan is defined for all storage bins, which ensures that each storage bin is counted at least once within a business year. The warehouse assigned to a storage bin can also be assigned to sort keys (see sort key \"STORAGE_TYPE\" for storage types), it is up to the internal organisation to find an optimal structure of the data for the company. Storage locations can be assigned to a topography of a warehouse in order to optimise paths in the warehouse. It is recommended that the storage locations are specified for aisle/rack/compartment (see utility Split storage location numbers into aisle/rack/compartment, which can be called up from the menu of the list window) and their X, Y and Z coordinates are set (see utility Import X, Y and Z coordinates of storage locations, which can be called up from the menu of the list window). The window for maintaining a storage location can only be called up via the module for maintaining a warehouse . ### Instruction: How is this module called? ### Response: This module is Storage area."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Storage area serve? ### Response: The module Storage area serves the purpose of the following: Storage bins are objects of the type \"account\" (CX_STOCK_SPACE) and have the task of managing stock quantities of parts in a warehouse or storage aids. Other business objects can also hold an account of the type \"storage bin\", e.g. forklift trucks for the short-term storage of goods. It is not possible to make a stock entry (entry, removal, transfer) without having defined at least one warehouse with at least one storage bin beforehand. A warehouse can have any number of storage bins, a storage bin is always assigned to only one warehouse. Storage bins typically have a bin \"number\" which is or should be exactly the same as the identification of a particular storage bin in the physical warehouse. In addition to information on location, size and capacity calculation, storage bins can be assigned to various sort keys, for example, to assign the storage bin to a storage type, storage section, picking area, staging area, door, or transfer zone, etc. Once the evaluation groups have been assigned, characteristics can be added to them in order to optimally control the warehouse management. In the standard system, the term \"picking zone\" (also often referred to as storage area) is predefined as a classification term for a storage bin with identifier \"PICKING_ZONE\". Sub-terms for freely definable picking areas are: Fast-moving items, Slow-moving items, etc....The term \"perpetual inventory\" is also predefined in the standard system as a classification term with the identifier \"CONTINOUS_STOCKTAKING\". Within this order structure, the storage bins are divided into individual subgroups for which inventories are then carried out one after the other in the course of a year. In this way, an inventory plan is defined for all storage bins, which ensures that each storage bin is counted at least once within a business year. The warehouse assigned to a storage bin can also be assigned to sort keys (see sort key \"STORAGE_TYPE\" for storage types), it is up to the internal organisation to find an optimal structure of the data for the company. Storage locations can be assigned to a topography of a warehouse in order to optimise paths in the warehouse. It is recommended that the storage locations are specified for aisle/rack/compartment (see utility Split storage location numbers into aisle/rack/compartment, which can be called up from the menu of the list window) and their X, Y and Z coordinates are set (see utility Import X, Y and Z coordinates of storage locations, which can be called up from the menu of the list window). The window for maintaining a storage location can only be called up via the module for maintaining a warehouse .."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Keywords: The central element in the structuring or classification of master data are classification terms, which can also be called structures. With this app, you can visually structure (order) any business objects such as parts (into parts classes), articles (into statistics groups), customers (into sales areas) or financial accounting accounts (into balance sheet and P&L frames). All business objects can be assigned to any classification terms as often as desired. As an example a simple classification for parts according to part classes is shown here: {img type=\"fileId\" fileId=\"450\" thumb=\"box\" width=\"100%\"}Once such a structure tree has been defined, any business objects can be assigned to a \"branch\" or \"structure node\" by \"drag & drop\". Business objects can also be assigned several times to different \"branches/nodes\" of the same tree.Order terms can and should also be used for temporary actions: e.g. the compilation of different customers into mailing campaigns. Objects namely, which are ordered in a branch/node, can conversely now be inserted as a complete group into other applications by \"drag&drop\". For example, individual customer groups can be assigned to a transaction document with a specific cover letter in one and processed as a form letter. The structuring is done by assigning the master data to individual nodes in the structure tree, so in the example individual customer types are assigned to the customers. The classification terms can now in turn be assigned properties, so a customer group can be assigned to each customer type. (In the example of the customer group, conditions (discounts, surcharges, warranties, ...) can be assigned to a group of customers.). ### Instruction: Name this module. ### Response: The name of this module is Keywords."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Keywords for me. ### Response: The module Keywords can be described as follows: The central element in the structuring or classification of master data are classification terms, which can also be called structures. With this app, you can visually structure (order) any business objects such as parts (into parts classes), articles (into statistics groups), customers (into sales areas) or financial accounting accounts (into balance sheet and P&L frames). All business objects can be assigned to any classification terms as often as desired. As an example a simple classification for parts according to part classes is shown here: {img type=\"fileId\" fileId=\"450\" thumb=\"box\" width=\"100%\"}Once such a structure tree has been defined, any business objects can be assigned to a \"branch\" or \"structure node\" by \"drag & drop\". Business objects can also be assigned several times to different \"branches/nodes\" of the same tree.Order terms can and should also be used for temporary actions: e.g. the compilation of different customers into mailing campaigns. Objects namely, which are ordered in a branch/node, can conversely now be inserted as a complete group into other applications by \"drag&drop\". For example, individual customer groups can be assigned to a transaction document with a specific cover letter in one and processed as a form letter. The structuring is done by assigning the master data to individual nodes in the structure tree, so in the example individual customer types are assigned to the customers. The classification terms can now in turn be assigned properties, so a customer group can be assigned to each customer type. (In the example of the customer group, conditions (discounts, surcharges, warranties, ...) can be assigned to a group of customers.)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Text module: Text modules can be used in ClassiX® in two different ways. On the one hand they can be used as conditions and attached to different documents, on the other hand they can be used as text modules in the literal sense, i.e. as letterhead or section in a letter, fax, etc. ### Instruction: What is the name of the module being described? ### Response: This module is called Text module."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Text module serve? ### Response: The purpose of the module Text module is as follows: Text modules can be used in ClassiX® in two different ways. On the one hand they can be used as conditions and attached to different documents, on the other hand they can be used as text modules in the literal sense, i.e. as letterhead or section in a letter, fax, etc.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Transaction description: Transaction descriptions define the processing of documents. Essentially, this involves the posting of documents to accounts/monitors, but it is also possible to carry out general data operations on all objects accessible from the document. As is common practice within the CyberEnterprise business OS, conditions (subtransactions, dimensions, data) are stored as CX_FORMULA objects. As formulas can also call InstantView® macros using this.call(macro name), these macros must be defined in the same module from which Call(GetProcessed) is called.All the information provided on dimensions or data fields must be accessible via the transaction/document to be processed. ### Instruction: Name this module. ### Response: This module is named Transaction description."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Transaction description used for? ### Response: The module Transaction description is used for the following: Transaction descriptions define the processing of documents. Essentially, this involves the posting of documents to accounts/monitors, but it is also possible to carry out general data operations on all objects accessible from the document. As is common practice within the CyberEnterprise business OS, conditions (subtransactions, dimensions, data) are stored as CX_FORMULA objects. As formulas can also call InstantView® macros using this.call(macro name), these macros must be defined in the same module from which Call(GetProcessed) is called.All the information provided on dimensions or data fields must be accessible via the transaction/document to be processed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Operation note: On the one hand, an activity note documents a completed activity(activity), such as a conducted meeting, an activity instruction or a written letter, but on the other hand, it also documents a planned activity(planning). If an activity note is marked as \"planning\", it automatically receives the status \"resubmission\" from the selected business process, if there is one. These resubmissions can then be called up via the \"My resubmissions\" list and checked by interval. Both activity and planning can be active or passive. Active transactions are outgoing from the own company to a partner. Passive transactions are incoming from an external partner to one's own company (e.g. customer calls me, customer writes an e-mail to me, etc.). Activity or planning can be marked as \"completed\" to track processing.One or more recipients can be assigned to an activity note. For each individual recipient, a document is printed or an e-mail or fax is sent. Depending on what is selected as the type of transaction (letter, fax, e-mail, etc.), the corresponding contact information is output next to the name of the recipient, i.e. address, fax number or e-mail address. This means that transaction notes can also be used, for example, to create serial letters. These can be changed via the context menu on the corresponding line. Any number of transaction notes can be assigned to all business objects - organised via transaction folders. A business object can be, for example, a partner, a partner function (e.g. supplier), a part, a part function (e.g. the production function), a parts list, etc. or even another document, such as an order, an invoice or another transaction note. On the other hand, each operation note itself can be linked to any number of business objects. The transaction notes are then posted in these transaction folders and thus support the workflow of information. Transaction notes can also be created directly from a business object by specifying the transaction type (note, letter, telephone call, etc.). If the transaction type is letter, fax or e-mail, the business object (the partner or partner function) is automatically entered as the recipient, otherwise only its transaction folder is automatically registered in the transaction note.If the business object is a contact person, the transaction folder of the contact person's company or the company function from which the contact person was called is also inserted next to the transaction folder of the contact person.With transaction notes, customer contact management in the sense of CRM functionality is possible: storage of information about e.g. telephone calls, correspondence and e-mail communication with the customer(activities), or planning with usually a resubmission, e.g. to promote marketing/sales campaigns.Any number of external documents can be added to a transaction note. Word texts, Excel tables and drawings are displayed directly and the objects can be edited by double-clicking. To show on each page whether external documents have been added to a transaction note, their number appears directly on the corresponding tab. The list shows both the type of file and the application registered for this type. For security reasons, the documents added here are assigned directly to the transaction note and are not maintained as associations within the document history.Furthermore, a description can be entered for each external document (via the 'Description' button). As a last piece of information, the file name under which the file was/is stored on the hard disk is also entered. All attached files are sent as attachments when they are sent by e-mail. The processing of all Microsoft Office file types is guaranteed by default.In order to create document chains (for one and the same activity/planning), follow-up documents can also be created from an activity note. These are used, for example, to track the customer contact regarding a topic, e.g. first telephone call - info mail sent - second telephone call - presentation - third telephone call, etc. The links between a transaction note and its predecessor or successor documents are displayed in the document links tab.Each transaction note is assigned to a business process and can assume different statuses, which are controlled manually. New business processes can be created for the transaction notes at any time. The indicator of the new business process must start with \"TXN_NOTE_WFL\" to be recognised as a transaction note process.The field\"Processor\" identifies the employee or cost centre who must complete this \"task\" or in whose processes and possibly resubmissions this activity note is posted.You can find information on printing task notes here. ### Instruction: What is the name of this module? ### Response: This module is called Operation note."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Operation note for me. ### Response: The module Operation note serves the purpose of the following: On the one hand, an activity note documents a completed activity(activity), such as a conducted meeting, an activity instruction or a written letter, but on the other hand, it also documents a planned activity(planning). If an activity note is marked as \"planning\", it automatically receives the status \"resubmission\" from the selected business process, if there is one. These resubmissions can then be called up via the \"My resubmissions\" list and checked by interval. Both activity and planning can be active or passive. Active transactions are outgoing from the own company to a partner. Passive transactions are incoming from an external partner to one's own company (e.g. customer calls me, customer writes an e-mail to me, etc.). Activity or planning can be marked as \"completed\" to track processing.One or more recipients can be assigned to an activity note. For each individual recipient, a document is printed or an e-mail or fax is sent. Depending on what is selected as the type of transaction (letter, fax, e-mail, etc.), the corresponding contact information is output next to the name of the recipient, i.e. address, fax number or e-mail address. This means that transaction notes can also be used, for example, to create serial letters. These can be changed via the context menu on the corresponding line. Any number of transaction notes can be assigned to all business objects - organised via transaction folders. A business object can be, for example, a partner, a partner function (e.g. supplier), a part, a part function (e.g. the production function), a parts list, etc. or even another document, such as an order, an invoice or another transaction note. On the other hand, each operation note itself can be linked to any number of business objects. The transaction notes are then posted in these transaction folders and thus support the workflow of information. Transaction notes can also be created directly from a business object by specifying the transaction type (note, letter, telephone call, etc.). If the transaction type is letter, fax or e-mail, the business object (the partner or partner function) is automatically entered as the recipient, otherwise only its transaction folder is automatically registered in the transaction note.If the business object is a contact person, the transaction folder of the contact person's company or the company function from which the contact person was called is also inserted next to the transaction folder of the contact person.With transaction notes, customer contact management in the sense of CRM functionality is possible: storage of information about e.g. telephone calls, correspondence and e-mail communication with the customer(activities), or planning with usually a resubmission, e.g. to promote marketing/sales campaigns.Any number of external documents can be added to a transaction note. Word texts, Excel tables and drawings are displayed directly and the objects can be edited by double-clicking. To show on each page whether external documents have been added to a transaction note, their number appears directly on the corresponding tab. The list shows both the type of file and the application registered for this type. For security reasons, the documents added here are assigned directly to the transaction note and are not maintained as associations within the document history.Furthermore, a description can be entered for each external document (via the 'Description' button). As a last piece of information, the file name under which the file was/is stored on the hard disk is also entered. All attached files are sent as attachments when they are sent by e-mail. The processing of all Microsoft Office file types is guaranteed by default.In order to create document chains (for one and the same activity/planning), follow-up documents can also be created from an activity note. These are used, for example, to track the customer contact regarding a topic, e.g. first telephone call - info mail sent - second telephone call - presentation - third telephone call, etc. The links between a transaction note and its predecessor or successor documents are displayed in the document links tab.Each transaction note is assigned to a business process and can assume different statuses, which are controlled manually. New business processes can be created for the transaction notes at any time. The indicator of the new business process must start with \"TXN_NOTE_WFL\" to be recognised as a transaction note process.The field\"Processor\" identifies the employee or cost centre who must complete this \"task\" or in whose processes and possibly resubmissions this activity note is posted.You can find information on printing task notes here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of web service: This module is used to maintain web services. A web service is used to access an external resource to transfer data and is uniquely identified by its URL. If access to a web service is restricted, a user ID and password must be used. Additional releases and restrictions can be managed via white and black lists.Logically, a web service is the reverse of an API key that provides access to an internal resource. ### Instruction: How is this module called? ### Response: This module is web service."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module web service used for? ### Response: The module web service is used for the following: This module is used to maintain web services. A web service is used to access an external resource to transfer data and is uniquely identified by its URL. If access to a web service is restricted, a user ID and password must be used. Additional releases and restrictions can be managed via white and black lists.Logically, a web service is the reverse of an API key that provides access to an internal resource.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Opened windows: This app lists all started (currently open) windows. ### Instruction: Name this module. ### Response: The module being described is Opened windows."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Opened windows for me. ### Response: The module Opened windows is used for the following: This app lists all started (currently open) windows.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Business Process: This module is used to define business processes as a sequence of states. Transition conditions can be specified between the states. Each document can be assigned to any number of business processes; its state within each business process then results automatically from the transition conditions. The different states that a document has passed through in the course of its processing can be displayed in the document history. ### Instruction: Which module is being described? ### Response: The module being described is Business Process."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Business Process serve? ### Response: The purpose of the module Business Process is as follows: This module is used to define business processes as a sequence of states. Transition conditions can be specified between the states. Each document can be assigned to any number of business processes; its state within each business process then results automatically from the transition conditions. The different states that a document has passed through in the course of its processing can be displayed in the document history.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Process routes: Business processes describe the flow of a single document by means of status (monitors). However, since the status of a document can be dependent on the status of another document, it must be possible to link several business processes of different documents with each other in order to map the complete process chain. This run through different business processes is called a process route.A simple example of this is the process route of a production part to be manufactured for an order:Before production, the order item runs from status \"created\" to status \"bill of material released\". If a production order - as a new document of another business process - with the status \"created\" is now created from this status, the order item itself is switched to the next status \"production order\" (PRODUCTION_ORDER). The order item remains in this status until the production order has reached the status \"provided\". Only then does the status of the order item change to \"ready\": Production\" (PRODUCTION_PROVISION).Such concatenations are possible within the transition descriptions in the individual status monitors, in the following figure using the example of the transition from the initial state \"Production order\" (PRODUCTION_ORDER) to the subsequent state \"Ready: Production\" (PRODUCTION_PROVISION): The process route to which this transition belongs is selected via the \"Process routes\" button. Then, by double-clicking on the newly assigned process route, the detailed processing of this assignment can be carried out. In this detail editing, a description can now be entered, e.g. which follow-on documents are necessary or similar. The possible start statuses of the follow-on documents can now be inserted into the list \"Follow-on monitors\" by clicking the \"Insert\" button. It is also possible to drag and drop the successor status directly into the list.Some data that the system cannot automatically find out must then be added: On the one hand, the class of the follow-on document must be specified (in this example CX_PRODUCTION_ORDER for a production order), and on the other hand, the process name must be entered. The process name is the name with which a document is linked to a business process and which is then specified for switching (triggering) a status monitor (e.g. here: productionOrderItem Get(TriggeredStateMonitor(\"PRODUCTION\")).The fields in the \"Origin\" group are empty when first opened and later only serve for navigation: in which transition is this dependency and to which process route is it assigned there.Once all these dependencies have been maintained, a view of the business processes through which the process route passes can be created afterwards. To the right is an example of the extent to which a document (order item) has already run through this process route. With the help of this graphic, it is now possible to see which steps still have to be carried out before the order item can be set to the status \"Ready: Production\" status. In this example, the production order has only just been created (status is framed in red), it still has to be started, completed and made available. This graphic can be called up from the document history by right-clicking the status and selecting \"Show process history\". ### Instruction: What is the name of this module? ### Response: This module is called Process routes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Process routes. ### Response: The purpose of the module Process routes is the following: Business processes describe the flow of a single document by means of status (monitors). However, since the status of a document can be dependent on the status of another document, it must be possible to link several business processes of different documents with each other in order to map the complete process chain. This run through different business processes is called a process route.A simple example of this is the process route of a production part to be manufactured for an order:Before production, the order item runs from status \"created\" to status \"bill of material released\". If a production order - as a new document of another business process - with the status \"created\" is now created from this status, the order item itself is switched to the next status \"production order\" (PRODUCTION_ORDER). The order item remains in this status until the production order has reached the status \"provided\". Only then does the status of the order item change to \"ready\": Production\" (PRODUCTION_PROVISION).Such concatenations are possible within the transition descriptions in the individual status monitors, in the following figure using the example of the transition from the initial state \"Production order\" (PRODUCTION_ORDER) to the subsequent state \"Ready: Production\" (PRODUCTION_PROVISION): The process route to which this transition belongs is selected via the \"Process routes\" button. Then, by double-clicking on the newly assigned process route, the detailed processing of this assignment can be carried out. In this detail editing, a description can now be entered, e.g. which follow-on documents are necessary or similar. The possible start statuses of the follow-on documents can now be inserted into the list \"Follow-on monitors\" by clicking the \"Insert\" button. It is also possible to drag and drop the successor status directly into the list.Some data that the system cannot automatically find out must then be added: On the one hand, the class of the follow-on document must be specified (in this example CX_PRODUCTION_ORDER for a production order), and on the other hand, the process name must be entered. The process name is the name with which a document is linked to a business process and which is then specified for switching (triggering) a status monitor (e.g. here: productionOrderItem Get(TriggeredStateMonitor(\"PRODUCTION\")).The fields in the \"Origin\" group are empty when first opened and later only serve for navigation: in which transition is this dependency and to which process route is it assigned there.Once all these dependencies have been maintained, a view of the business processes through which the process route passes can be created afterwards. To the right is an example of the extent to which a document (order item) has already run through this process route. With the help of this graphic, it is now possible to see which steps still have to be carried out before the order item can be set to the status \"Ready: Production\" status. In this example, the production order has only just been created (status is framed in red), it still has to be started, completed and made available. This graphic can be called up from the document history by right-clicking the status and selecting \"Show process history\".."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Event (time management): Time management events are occurrences that have an influence on the stamped/recorded total working time (flexitime, recording of hours) and/or on an employee's absence within a working day. These are, for example, the usual \"coming\" and \"going\" events, as well as the start and end of breaks, doctor's visits, full-day absences due to illness, unpaid private absences etc.Such events are directly assigned when \"stamping\" the attendance and absence times, when recording the absences of an employee and when storing the working time models. ### Instruction: Name this module. ### Response: This module is Event (time management)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Event (time management) serve? ### Response: The module Event (time management) can be described as follows: Time management events are occurrences that have an influence on the stamped/recorded total working time (flexitime, recording of hours) and/or on an employee's absence within a working day. These are, for example, the usual \"coming\" and \"going\" events, as well as the start and end of breaks, doctor's visits, full-day absences due to illness, unpaid private absences etc.Such events are directly assigned when \"stamping\" the attendance and absence times, when recording the absences of an employee and when storing the working time models.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Working time model: Working time models can be created and assigned for employees and cost centres. Events are used to define the working times within a working time model.They determine, for example, when the working day begins and ends and when or how long the breaks are.By means of these working time models defined in this way, the capacity of the employee can be automatically determined and saved for a defined period of time in capacity planning. The system then recognises, for example, that the employee works 8 hours on Mondays and Tuesdays, but only 7 hours on Fridays.In order for capacity planning to take these working times into account, the employee must be assigned to a time rule that refers to the \"capacity planning rule\". This is specified on the time rule or directly on the employee if the employee does not clock in and the working time model is only to be used for his capacity planning.{img fileId=\"519\"}. ### Instruction: Tell me the name of this module. ### Response: This module is Working time model."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Working time model used for? ### Response: The module Working time model can be described as follows: Working time models can be created and assigned for employees and cost centres. Events are used to define the working times within a working time model.They determine, for example, when the working day begins and ends and when or how long the breaks are.By means of these working time models defined in this way, the capacity of the employee can be automatically determined and saved for a defined period of time in capacity planning. The system then recognises, for example, that the employee works 8 hours on Mondays and Tuesdays, but only 7 hours on Fridays.In order for capacity planning to take these working times into account, the employee must be assigned to a time rule that refers to the \"capacity planning rule\". This is specified on the time rule or directly on the employee if the employee does not clock in and the working time model is only to be used for his capacity planning.{img fileId=\"519\"}."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Flexitime rule: The flexitime rules are available for evaluating the recorded working times. These can be structured differently for different employee groups. For example, an industrial employee may not clock in outside the working time assigned to him, although an employee may.The recording of sick days can also vary: If an employee is only paid by the hour, he or she does not receive a wage for this period. However, if he is an employee, the day is paid.These rules are laid down in the flexitime rules.Technical description:The floating time events write certain bit patterns into the evaluation. These bit patterns are evaluated by these rules and an action number is generated. This action number is then translated into various reactions in the programme code.The possible reactions of the system are the following:Overtime before or after working hours: Recorded time is outside working hours. If it is earlier than normal working time, it is only counted at weekends; on weekdays a message appears. If it is overtime after the end of working time, it is always counted, but on working days an additional notification message is displayed.Recorded working time is within the normal flexitime and is counted as normal working time. (e.g. employee has come within the flexitime but outside the standard working time)Recorded absence lies within the core working time. Only one warning message is issuedRecorded time is normal working time and is also counted as such (like point 2, only within working time instead of flexitime!) (e.g. employee came during working time but outside of break)DiseaseHolidayOn business trips (working time will be credited as normal)Present during a break (working time is NOT counted)Fixed working time (reaction still unclear)Overtime before or after working hours: Recorded time is outside working hours. If it is earlier than normal working time, it is only counted at weekends; on weekdays a message appears. If it is overtime after the end of working time, it is always counted, but in contrast to point 1, an additional message is always displayedPensioners and cleaning staff: working time is always fully countedAdditional days off.Additional planning functionality of the rulesSince the flexitime rules assume that a working time has already been recorded, without a pure planning rule it is not possible to determine in advance how much working time an employee will have to work on Wednesday of the following week. There is an extra rule for this which assumes that no time records have yet been made and only assumes the planned time.This rule can either be specified directly on the employee if he does not stamp, i.e. has fixed working times, or on another rule as a \"capacity planning rule\".When determining the planned working time, the planning rule is always used if it has been specified. If this link is missing, 0min remaining available capacity is used in planning.Technical description of the evaluationFirst, the evaluation takes the time period to be evaluated and runs through all days individually.For each day, all booked receipts per employee are first collected and the recorded events \"coming\" (firstComingTime) and \"going\" (lastGoingTime) are stored in a dailyContainer.The posted events are run through together with the working time events and the action of the latter is always carried out, whereby an action as described above is then determined via the rule.Example In this example, you can see how the working times behave mixed with the posted receipts. The employee has booked an \"Arrives\" and a \"Leaves\" receipt. The remaining entries are events from the master data of the working time description. The action is the result of the rule determined from the bit patterns above. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Flexitime rule."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Flexitime rule for me. ### Response: The purpose of the module Flexitime rule is the following: The flexitime rules are available for evaluating the recorded working times. These can be structured differently for different employee groups. For example, an industrial employee may not clock in outside the working time assigned to him, although an employee may.The recording of sick days can also vary: If an employee is only paid by the hour, he or she does not receive a wage for this period. However, if he is an employee, the day is paid.These rules are laid down in the flexitime rules.Technical description:The floating time events write certain bit patterns into the evaluation. These bit patterns are evaluated by these rules and an action number is generated. This action number is then translated into various reactions in the programme code.The possible reactions of the system are the following:Overtime before or after working hours: Recorded time is outside working hours. If it is earlier than normal working time, it is only counted at weekends; on weekdays a message appears. If it is overtime after the end of working time, it is always counted, but on working days an additional notification message is displayed.Recorded working time is within the normal flexitime and is counted as normal working time. (e.g. employee has come within the flexitime but outside the standard working time)Recorded absence lies within the core working time. Only one warning message is issuedRecorded time is normal working time and is also counted as such (like point 2, only within working time instead of flexitime!) (e.g. employee came during working time but outside of break)DiseaseHolidayOn business trips (working time will be credited as normal)Present during a break (working time is NOT counted)Fixed working time (reaction still unclear)Overtime before or after working hours: Recorded time is outside working hours. If it is earlier than normal working time, it is only counted at weekends; on weekdays a message appears. If it is overtime after the end of working time, it is always counted, but in contrast to point 1, an additional message is always displayedPensioners and cleaning staff: working time is always fully countedAdditional days off.Additional planning functionality of the rulesSince the flexitime rules assume that a working time has already been recorded, without a pure planning rule it is not possible to determine in advance how much working time an employee will have to work on Wednesday of the following week. There is an extra rule for this which assumes that no time records have yet been made and only assumes the planned time.This rule can either be specified directly on the employee if he does not stamp, i.e. has fixed working times, or on another rule as a \"capacity planning rule\".When determining the planned working time, the planning rule is always used if it has been specified. If this link is missing, 0min remaining available capacity is used in planning.Technical description of the evaluationFirst, the evaluation takes the time period to be evaluated and runs through all days individually.For each day, all booked receipts per employee are first collected and the recorded events \"coming\" (firstComingTime) and \"going\" (lastGoingTime) are stored in a dailyContainer.The posted events are run through together with the working time events and the action of the latter is always carried out, whereby an action as described above is then determined via the rule.Example In this example, you can see how the working times behave mixed with the posted receipts. The employee has booked an \"Arrives\" and a \"Leaves\" receipt. The remaining entries are events from the master data of the working time description. The action is the result of the rule determined from the bit patterns above.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Flexitime year: In addition to the calendar for financial years for financial accounting, asset accounting and cost accounting, as well as the company calendar, a working time calendar can be maintained for recording and maintaining absences (holidays, sick days) and working hours with flexitime. The maintenance of the working time calendars is usually the responsibility of the personnel department. ### Instruction: Which module is being described? ### Response: This module is Flexitime year."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Flexitime year serve? ### Response: The module Flexitime year can be described as follows: In addition to the calendar for financial years for financial accounting, asset accounting and cost accounting, as well as the company calendar, a working time calendar can be maintained for recording and maintaining absences (holidays, sick days) and working hours with flexitime. The maintenance of the working time calendars is usually the responsibility of the personnel department.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Client: This module is used for client management. A client represents the top level of the (DP-technical) organisation of company data and is the object which can be selected by a user when logging in. The information that a client holds is available system-wide. ### Instruction: How is this module called? ### Response: This module is called Client."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Client serve? ### Response: The module Client can be described as follows: This module is used for client management. A client represents the top level of the (DP-technical) organisation of company data and is the object which can be selected by a user when logging in. The information that a client holds is available system-wide.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Manage databases: With the help of the database management, the current database can be backed up at any time and reset to a backup. A backup can be performed during operation. When resetting, all applications accessing the database must be terminated. In the classix.cloud, access for other users is automatically blocked during recovery and released again after recovery. ### Instruction: What is the name of the module being described? ### Response: This module is called Manage databases."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Manage databases? ### Response: The purpose of the module Manage databases is the following: With the help of the database management, the current database can be backed up at any time and reset to a backup. A backup can be performed during operation. When resetting, all applications accessing the database must be terminated. In the classix.cloud, access for other users is automatically blocked during recovery and released again after recovery.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Data Connectors Import: This window is used to compare and import data connectors. Basically a data connector can be loaded from a file and compared with a data connector from the database. All differences are displayed and it can be selected which data should be taken over during import. The comparison and import of a data connector takes place in the following steps: Load data connector from file Compare data connector and select data for import Import data connector In principle, several data connectors can be loaded and compared in parallel. You can always switch between the simultaneously loaded data connectors via the combo box File. However, not too many data connectors should be compared at once, because with each comparison many transient objects must be created and kept in memory during the comparison. This slows down the system in case of very many simultaneous comparisons. If all data connectors are to be taken over at once and without any changes, it is recommended to use the menu item Automatic Import, which processes all files in a way that saves memory. In the following, the individual steps of a comparison and import are described. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Data Connectors Import."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Data Connectors Import serve? ### Response: The module Data Connectors Import serves the purpose of the following: This window is used to compare and import data connectors. Basically a data connector can be loaded from a file and compared with a data connector from the database. All differences are displayed and it can be selected which data should be taken over during import. The comparison and import of a data connector takes place in the following steps: Load data connector from file Compare data connector and select data for import Import data connector In principle, several data connectors can be loaded and compared in parallel. You can always switch between the simultaneously loaded data connectors via the combo box File. However, not too many data connectors should be compared at once, because with each comparison many transient objects must be created and kept in memory during the comparison. This slows down the system in case of very many simultaneous comparisons. If all data connectors are to be taken over at once and without any changes, it is recommended to use the menu item Automatic Import, which processes all files in a way that saves memory. In the following, the individual steps of a comparison and import are described.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:CyberEnterprise Browser: The CyberEnterprise Browser graphically displays data connectors and their connections to each other. Here it is possible to virtually walk through the entire CyberEnterprise. The CyberEnterprise is displayed as a graph. The nodes in this graph are the data connectors and the edges corresponding to the data fields. Only data fields are displayed which really refer to a data connector. If a connection between two data connectors is a relation with back reference, an arrowhead is shown on both sides, otherwise only along the reference. If a data field corresponds to a collection type, this is indicated by a small symbol at the beginning of the arrow. ### Instruction: What is the name of this module? ### Response: This module is English:CyberEnterprise Browser."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:CyberEnterprise Browser used for? ### Response: The module English:CyberEnterprise Browser is used for the following: The CyberEnterprise Browser graphically displays data connectors and their connections to each other. Here it is possible to virtually walk through the entire CyberEnterprise. The CyberEnterprise is displayed as a graph. The nodes in this graph are the data connectors and the edges corresponding to the data fields. Only data fields are displayed which really refer to a data connector. If a connection between two data connectors is a relation with back reference, an arrowhead is shown on both sides, otherwise only along the reference. If a data field corresponds to a collection type, this is indicated by a small symbol at the beginning of the arrow.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of dBase file display: With this module, files in dBase format can be read and their fields displayed. ### Instruction: How is this module called? ### Response: This module is named dBase file display."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module dBase file display? ### Response: The purpose of the module dBase file display is the following: With this module, files in dBase format can be read and their fields displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Totals and balance list of debtors (customers): This module is used to call up the totals and balance list for customer accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Totals and balance list of debtors (customers)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Totals and balance list of debtors (customers). ### Response: The purpose of the module Totals and balance list of debtors (customers) is as follows: This module is used to call up the totals and balance list for customer accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Dynamic data fields: Dynamic data fields can be defined in this window. ### Instruction: Name this module. ### Response: This module is called Dynamic data fields."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Dynamic data fields serve? ### Response: The module Dynamic data fields is used for the following: Dynamic data fields can be defined in this window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Document settings: This module is used to maintain the document presettings, which can be made depending on the document type (offer, order, ...) The default settings can be specified for internal objects (client, account, user). In this way, for example, all employees of a cost centre can receive an individual order letter. On the other hand, the partner objects and their roles can hold document presettings. Thus, a contact person for an order can be defined for a customer, who is to be set automatically when the order is created. ### Instruction: What is the name of the module being described? ### Response: The module being described is Document settings."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Document settings used for? ### Response: The module Document settings serves the purpose of the following: This module is used to maintain the document presettings, which can be made depending on the document type (offer, order, ...) The default settings can be specified for internal objects (client, account, user). In this way, for example, all employees of a cost centre can receive an individual order letter. On the other hand, the partner objects and their roles can hold document presettings. Thus, a contact person for an order can be defined for a customer, who is to be set automatically when the order is created.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Delivery date confirmation: This window is used to quickly enter delivery date confirmations of orders. ### Instruction: What is the name of this module? ### Response: The name of this module is Delivery date confirmation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Delivery date confirmation used for? ### Response: The module Delivery date confirmation is used for the following: This window is used to quickly enter delivery date confirmations of orders.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Delivery note dispatch data: This window is used for quick entry of the delivery note dispatch data. ### Instruction: Tell me the name of this module. ### Response: The module being described is Delivery note dispatch data."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Delivery note dispatch data serve? ### Response: The purpose of the module Delivery note dispatch data is as follows: This window is used for quick entry of the delivery note dispatch data.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select delivery note item: Selection window for delivery note items. ### Instruction: Which module is being described? ### Response: This module is named Select delivery note item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Select delivery note item serve? ### Response: The module Select delivery note item serves the purpose of the following: Selection window for delivery note items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Delivery note: In this module, delivery notes can be recorded and further processed.Instructions for printing delivery notes can be found here. ### Instruction: Name this module. ### Response: This module is named Delivery note."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Delivery note used for? ### Response: The module Delivery note serves the purpose of the following: In this module, delivery notes can be recorded and further processed.Instructions for printing delivery notes can be found here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Delivery note item statistics: In order to be able to make an evaluation of on-time delivery performance, a list with all required data fields is required as a DataSource. From this list, any evaluation can then be created and printed out using reporting tools. Via the graphics toolbar button up to now 2 evaluations can be displayed graphically: Weekly evaluation of the key performance indicator of throughput time per order item Delivery reliability per quarter (based on the column \"Delay\" and only interprets an order line as \"with delay\" if this value is positive, i.e. the delivery date has been shifted into the future of the actual delivery date) Only the data currently displayed in the list is used for the evaluations. ### Instruction: Which module is being described? ### Response: The name of this module is Delivery note item statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Delivery note item statistics for me. ### Response: The purpose of the module Delivery note item statistics is as follows: In order to be able to make an evaluation of on-time delivery performance, a list with all required data fields is required as a DataSource. From this list, any evaluation can then be created and printed out using reporting tools. Via the graphics toolbar button up to now 2 evaluations can be displayed graphically: Weekly evaluation of the key performance indicator of throughput time per order item Delivery reliability per quarter (based on the column \"Delay\" and only interprets an order line as \"with delay\" if this value is positive, i.e. the delivery date has been shifted into the future of the actual delivery date) Only the data currently displayed in the list is used for the evaluations.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Dialogue window: Programme control by query dialogue. ### Instruction: Name this module. ### Response: This module is called Dialogue window."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Dialogue window. ### Response: The purpose of the module Dialogue window is as follows: Programme control by query dialogue.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Direct delivery item: Positions of the direct delivery notes. ### Instruction: Which module is being described? ### Response: This module is called Direct delivery item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Direct delivery item for me. ### Response: The module Direct delivery item is used for the following: Positions of the direct delivery notes.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Direct delivery: The goods delivered directly to the customer can be entered in the direct delivery mask. If the order is assigned, the delivered quantity is also noted on the order items. ### Instruction: What is the name of the module being described? ### Response: This module is named Direct delivery."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Direct delivery used for? ### Response: The module Direct delivery serves the purpose of the following: The goods delivered directly to the customer can be entered in the direct delivery mask. If the order is assigned, the delivered quantity is also noted on the order items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Disposable assembly: With this module, the complete structure of a parts list - i.e. including the structures of all subordinate assemblies - can be changed in a production part role in order to better reflect the actual manufacturing process of the part in production. In design, assemblies are often only formed from a purely functional point of view, i.e. a \"constructive\" product structure is created which does not correspond to the \"dispositive\" product structure. Such deviations between the \"constructive\" and \"dispositive\" view of a bill of material can occur when a bill of material individual items within a subordinate assembly of this parts list are not first pre-assembled to this assembly in the production process, but are built directly into the higher-level assembly in one go(constructive assembly), individual items of the same level do not flow simultaneously, but at different times into different, higher-level(MRP-extended) assemblies (e.g. in the case of subordinate, individually loose parts that must first be provided for final assembly), or individual items are only prefabricated as sub-assemblies - not provided for by the design -(purely disposable assemblies). So if an assembly is declared as a so-called\"constructive assembly\" on the production part, this level is completely omitted in the MRP view of each higher-level assembly of this production part. If a \"dispositive assembly\" is declared on the production part, then items from different, subordinate assemblies can be \"shifted dispositively (up)\" into this assembly, i.e. the vertical range of manufacture of these items can be reduced. Finally, by defining a\"purely dispositive assembly\", individual items from any structure depth of the parts list can be combined to form a new part, a new assembly. The constructive product structure of a production part, which is built up from the point of view of design, can therefore differ considerably from the production-oriented dispositive product structure of the same production part, which also changes the structure of the part requirement. The restructuring of a product structure from the constructive to the dispositive type is defined on the basis of dispositive assembly objects which are added to a production role of a part. ### Instruction: What is the name of the module being described? ### Response: This module is Disposable assembly."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Disposable assembly? ### Response: The purpose of the module Disposable assembly is the following: With this module, the complete structure of a parts list - i.e. including the structures of all subordinate assemblies - can be changed in a production part role in order to better reflect the actual manufacturing process of the part in production. In design, assemblies are often only formed from a purely functional point of view, i.e. a \"constructive\" product structure is created which does not correspond to the \"dispositive\" product structure. Such deviations between the \"constructive\" and \"dispositive\" view of a bill of material can occur when a bill of material individual items within a subordinate assembly of this parts list are not first pre-assembled to this assembly in the production process, but are built directly into the higher-level assembly in one go(constructive assembly), individual items of the same level do not flow simultaneously, but at different times into different, higher-level(MRP-extended) assemblies (e.g. in the case of subordinate, individually loose parts that must first be provided for final assembly), or individual items are only prefabricated as sub-assemblies - not provided for by the design -(purely disposable assemblies). So if an assembly is declared as a so-called\"constructive assembly\" on the production part, this level is completely omitted in the MRP view of each higher-level assembly of this production part. If a \"dispositive assembly\" is declared on the production part, then items from different, subordinate assemblies can be \"shifted dispositively (up)\" into this assembly, i.e. the vertical range of manufacture of these items can be reduced. Finally, by defining a\"purely dispositive assembly\", individual items from any structure depth of the parts list can be combined to form a new part, a new assembly. The constructive product structure of a production part, which is built up from the point of view of design, can therefore differ considerably from the production-oriented dispositive product structure of the same production part, which also changes the structure of the part requirement. The restructuring of a product structure from the constructive to the dispositive type is defined on the basis of dispositive assembly objects which are added to a production role of a part.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Customer down payment request: (see also: Business process \"Down payments\") Particularly in the case of contracts for work and services in the capital goods and plant construction sectors, it makes sense to demand advance payments as a guarantee for the fulfilment of the contract or as short or medium-term financing. This loan, which is granted interest-free by the debtor, is agreed upon in the order confirmation via the instalment payment conditions. This payment can now be requested by the customer via the down payment request module in accordance with § 632a BGB. If the customer does not comply with these down payments, he can be reminded together with his open items. The down payment request document is not an accounting document but only a memorandum item which reminds you of a down payment to be made. Therefore, the down payment requests in the customer open items represent a separate heading which does not change the balance. As the down payment represents a provisional payment for the entire work performance, it is to be offset against the final invoice. ### Instruction: How is this module called? ### Response: This module is named Customer down payment request."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Customer down payment request used for? ### Response: The module Customer down payment request is used for the following: (see also: Business process \"Down payments\") Particularly in the case of contracts for work and services in the capital goods and plant construction sectors, it makes sense to demand advance payments as a guarantee for the fulfilment of the contract or as short or medium-term financing. This loan, which is granted interest-free by the debtor, is agreed upon in the order confirmation via the instalment payment conditions. This payment can now be requested by the customer via the down payment request module in accordance with § 632a BGB. If the customer does not comply with these down payments, he can be reminded together with his open items. The down payment request document is not an accounting document but only a memorandum item which reminds you of a down payment to be made. Therefore, the down payment requests in the customer open items represent a separate heading which does not change the balance. As the down payment represents a provisional payment for the entire work performance, it is to be offset against the final invoice.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Down payment request supplier: If a contract for work and services in the capital goods or plant construction sector is concluded with a supplier, the latter may demand a down payment as a guarantee for the fulfilment of the contract or as short or medium-term financing. This loan granted to the creditor without interest is agreed upon in the order via the instalment payment conditions. The down payment request document is not an accounting document but only a memorandum item which reminds you of a down payment to be made. Therefore, the down payment requests in the open items of the supplier represent a separate heading which does not change the balance. As the down payment represents a provisional payment for the entire work performance, it is to be offset against the final invoice. ### Instruction: What is the name of this module? ### Response: The name of this module is Down payment request supplier."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Down payment request supplier serve? ### Response: The purpose of the module Down payment request supplier is the following: If a contract for work and services in the capital goods or plant construction sector is concluded with a supplier, the latter may demand a down payment as a guarantee for the fulfilment of the contract or as short or medium-term financing. This loan granted to the creditor without interest is agreed upon in the order via the instalment payment conditions. The down payment request document is not an accounting document but only a memorandum item which reminds you of a down payment to be made. Therefore, the down payment requests in the open items of the supplier represent a separate heading which does not change the balance. As the down payment represents a provisional payment for the entire work performance, it is to be offset against the final invoice.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Classroom area: Domain declarations are used to divide classes in the database into domains. The bit pattern specifies the domain in which an object is to be placed when it is created (write) and also specifies which domains are permitted for read access (read). The domain declarations defined with this module can then be assigned, for example, to a client, a warehouse or a cost centre as so-called domain holders. In the most common case, domain declarations are used to separate financial accounting accounts of different clients - with the same system usage. For this purpose, the same chart of accounts, the same customers, suppliers, etc. are used across all clients, only the account assignment data (value accounts) themselves are separated by domains. ### Instruction: How is this module called? ### Response: This module is called Classroom area."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Classroom area serve? ### Response: The purpose of the module Classroom area is as follows: Domain declarations are used to divide classes in the database into domains. The bit pattern specifies the domain in which an object is to be placed when it is created (write) and also specifies which domains are permitted for read access (read). The domain declarations defined with this module can then be assigned, for example, to a client, a warehouse or a cost centre as so-called domain holders. In the most common case, domain declarations are used to separate financial accounting accounts of different clients - with the same system usage. For this purpose, the same chart of accounts, the same customers, suppliers, etc. are used across all clients, only the account assignment data (value accounts) themselves are separated by domains.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Down payment request book: This ClassiX® App provides you with an overview of the down payment requests and final invoices still to be issued. This information is obtained from the payment plan amounts of the payment plans stored in the orders. New down payment requests can also be created directly via this app. ### Instruction: What is the name of this module? ### Response: This module is called Down payment request book."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Down payment request book serve? ### Response: The purpose of the module Down payment request book is the following: This ClassiX® App provides you with an overview of the down payment requests and final invoices still to be issued. This information is obtained from the payment plan amounts of the payment plans stored in the orders. New down payment requests can also be created directly via this app.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Bank data exchange: The paperless exchange of data media with banks for domestic payments (Germany) is carried out using the DTAUS file format. This module is suitable for reading in a file of this format and displaying the data in an edited form. ### Instruction: Which module is being described? ### Response: This module is called Bank data exchange."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Bank data exchange? ### Response: The purpose of the module Bank data exchange is as follows: The paperless exchange of data media with banks for domestic payments (Germany) is carried out using the DTAUS file format. This module is suitable for reading in a file of this format and displaying the data in an edited form.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Analyse DTAZV file: The paperless data medium exchange with banks for foreign payments (Germany) is carried out using the DTAZV file format. This module is suitable for reading in a file of this format and displaying the data in a prepared form. ### Instruction: How is this module called? ### Response: The name of this module is Analyse DTAZV file."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Analyse DTAZV file? ### Response: The purpose of the module Analyse DTAZV file is the following: The paperless data medium exchange with banks for foreign payments (Germany) is carried out using the DTAZV file format. This module is suitable for reading in a file of this format and displaying the data in a prepared form.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Suggest reminders: This module is used for the selection for the automated proposal of (debit-side) reminders. After entering the selection criteria and pressing the \"Lists\" button, a reminder proposal list is created from which reminders can be sent. ### Instruction: Which module is being described? ### Response: This module is Suggest reminders."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Suggest reminders for me. ### Response: The module Suggest reminders is used for the following: This module is used for the selection for the automated proposal of (debit-side) reminders. After entering the selection criteria and pressing the \"Lists\" button, a reminder proposal list is created from which reminders can be sent.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Recapitulative statement (ZM): This declaration must be made by every company that is entitled to deduct VAT and makes cross-border tax-free shipments to other companies within the EU in addition to the advance VAT declaration. It contains the following information: the value added tax identification number (VAT ID number) of the company (master company) which carried out the intra-Community deliveries or contract processing the VAT ID of the acquiring or commissioning company (company master). Via the Internet address http://www.bzst.bund.de the entrepreneur can have the VAT registration number of a customer in another EU country confirmed at any time and according to information from the Federal Central Tax Office (BZSt). After entering their own VAT registration number and the VAT registration number of the foreign customer to be confirmed, the information is compared with the database of the respective tax authority of the foreign customer. the sums of the tax bases of intra-Community processing operations for each contracting authority whether the transaction is a supply, a service or a triangular transaction The following should be noted in order to carry out the ZM electronically. The data of the form can be filled in directly via an import of the data previously exported with this module. The ZM declaration can be called up for individual accounts or for structure nodes of a classification term populated with accounts. Note: Before using this module, it is advisable to classify the revenue accounts according to delivery or service accounts. ### Instruction: Name this module. ### Response: The name of this module is Recapitulative statement (ZM)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Recapitulative statement (ZM)? ### Response: The module Recapitulative statement (ZM) is used for the following: This declaration must be made by every company that is entitled to deduct VAT and makes cross-border tax-free shipments to other companies within the EU in addition to the advance VAT declaration. It contains the following information: the value added tax identification number (VAT ID number) of the company (master company) which carried out the intra-Community deliveries or contract processing the VAT ID of the acquiring or commissioning company (company master). Via the Internet address http://www.bzst.bund.de the entrepreneur can have the VAT registration number of a customer in another EU country confirmed at any time and according to information from the Federal Central Tax Office (BZSt). After entering their own VAT registration number and the VAT registration number of the foreign customer to be confirmed, the information is compared with the database of the respective tax authority of the foreign customer. the sums of the tax bases of intra-Community processing operations for each contracting authority whether the transaction is a supply, a service or a triangular transaction The following should be noted in order to carry out the ZM electronically. The data of the form can be filled in directly via an import of the data previously exported with this module. The ZM declaration can be called up for individual accounts or for structure nodes of a classification term populated with accounts. Note: Before using this module, it is advisable to classify the revenue accounts according to delivery or service accounts.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of E-mail send status: Displays the mails automatically generated from the machine. With this list you can check when, who created or sent which mail or if it was sent without errors at all!. ### Instruction: Tell me the name of this module. ### Response: This module is named E-mail send status."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module E-mail send status. ### Response: The purpose of the module E-mail send status is as follows: Displays the mails automatically generated from the machine. With this list you can check when, who created or sent which mail or if it was sent without errors at all!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Totals and balance list employees (expense accounts): This module is used to call up the summary, balance list (for the expense account) of the employees. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances. ### Instruction: Which module is being described? ### Response: The module being described is Totals and balance list employees (expense accounts)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Totals and balance list employees (expense accounts) used for? ### Response: The purpose of the module Totals and balance list employees (expense accounts) is as follows: This module is used to call up the summary, balance list (for the expense account) of the employees. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Excel cell reader: With this module, a single cell can be read from any Excel file to be specified for test purposes. This module also offers the possibility to find the corresponding objects in ClassiX using numbers in Excel columns and to display them in a list. From this list the objects can be dragged into e.g. the favourites folder or other evaluation lists / structures. ### Instruction: Tell me the name of this module. ### Response: The module being described is Excel cell reader."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Excel cell reader serve? ### Response: The module Excel cell reader can be described as follows: With this module, a single cell can be read from any Excel file to be specified for test purposes. This module also offers the possibility to find the corresponding objects in ClassiX using numbers in Excel columns and to display them in a list. From this list the objects can be dragged into e.g. the favourites folder or other evaluation lists / structures.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:ExcelReader: This app can be used to read an entire Excel file or just individual cells.If an entire Excel file is read in and a unique key of an object class is specified in a column of the Excel file, then each entry in the Excel file can be assigned an object in the database with this information.Each column (currently a maximum of 15 columns) of the Excel file is read in as text and output in the upper list window \"of the objects found\" from the 5th column onwards. The type of object is output in the first column, the unique key in the second column, the validity in the third column and the description of the object in the fourth column.If no type/class is specified or if no object is found with the key, this entry is output in the lower list of \"not found objects\". Here the type is in the first column and the unique key in the second column. The columns of the Excel file are output in this list from the third column onwards.The columns from the Excel file (as already explained above in the list of found objects starting from the fifth column, in the list of not found objects starting from the third column) are internally provided with the field names first.comment, second.comment, etc.This app is used in particular to be able to change individual fields of objects in the database quickly and without special programming via Excel columns. To do this, the list entries can be selected and the corresponding programme steps entered via the InstantView command window. Reading individual cells is useful if, for example, you want to check the content and in particular the type (date, number, etc.) of an Excel cell that has been read in. ### Instruction: Which module is being described? ### Response: The name of this module is English:ExcelReader."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module English:ExcelReader serve? ### Response: The purpose of the module English:ExcelReader is as follows: This app can be used to read an entire Excel file or just individual cells.If an entire Excel file is read in and a unique key of an object class is specified in a column of the Excel file, then each entry in the Excel file can be assigned an object in the database with this information.Each column (currently a maximum of 15 columns) of the Excel file is read in as text and output in the upper list window \"of the objects found\" from the 5th column onwards. The type of object is output in the first column, the unique key in the second column, the validity in the third column and the description of the object in the fourth column.If no type/class is specified or if no object is found with the key, this entry is output in the lower list of \"not found objects\". Here the type is in the first column and the unique key in the second column. The columns of the Excel file are output in this list from the third column onwards.The columns from the Excel file (as already explained above in the list of found objects starting from the fifth column, in the list of not found objects starting from the third column) are internally provided with the field names first.comment, second.comment, etc.This app is used in particular to be able to change individual fields of objects in the database quickly and without special programming via Excel columns. To do this, the list entries can be selected and the corresponding programme steps entered via the InstantView command window. Reading individual cells is useful if, for example, you want to check the content and in particular the type (date, number, etc.) of an Excel cell that has been read in.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Import and export: This window is used to import or export Excel documents. Its main purpose is to export old data to Excel, or to import new data from old systems into the system. ### Instruction: Tell me the name of this module. ### Response: This module is called Import and export."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Import and export? ### Response: The module Import and export can be described as follows: This window is used to import or export Excel documents. Its main purpose is to export old data to Excel, or to import new data from old systems into the system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Enumeration extension module: This module offers the possibility to elegantly extend enumerations in the classix.num or the corresponding customer derivation. New entries are read in from a file to be selected, compared with the existing entries so that no entry is created twice, supplemented with a unique number and sorted alphabetically. A new file is then created, the content of which is the complete definition of the enumeration of the selected data field. This block must now be copied and pasted into the selected num. Please make sure to delete the old definition from the num or replace the old definition with the new one. An Excel file or a simple text file is accepted as source file. If the file is an Excel file, the column in which the enumeration entries to be read must also be specified. ### Instruction: What is the name of this module? ### Response: The module being described is Enumeration extension module."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Enumeration extension module for me. ### Response: The purpose of the module Enumeration extension module is the following: This module offers the possibility to elegantly extend enumerations in the classix.num or the corresponding customer derivation. New entries are read in from a file to be selected, compared with the existing entries so that no entry is created twice, supplemented with a unique number and sorted alphabetically. A new file is then created, the content of which is the complete definition of the enumeration of the selected data field. This block must now be copied and pasted into the selected num. Please make sure to delete the old definition from the num or replace the old definition with the new one. An Excel file or a simple text file is accepted as source file. If the file is an Excel file, the column in which the enumeration entries to be read must also be specified.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of External disposition: External dispositions can be used to manually post documents about planned receipts/issues in the logistics account. This method can be used to compare the dispositions of a second system and for testing(see quality assurance). ### Instruction: Which module is being described? ### Response: This module is External disposition."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module External disposition for me. ### Response: The purpose of the module External disposition is as follows: External dispositions can be used to manually post documents about planned receipts/issues in the logistics account. This method can be used to compare the dispositions of a second system and for testing(see quality assurance).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of families: With this module you can document the relationships between different people. ### Instruction: How is this module called? ### Response: The name of this module is families."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module families serve? ### Response: The module families can be described as follows: With this module you can document the relationships between different people.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Favorites: In the favourites window you can collect all the objects you want to have quick access to. These can be sorted and managed in subfolders, e.g. frequently used contacts or telephone numbers. All objects can be sorted here by drag & drop into the tree. In addition, you can also create telephone numbers that cannot be directly assigned to a person or that you just need to note down quickly. For all elements in the tree you can also enter extra data, such as a descriptive comment. In addition to the management of favourites, all functions are combined here to export ClassiX® contacts, e.g. to Microsoft Outlook. ### Instruction: What is the name of this module? ### Response: This module is Favorites."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Favorites? ### Response: The module Favorites serves the purpose of the following: In the favourites window you can collect all the objects you want to have quick access to. These can be sorted and managed in subfolders, e.g. frequently used contacts or telephone numbers. All objects can be sorted here by drag & drop into the tree. In addition, you can also create telephone numbers that cannot be directly assigned to a person or that you just need to note down quickly. For all elements in the tree you can also enter extra data, such as a descriptive comment. In addition to the management of favourites, all functions are combined here to export ClassiX® contacts, e.g. to Microsoft Outlook.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Financial accounting account sheets: This module is used to output/print account sheets/account statements. ### Instruction: Name this module. ### Response: The module being described is Financial accounting account sheets."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Financial accounting account sheets? ### Response: The module Financial accounting account sheets serves the purpose of the following: This module is used to output/print account sheets/account statements.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Bookings financial accounting: This is the central booking module of financial accounting. All booking events of a financial accounting can be processed with this module. ### Instruction: Which module is being described? ### Response: This module is called Bookings financial accounting."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Bookings financial accounting? ### Response: The module Bookings financial accounting serves the purpose of the following: This is the central booking module of financial accounting. All booking events of a financial accounting can be processed with this module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Copy financial accounting document: You can copy any document that has already been posted and use it, for example, as a posting document for regularly recurring postings (rent, electricity or leasing invoices). You can also use this module to copy a document as a reversal posting (see field selection under copy type). The posting document is also copied, but the values are multiplied by (-1). The newly copied document is either posted immediately, if desired, or is first displayed in the posting mask for further manual editing of the accounts and/or values. The account assignment can also be updated automatically, i.e. if, for example, totaling accounts of sub-accounts have been changed: first, all postings/open items of a sub-account to be changed are cancelled, then the assigned totaling account is corrected (e.g. from \"Deliveries abroad\" to \"Delivery EU\") and the postings \"updated\" are copied again. The same applies to changes in the assignment of cost elements to Guv accounts. This module can be accessed either directly from the main menu (Activities/Accounting/Financial Accounting/Copy Postings), from the posting entry mask or from the journal. ### Instruction: Tell me the name of this module. ### Response: The module being described is Copy financial accounting document."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Copy financial accounting document serve? ### Response: The module Copy financial accounting document serves the purpose of the following: You can copy any document that has already been posted and use it, for example, as a posting document for regularly recurring postings (rent, electricity or leasing invoices). You can also use this module to copy a document as a reversal posting (see field selection under copy type). The posting document is also copied, but the values are multiplied by (-1). The newly copied document is either posted immediately, if desired, or is first displayed in the posting mask for further manual editing of the accounts and/or values. The account assignment can also be updated automatically, i.e. if, for example, totaling accounts of sub-accounts have been changed: first, all postings/open items of a sub-account to be changed are cancelled, then the assigned totaling account is corrected (e.g. from \"Deliveries abroad\" to \"Delivery EU\") and the postings \"updated\" are copied again. The same applies to changes in the assignment of cost elements to Guv accounts. This module can be accessed either directly from the main menu (Activities/Accounting/Financial Accounting/Copy Postings), from the posting entry mask or from the journal.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Journal Financial Accounting: Documents can be posted in financial accounting either manually or via interfaces (e.g. outgoing invoice journal, incoming invoice journal, cash journal). With this module, the bookings can be listed and, to a limited extent, changes can also be made subsequently in cost accounting (cost types, cost centres and cost objects). The journal output can be structured or unstructured. The latter case of journal output serves in particular as an interface for the output of bookings for other systems (e.g. according to the GDPdU standard (IDEA)). ### Instruction: Name this module. ### Response: This module is called Journal Financial Accounting."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Journal Financial Accounting for me. ### Response: The module Journal Financial Accounting serves the purpose of the following: Documents can be posted in financial accounting either manually or via interfaces (e.g. outgoing invoice journal, incoming invoice journal, cash journal). With this module, the bookings can be listed and, to a limited extent, changes can also be made subsequently in cost accounting (cost types, cost centres and cost objects). The journal output can be structured or unstructured. The latter case of journal output serves in particular as an interface for the output of bookings for other systems (e.g. according to the GDPdU standard (IDEA)).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Financial accounting transactions: With this module, the bookings of an account are listed in the financial accounting. It is the detailed view if you want to list the bookings of a certain period or all bookings of a financial year from the module of account balances. ### Instruction: What is the name of this module? ### Response: The module being described is Financial accounting transactions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Financial accounting transactions? ### Response: The module Financial accounting transactions is used for the following: With this module, the bookings of an account are listed in the financial accounting. It is the detailed view if you want to list the bookings of a certain period or all bookings of a financial year from the module of account balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Change control account: Personal accounts, i.e. customers, suppliers, employees and commission recipients (representatives) form so-called sub-ledgers in financial accounting. The connection to the general ledger of the financial accounting and thus to the balance sheet accounts of the classes receivables and payables are determined in CyberEnterprise® from the partner functions via the field reconciliation account. Normally, such an allocation to the control account remains unchanged, but if, for example, a previous supplier is bought by the own company, the control account must be changed from \"trade payables\" to \"payables to affiliated companies\" from this specific date. Another example is when a country is admitted to the European Union, then the reconciliation accounts of the person holding accounts from this country could change from e.g. \"Foreign receivables\" to \"EU receivables\". The totals and balance lists of debtors, creditors, employees and commission recipients (representatives) can also be called up via the respective reconciliation account, at the same time checking whether the balance of the reconciliation account matches the total of the person accounts assigned to the reconciliation account.This app is used, on the one hand, to make such a change to a reconciliation account of a person holding account, and, on the other hand, to make a posting - otherwise not permitted - between reconciliation accounts. ### Instruction: What is the name of this module? ### Response: The name of this module is Change control account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Change control account? ### Response: The module Change control account serves the purpose of the following: Personal accounts, i.e. customers, suppliers, employees and commission recipients (representatives) form so-called sub-ledgers in financial accounting. The connection to the general ledger of the financial accounting and thus to the balance sheet accounts of the classes receivables and payables are determined in CyberEnterprise® from the partner functions via the field reconciliation account. Normally, such an allocation to the control account remains unchanged, but if, for example, a previous supplier is bought by the own company, the control account must be changed from \"trade payables\" to \"payables to affiliated companies\" from this specific date. Another example is when a country is admitted to the European Union, then the reconciliation accounts of the person holding accounts from this country could change from e.g. \"Foreign receivables\" to \"EU receivables\". The totals and balance lists of debtors, creditors, employees and commission recipients (representatives) can also be called up via the respective reconciliation account, at the same time checking whether the balance of the reconciliation account matches the total of the person accounts assigned to the reconciliation account.This app is used, on the one hand, to make such a change to a reconciliation account of a person holding account, and, on the other hand, to make a posting - otherwise not permitted - between reconciliation accounts.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Financial status: The financial status of companies or persons is displayed across all partner functions. If, for example, a partner has a customer and a supplier role, the open items and the total balance are displayed across both accounts. Balances and postings to down payment accounts are also listed. If a partner has branches or affiliated companies, the financial status of these partners is also displayed. This display is - in contrast to the pure listing of open items in the financial accounting area - rather intended for employees from the sales and/or purchasing area to get an overview for credit assessment. ### Instruction: Name this module. ### Response: This module is called Financial status."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Financial status. ### Response: The module Financial status is used for the following: The financial status of companies or persons is displayed across all partner functions. If, for example, a partner has a customer and a supplier role, the open items and the total balance are displayed across both accounts. Balances and postings to down payment accounts are also listed. If a partner has branches or affiliated companies, the financial status of these partners is also displayed. This display is - in contrast to the pure listing of open items in the financial accounting area - rather intended for employees from the sales and/or purchasing area to get an overview for credit assessment.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Working Time Recorder: A working time recorder is the role of a person who records his/her presence and absence times on a company site in hours or also as days. A working time recorder can also be an employee of a company, but does not have to be (e.g. external persons such as security staff or cleaning staff who are nevertheless required to document their presence on the company premises). The data on a person's time registration role are in particular the identification number of a badge and the working time model assigned to this person, and possibly also a system of rules for time accounting. ### Instruction: Which module is being described? ### Response: This module is named Working Time Recorder."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Working Time Recorder? ### Response: The module Working Time Recorder is used for the following: A working time recorder is the role of a person who records his/her presence and absence times on a company site in hours or also as days. A working time recorder can also be an employee of a company, but does not have to be (e.g. external persons such as security staff or cleaning staff who are nevertheless required to document their presence on the company premises). The data on a person's time registration role are in particular the identification number of a badge and the working time model assigned to this person, and possibly also a system of rules for time accounting.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Tasks: In addition to enquiries (= planning) and work orders (= processing), digital circulars (= notification) are the third pillar for carrying out tasks. Each document defined in CyberEnterprise® (e.g. invoice, order, goods receipt, etc.) is subject to one or more predefined business processes. Within such business processes, a document passes through the statuses specified by the business process, e.g. an order can have the status \"partially delivered\" with regard to the delivery process. In addition to these processes - which are firmly defined by corresponding specifications of the company process organisation - such processes must also be possible in which a user can freely decide who, when, should receive which document for inspection, checking, etc.. These freely definable workflows correspond to the circulation folders common in newspapers or magazines, for example, which readers pass on to each other. In CyberEnterprise® (digital) circular files can be created for all documents, but also for any associations to e.g. documents, Excel, Word or pdf files, etc. and passed on electronically between the users. Each user recognises the processes to be processed by him in the folder \"My circulars\". A digital circular should always be used when direct e-mailing of documents between employees is not sufficient in terms of transparency of an entire process, as the employees' e-mail accounts cannot be viewed by third parties. The mask for creating a new circular depends on the progress indicator of the start state of the selected business process. If a new circular is created directly from a document via a menu item that may be present there in the maintenance screen or via the icon is created, the system checks whether this document has already been assigned to a circular with the same business process. If this is the case, the circular cannot be created in this direct way, but the circular must first be created and the document must be assigned to this circular as an association afterwards. A circular is also only entered as a successor document (in addition to the association) if the circular was created directly from a document. ### Instruction: Name this module. ### Response: This module is Tasks."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Tasks serve? ### Response: The purpose of the module Tasks is the following: In addition to enquiries (= planning) and work orders (= processing), digital circulars (= notification) are the third pillar for carrying out tasks. Each document defined in CyberEnterprise® (e.g. invoice, order, goods receipt, etc.) is subject to one or more predefined business processes. Within such business processes, a document passes through the statuses specified by the business process, e.g. an order can have the status \"partially delivered\" with regard to the delivery process. In addition to these processes - which are firmly defined by corresponding specifications of the company process organisation - such processes must also be possible in which a user can freely decide who, when, should receive which document for inspection, checking, etc.. These freely definable workflows correspond to the circulation folders common in newspapers or magazines, for example, which readers pass on to each other. In CyberEnterprise® (digital) circular files can be created for all documents, but also for any associations to e.g. documents, Excel, Word or pdf files, etc. and passed on electronically between the users. Each user recognises the processes to be processed by him in the folder \"My circulars\". A digital circular should always be used when direct e-mailing of documents between employees is not sufficient in terms of transparency of an entire process, as the employees' e-mail accounts cannot be viewed by third parties. The mask for creating a new circular depends on the progress indicator of the start state of the selected business process. If a new circular is created directly from a document via a menu item that may be present there in the maintenance screen or via the icon is created, the system checks whether this document has already been assigned to a circular with the same business process. If this is the case, the circular cannot be created in this direct way, but the circular must first be created and the document must be assigned to this circular as an association afterwards. A circular is also only entered as a successor document (in addition to the association) if the circular was created directly from a document.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sales planning Turnover planning: With this document, order and/or sales planning can be carried out simultaneously. For an order planning, planned/expected sales are entered in a future statistical period. In addition to the planned turnover value and the statistical period, further data such as customer, project, industrial plant, cost centre etc. can be entered. For the purpose of sales planning, sales groups or parts can also be entered with their characteristics and quantities. An order planning made for a certain statistical period should not be deleted in the system if the incoming orders could not be realised. Instead, if the sales volume is still expected, the order planning document should be copied into a new statistics period. (This does not necessarily have to be the following statistical period) This newly copied document will then become the successor to the original planning document. This procedure must be followed to avoid double planning. Successors of an order planning can also be orders or order items. Both the order planning document and the order should have the same statistical period. Deleting an order/sales planning document is only possible in incomplete statistics periods. If a sales planning document becomes a sales planning document by specifying a part and its quantity, it can be further processed logistically by means of an advance requirement. On the basis of the order/sales planning documents, an order entry/sales planning statistic can be created. ### Instruction: Which module is being described? ### Response: The name of this module is Sales planning Turnover planning."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Sales planning Turnover planning used for? ### Response: The purpose of the module Sales planning Turnover planning is the following: With this document, order and/or sales planning can be carried out simultaneously. For an order planning, planned/expected sales are entered in a future statistical period. In addition to the planned turnover value and the statistical period, further data such as customer, project, industrial plant, cost centre etc. can be entered. For the purpose of sales planning, sales groups or parts can also be entered with their characteristics and quantities. An order planning made for a certain statistical period should not be deleted in the system if the incoming orders could not be realised. Instead, if the sales volume is still expected, the order planning document should be copied into a new statistics period. (This does not necessarily have to be the following statistical period) This newly copied document will then become the successor to the original planning document. This procedure must be followed to avoid double planning. Successors of an order planning can also be orders or order items. Both the order planning document and the order should have the same statistical period. Deleting an order/sales planning document is only possible in incomplete statistics periods. If a sales planning document becomes a sales planning document by specifying a part and its quantity, it can be further processed logistically by means of an advance requirement. On the basis of the order/sales planning documents, an order entry/sales planning statistic can be created.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Calculation formula - Rules: Calculation rules, which do not exist as part of a program but as data generated and managed by the user, are represented in the ClassiX® system by objects of class CX_FORMULA. general overview Variable of a formula Constants Operators, arithmetic functions special functions within a formula expression InstantView® and class CX_FORMULA Examples Before a formula can be calculated, values must be assigned to the variables occurring in the formula. This is done automatically with the objects previously registered in the PlugSpace. The variables occurring in a formula can themselves represent a formula or a condition table (object CX_CONDITIONED_BAG). The formula object can determine which variables it needs for the calculation (also in case of a formula in the formula etc.). The module Test Formula constructs a window for the input of variable values. For this purpose an object of the class CX_CONTAINER is used - an object whose only function is to hold any dynamic data fields. The result of a formula calculation can be a value - in case of an arithmetic expression - or TRUE/FALSE as the result of a logical expression. A formula ending with ; will not return a value. Attention: - The formula only calculates when the formula is ended / completed. - Value assignments to external variables are only executed when the formula is ended. ### Instruction: Which module is being described? ### Response: This module is named Calculation formula - Rules."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Calculation formula - Rules used for? ### Response: The module Calculation formula - Rules can be described as follows: Calculation rules, which do not exist as part of a program but as data generated and managed by the user, are represented in the ClassiX® system by objects of class CX_FORMULA. general overview Variable of a formula Constants Operators, arithmetic functions special functions within a formula expression InstantView® and class CX_FORMULA Examples Before a formula can be calculated, values must be assigned to the variables occurring in the formula. This is done automatically with the objects previously registered in the PlugSpace. The variables occurring in a formula can themselves represent a formula or a condition table (object CX_CONDITIONED_BAG). The formula object can determine which variables it needs for the calculation (also in case of a formula in the formula etc.). The module Test Formula constructs a window for the input of variable values. For this purpose an object of the class CX_CONTAINER is used - an object whose only function is to hold any dynamic data fields. The result of a formula calculation can be a value - in case of an arithmetic expression - or TRUE/FALSE as the result of a logical expression. A formula ending with ; will not return a value. Attention: - The formula only calculates when the formula is ended / completed. - Value assignments to external variables are only executed when the formula is ended.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Financial accounting balance carried forward: The balances of G/L and personal accounts (debtors, creditors, employees and commission recipients) can be automatically carried forward from one fiscal year to the following fiscal year. The call can be made either for all accounts or for individual number ranges. For individual accounts it is also possible to enter the balance carried forward manually via the activity 'Post' and select the business transaction 'Opening entry'. ### Instruction: Name this module. ### Response: This module is named Financial accounting balance carried forward."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Financial accounting balance carried forward? ### Response: The module Financial accounting balance carried forward can be described as follows: The balances of G/L and personal accounts (debtors, creditors, employees and commission recipients) can be automatically carried forward from one fiscal year to the following fiscal year. The call can be made either for all accounts or for individual number ranges. For individual accounts it is also possible to enter the balance carried forward manually via the activity 'Post' and select the business transaction 'Opening entry'.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Gantt chart for part requirements (Gozintographs): With this module a gozintograph can be edited interactively in the form of a Gantt chart. Here, the start and end dates and the procurement or throughput times can be changed graphically. These changes take place on a copy of the collective order to be able to carry out simulations or \"if-then\" situations. A check for material availability and feasibility (Available to promise / Capable to promise ATP/CTP) is also possible here (see checks) The scheduling mode (Schedule/Reschedule, Forward/Reverse) is displayed on the right above the graph. By displaying the critical path, it is possible to filter out the parts determining the end date and to process them directly. Only the shortening of lead times along the critical path has a direct effect on the end date. The gozintograph can be called for non-scheduled part requests, for already scheduled part requests with non-scheduled latecomers or for rescheduling a scheduled part request. Scheduled part requirement items are transferred to the Gantt chart for recalculation of the dates frozen with regard to the earliest start date (start no earlier than) and the latest end date (end no later than) when the graphical forward or backward scheduling is called up from the part requirement module. Only in case of a call via the menu item rescheduling, the dates are released - only for not (even partially) provided part requests. The calculated or manually changed dates and procurement or lead times can then be transferred back to the actual collective order (update project). ### Instruction: How is this module called? ### Response: This module is named Gantt chart for part requirements (Gozintographs)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Gantt chart for part requirements (Gozintographs) used for? ### Response: The purpose of the module Gantt chart for part requirements (Gozintographs) is the following: With this module a gozintograph can be edited interactively in the form of a Gantt chart. Here, the start and end dates and the procurement or throughput times can be changed graphically. These changes take place on a copy of the collective order to be able to carry out simulations or \"if-then\" situations. A check for material availability and feasibility (Available to promise / Capable to promise ATP/CTP) is also possible here (see checks) The scheduling mode (Schedule/Reschedule, Forward/Reverse) is displayed on the right above the graph. By displaying the critical path, it is possible to filter out the parts determining the end date and to process them directly. Only the shortening of lead times along the critical path has a direct effect on the end date. The gozintograph can be called for non-scheduled part requests, for already scheduled part requests with non-scheduled latecomers or for rescheduling a scheduled part request. Scheduled part requirement items are transferred to the Gantt chart for recalculation of the dates frozen with regard to the earliest start date (start no earlier than) and the latest end date (end no later than) when the graphical forward or backward scheduling is called up from the part requirement module. Only in case of a call via the menu item rescheduling, the dates are released - only for not (even partially) provided part requests. The calculated or manually changed dates and procurement or lead times can then be transferred back to the actual collective order (update project).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Gantt chart for Supply Chain Management (SCM): With this module the supply chain of an order can be edited interactively in the form of a Gantt chart. The start and end dates and the procurement and throughput times can be changed graphically. These changes take place on a copy of the collective order to be able to carry out simulations or if-then situations. By displaying the critical path, it is possible to filter out the parts determining the end date and to process them directly. Only the shortening of lead times along the critical path has a direct effect on the end date. The calculated or manually changed dates and procurement or lead times can then be transferred back to the actual collective order. ### Instruction: Which module is being described? ### Response: The module being described is Gantt chart for Supply Chain Management (SCM)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Gantt chart for Supply Chain Management (SCM) for me. ### Response: The module Gantt chart for Supply Chain Management (SCM) is used for the following: With this module the supply chain of an order can be edited interactively in the form of a Gantt chart. The start and end dates and the procurement and throughput times can be changed graphically. These changes take place on a copy of the collective order to be able to carry out simulations or if-then situations. By displaying the critical path, it is possible to filter out the parts determining the end date and to process them directly. Only the shortening of lead times along the critical path has a direct effect on the end date. The calculated or manually changed dates and procurement or lead times can then be transferred back to the actual collective order.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Gantt chart: Gantt diagrams are used to graphically represent time sequences of related processes or tasks. If forward scheduling has taken place, a change in the duration of an operation - within the critical path - leads to a postponement of the finish date. If backward scheduling has taken place, a change in the duration of an operation - within the critical path - will result in a postponement of the start date. The termination mode (termination: forward/backward) is displayed on the right above the graph. ### Instruction: How is this module called? ### Response: The name of this module is Gantt chart."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Gantt chart? ### Response: The module Gantt chart serves the purpose of the following: Gantt diagrams are used to graphically represent time sequences of related processes or tasks. If forward scheduling has taken place, a change in the duration of an operation - within the critical path - leads to a postponement of the finish date. If backward scheduling has taken place, a change in the duration of an operation - within the critical path - will result in a postponement of the start date. The termination mode (termination: forward/backward) is displayed on the right above the graph.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Capacity diagram: With this module the capacity utilisation can be displayed graphically. ### Instruction: What is the name of this module? ### Response: This module is Capacity diagram."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Capacity diagram for me. ### Response: The purpose of the module Capacity diagram is as follows: With this module the capacity utilisation can be displayed graphically.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Control account: This module is used to maintain the G/L accounts defined as reconciliation accounts in financial accounting. The special feature of these reconciliation accounts is that partner accounts (customers, suppliers, representatives, employees) are assigned to them. ### Instruction: Name this module. ### Response: This module is Control account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Control account used for? ### Response: The purpose of the module Control account is the following: This module is used to maintain the G/L accounts defined as reconciliation accounts in financial accounting. The special feature of these reconciliation accounts is that partner accounts (customers, suppliers, representatives, employees) are assigned to them.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cash account: This module is used to maintain the G/L accounts defined as cash accounts in financial accounting. The special feature of these cash accounts is that they can be directly assigned to your own business accounts at banks or a cash book. Such assignments are suitable, for example, for automated payment transactions within the framework of online banking. If money accounts in foreign currency are posted to, the respective foreign currency amount of a posting is also displayed in the list view. ### Instruction: What is the name of this module? ### Response: This module is named Cash account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Cash account used for? ### Response: The module Cash account can be described as follows: This module is used to maintain the G/L accounts defined as cash accounts in financial accounting. The special feature of these cash accounts is that they can be directly assigned to your own business accounts at banks or a cash book. Such assignments are suitable, for example, for automated payment transactions within the framework of online banking. If money accounts in foreign currency are posted to, the respective foreign currency amount of a posting is also displayed in the list view.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Account evaluation: If balance sheet and/or P&L accounts (G/L accounts) and/or person accounts (customers, suppliers, employees, commission recipients) are structured by means of classification terms of the type \"balance sheet framework\", account (balance) evaluations can be created by means of this module. Analogous to this module, there is a cost type evaluation for cost accounts (cost type and cost centres) within the framework of business accounting.For each structure main node and sub-nodes, the current debit/credit values with balance of the selected posting period (period costs), the opening balance and the cumulated debit/credit values from the beginning of the fiscal year belonging to the posting period up to the specified accrual period - or optionally up to the end of the corresponding fiscal year - are displayed with the closing balance.If the selected structure contains nodes with the structure ID \"ASSET\" (to identify the active side) and \"LIABILITY\" (to identify the passive side) and if G/L accounts are inserted in it that have the identification balance exchange, the accounts are either suppressed or output according to their active or passive balance. Optionally, the accounts organised in a structure node - with their corresponding period, opening and closing values - can also be output. It is also possible to specify whether or not the person accounts assigned to the totalisation accounts should also be output. For personal accounts, the - freely definable - balance due can also be output. If several domains are assigned to a client, the account evaluation can be called up for individual domains or cumulatively for several domains at the same time. If additional company codes are defined within a client, the account evaluation can be called up for the selected company codes (also subtractively). ### Instruction: What is the name of the module being described? ### Response: The module being described is Account evaluation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Account evaluation serve? ### Response: The purpose of the module Account evaluation is as follows: If balance sheet and/or P&L accounts (G/L accounts) and/or person accounts (customers, suppliers, employees, commission recipients) are structured by means of classification terms of the type \"balance sheet framework\", account (balance) evaluations can be created by means of this module. Analogous to this module, there is a cost type evaluation for cost accounts (cost type and cost centres) within the framework of business accounting.For each structure main node and sub-nodes, the current debit/credit values with balance of the selected posting period (period costs), the opening balance and the cumulated debit/credit values from the beginning of the fiscal year belonging to the posting period up to the specified accrual period - or optionally up to the end of the corresponding fiscal year - are displayed with the closing balance.If the selected structure contains nodes with the structure ID \"ASSET\" (to identify the active side) and \"LIABILITY\" (to identify the passive side) and if G/L accounts are inserted in it that have the identification balance exchange, the accounts are either suppressed or output according to their active or passive balance. Optionally, the accounts organised in a structure node - with their corresponding period, opening and closing values - can also be output. It is also possible to specify whether or not the person accounts assigned to the totalisation accounts should also be output. For personal accounts, the - freely definable - balance due can also be output. If several domains are assigned to a client, the account evaluation can be called up for individual domains or cumulatively for several domains at the same time. If additional company codes are defined within a client, the account evaluation can be called up for the selected company codes (also subtractively).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Commercial property Module Generator: The business object Module Generator creates AppsWarehouse® modules based on templates (*.gen). The following structure is generated. Structure Module Macros Messages Window Basic module Macro Description InitCounter *new* The counter for the class is searched for, if not found one is created. SetListBox SetFormat instructions for the ListBox ListObjects Find all objects of the defined class PickObject SelectOneObject *new* If the search results in 1 hit, the object found is opened in the input window SetOptions *new* Set default options FillDroppedObject *new* It is possible to insert objects of the defined class and structures containing such objects into the list by drag&drop sent received EDIT_XXXX XXXX_CREATED XXXX_CHANGED XXXX_DELETED SelectWin OptionsWin Editing module Macro Description ListObjects If no object is found, an input window is opened. InitModules InitWindowWithObject InitWindowWithObject EditObject Edit object ObjectChanged If the object was changed, the memory button is released. CreateObject Creates object of the defined class SaveObject Save changes to the object RemoveObject Delete object EditNotes *new* EditProceedings *new* sent received EDIT_XXXX LOAD_XXXX LIST_XXXX EDIT_XXXX XXXX_CREATED LIST_XXXX XXXX_CHANGED TEST_XXXX XXXX_DELETED XXXX_DELETED EDIT_COMMENTS COMMENT_CHANGED EDIT_PROCEEDINGS *new* CREATE_LETTER *new* SHOW_PREVIEW COPY_TO_CLIPBOARD *new* EditWin SelectWin Selection module sent received XXXX_SELECTED SELECT_XXXX SelectWin Basic module Window Widgets SelectWin Menu Options Groups ListBoxHeaderGroup: contains the widgets for the search Prompts UniqueIDPmt FString UniqueIDFStr ObjectListView ListBox Buttons OKBtn, CancelBtn OptionsWin Menu Edit -> Set standard settings Notebook TypeWin -> Standard options Groups SearchOptionsGroup - Search Options LimitObjectsGroup: for the number of objects Checkbox SelectOneObjectBox -> immediate transfer in case of a hit ClearListBeforeSearchBox -> Reset list before new search Radio buttons NoLimitRadio: All objects SetLimitRadio: Number of objects Limit100Radio: 100 objects Integer SetLimitStr: for entering the number of objects Status bar Buttons OKBtn. ### Instruction: Which module is being described? ### Response: This module is called Commercial property Module Generator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Commercial property Module Generator serve? ### Response: The module Commercial property Module Generator serves the purpose of the following: The business object Module Generator creates AppsWarehouse® modules based on templates (*.gen). The following structure is generated. Structure Module Macros Messages Window Basic module Macro Description InitCounter *new* The counter for the class is searched for, if not found one is created. SetListBox SetFormat instructions for the ListBox ListObjects Find all objects of the defined class PickObject SelectOneObject *new* If the search results in 1 hit, the object found is opened in the input window SetOptions *new* Set default options FillDroppedObject *new* It is possible to insert objects of the defined class and structures containing such objects into the list by drag&drop sent received EDIT_XXXX XXXX_CREATED XXXX_CHANGED XXXX_DELETED SelectWin OptionsWin Editing module Macro Description ListObjects If no object is found, an input window is opened. InitModules InitWindowWithObject InitWindowWithObject EditObject Edit object ObjectChanged If the object was changed, the memory button is released. CreateObject Creates object of the defined class SaveObject Save changes to the object RemoveObject Delete object EditNotes *new* EditProceedings *new* sent received EDIT_XXXX LOAD_XXXX LIST_XXXX EDIT_XXXX XXXX_CREATED LIST_XXXX XXXX_CHANGED TEST_XXXX XXXX_DELETED XXXX_DELETED EDIT_COMMENTS COMMENT_CHANGED EDIT_PROCEEDINGS *new* CREATE_LETTER *new* SHOW_PREVIEW COPY_TO_CLIPBOARD *new* EditWin SelectWin Selection module sent received XXXX_SELECTED SELECT_XXXX SelectWin Basic module Window Widgets SelectWin Menu Options Groups ListBoxHeaderGroup: contains the widgets for the search Prompts UniqueIDPmt FString UniqueIDFStr ObjectListView ListBox Buttons OKBtn, CancelBtn OptionsWin Menu Edit -> Set standard settings Notebook TypeWin -> Standard options Groups SearchOptionsGroup - Search Options LimitObjectsGroup: for the number of objects Checkbox SelectOneObjectBox -> immediate transfer in case of a hit ClearListBeforeSearchBox -> Reset list before new search Radio buttons NoLimitRadio: All objects SetLimitRadio: Number of objects Limit100Radio: 100 objects Integer SetLimitStr: for entering the number of objects Status bar Buttons OKBtn."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Module Generator for documents without positions: The business object Module Generator creates AppsWarehouse® modules based on templates (*.gen). The following structure is generated.Module generator for documents without itemsThe module generator for documents without items generates four AppsWH modules, a workflow load file, a transaction description load file and extends the EXT and MSG.Instructions for creating a new document without items Generation of the modules/files via the module generator.Extending EditWin by the data fields that are necessary for the description of the document. After this has been done, the SetListBox macro should be adjusted immediately afterwards.Adapting the generated workflow and the generated transaction description to the requirements of the document.If the document should have relevant data fields, which are to be preset by a company role or, for example, a client, the DefaultTransactionWin in the corresponding group must be extended by these data fields. It is important here that the slots used are identical to those in EditWin.A bitmap (with grey and white background) has to be created for the document and in ivFunction.mod the case instruction of the macros G_GetPicture and G_ObjectDescription has to be extended by the new class.In order to use the generated print module it is necessary to create a print document.The ID of this document should be a three-digit letter abbreviation of the class.The document must be assigned to a type or an area (e.g. purchasing, sales, financial accounting, warehouse, etc.).In the INITIALIZE of the print module the variables defaultDocumentID and documentArea should be initialized with the data just defined.The SetWinTitleStart macro must be supplemented by a more appropriate window title. Ex: Create a first draft document: (IN A TEST DATABASE) Inserting the general header and footer into the documentInsert an existing document header into the document, which should be similar in layout to the future document. (Actually, all documents leaving the company should look very similar to each other).This document module must have a new ID and should be given its own name.If the newly created document is now exported and loaded into a new (test) database, the previously used module is not overwritten due to the new ID and the document can now be adapted.The following templates are used ../AppsWH/process.gen - (basic module)../AppsWH/proceedt.gen - (editing module)../AppsWH/procesel.gen - (selection module)../AppsWH/proceprn.gen - (print module)../AppsWH/data/txn-wf/DEFAULT_WORKFLOW.gen - (Workflow)../AppsWH/data/txn-wf/DEFUALT_TRANSACTION_DESCRIPTION.gen - (transaction description)StructureModuleMacrosMessagesWindowBasic module (examp.mod)MacroDescriptionInitCounterThe counter for the class is searched for, if not found one is created.SetListBoxSetFormat instructions for the ListBoxListObjectsFind all objects of the defined classPickObject sentreceivedEDIT_XXXXXXXX_CREATED XXXX_CHANGED XXXX_DELETEDSelectWinOptionsWinEditing module (exampedt.mod)MacroDescriptionSetOptionsUsed to initialise the module with regard to the options and is called up accordingly in the INITIALIZE of the module.CreateSymbolServes to create bitmapsInitBitmapsIn this module, the bitmaps used are created and assigned to variables. (Example: withoutCommentBitmap/withCommentBitmap for the note button)SetTxnManagerLoading the individual transaction descriptionsSetAllTxnManagersLoading all transaction descriptionsListObjectsLists the objects, which are transferred with the LIST - Message, in SelectWin.InitModulesAllerted of EditWin and locks the OK buttonInitWindowWithObject InitWindowWithObject ListBusinessPeriods SetStaffMemberBox EditObjectEdit objectObjectChangedIf the object has been changed, the memory button is released.CreateObjectCreates object of the defined classUpdateObject SaveObjectSave changes to the objectRemoveObjectDelete objectBookObjectPost the receiptUnbookObjectcharge off the documentsentreceivedEDIT_XXXXLOAD_XXXXLIST_XXXXEDIT_XXXXXXXX_CREATEDLIST_XXXXXXXX_CHANGEDTEST_XXXXXXXX_DELETEDXXXX_DELETEDEDIT_COMMENTSCOMMENT_CHANGEDEDIT_PROCEEDINGS CREATE_LETTER SHOW_PREVIEW COPY_TO_CLIPBOARD EditWinSelectWinSelection module (exampsel.mod) sentreceivedXXXX_SELECTEDSELECT_XXXXSelectWinPrint module (exampprn.mod)MacroDescriptionSetWinTitleStartThis macro initializes the window title of the print window. After creating the module, the general title should be converted into a more appropriate one. Basic moduleWindowWidgetsSelectWinMenuOptionsGroupsListBoxHeaderGroup: contains the widgets for the searchPromptsUniqueIDPmtFStringUniqueIDFStrObjectListViewListBoxButtonsOKBtn, CancelBtnOptionsWinMenuEdit -> Set default settingsNotebookTypeWin -> Default OptionsGroupsSearchOptionsGroup - Search Options LimitObjectsGroup: for the number of objects.CheckboxSelectOneObjectBox -> immediate takeover in case of a hit. ClearListBeforeSearchBox -> reset list before new search.Radio buttonsNoLimitRadio: All objects SetLimitRadio: number of objects Limit100Radio: 100 objectsIntegerSetLimitStr: for entering the number of objectsStatus bar ButtonsOKBtn. ### Instruction: What is the name of the module being described? ### Response: The module being described is Module Generator for documents without positions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Module Generator for documents without positions? ### Response: The module Module Generator for documents without positions can be described as follows: The business object Module Generator creates AppsWarehouse® modules based on templates (*.gen). The following structure is generated.Module generator for documents without itemsThe module generator for documents without items generates four AppsWH modules, a workflow load file, a transaction description load file and extends the EXT and MSG.Instructions for creating a new document without items Generation of the modules/files via the module generator.Extending EditWin by the data fields that are necessary for the description of the document. After this has been done, the SetListBox macro should be adjusted immediately afterwards.Adapting the generated workflow and the generated transaction description to the requirements of the document.If the document should have relevant data fields, which are to be preset by a company role or, for example, a client, the DefaultTransactionWin in the corresponding group must be extended by these data fields. It is important here that the slots used are identical to those in EditWin.A bitmap (with grey and white background) has to be created for the document and in ivFunction.mod the case instruction of the macros G_GetPicture and G_ObjectDescription has to be extended by the new class.In order to use the generated print module it is necessary to create a print document.The ID of this document should be a three-digit letter abbreviation of the class.The document must be assigned to a type or an area (e.g. purchasing, sales, financial accounting, warehouse, etc.).In the INITIALIZE of the print module the variables defaultDocumentID and documentArea should be initialized with the data just defined.The SetWinTitleStart macro must be supplemented by a more appropriate window title. Ex: Create a first draft document: (IN A TEST DATABASE) Inserting the general header and footer into the documentInsert an existing document header into the document, which should be similar in layout to the future document. (Actually, all documents leaving the company should look very similar to each other).This document module must have a new ID and should be given its own name.If the newly created document is now exported and loaded into a new (test) database, the previously used module is not overwritten due to the new ID and the document can now be adapted.The following templates are used ../AppsWH/process.gen - (basic module)../AppsWH/proceedt.gen - (editing module)../AppsWH/procesel.gen - (selection module)../AppsWH/proceprn.gen - (print module)../AppsWH/data/txn-wf/DEFAULT_WORKFLOW.gen - (Workflow)../AppsWH/data/txn-wf/DEFUALT_TRANSACTION_DESCRIPTION.gen - (transaction description)StructureModuleMacrosMessagesWindowBasic module (examp.mod)MacroDescriptionInitCounterThe counter for the class is searched for, if not found one is created.SetListBoxSetFormat instructions for the ListBoxListObjectsFind all objects of the defined classPickObject sentreceivedEDIT_XXXXXXXX_CREATED XXXX_CHANGED XXXX_DELETEDSelectWinOptionsWinEditing module (exampedt.mod)MacroDescriptionSetOptionsUsed to initialise the module with regard to the options and is called up accordingly in the INITIALIZE of the module.CreateSymbolServes to create bitmapsInitBitmapsIn this module, the bitmaps used are created and assigned to variables. (Example: withoutCommentBitmap/withCommentBitmap for the note button)SetTxnManagerLoading the individual transaction descriptionsSetAllTxnManagersLoading all transaction descriptionsListObjectsLists the objects, which are transferred with the LIST - Message, in SelectWin.InitModulesAllerted of EditWin and locks the OK buttonInitWindowWithObject InitWindowWithObject ListBusinessPeriods SetStaffMemberBox EditObjectEdit objectObjectChangedIf the object has been changed, the memory button is released.CreateObjectCreates object of the defined classUpdateObject SaveObjectSave changes to the objectRemoveObjectDelete objectBookObjectPost the receiptUnbookObjectcharge off the documentsentreceivedEDIT_XXXXLOAD_XXXXLIST_XXXXEDIT_XXXXXXXX_CREATEDLIST_XXXXXXXX_CHANGEDTEST_XXXXXXXX_DELETEDXXXX_DELETEDEDIT_COMMENTSCOMMENT_CHANGEDEDIT_PROCEEDINGS CREATE_LETTER SHOW_PREVIEW COPY_TO_CLIPBOARD EditWinSelectWinSelection module (exampsel.mod) sentreceivedXXXX_SELECTEDSELECT_XXXXSelectWinPrint module (exampprn.mod)MacroDescriptionSetWinTitleStartThis macro initializes the window title of the print window. After creating the module, the general title should be converted into a more appropriate one. Basic moduleWindowWidgetsSelectWinMenuOptionsGroupsListBoxHeaderGroup: contains the widgets for the searchPromptsUniqueIDPmtFStringUniqueIDFStrObjectListViewListBoxButtonsOKBtn, CancelBtnOptionsWinMenuEdit -> Set default settingsNotebookTypeWin -> Default OptionsGroupsSearchOptionsGroup - Search Options LimitObjectsGroup: for the number of objects.CheckboxSelectOneObjectBox -> immediate takeover in case of a hit. ClearListBeforeSearchBox -> reset list before new search.Radio buttonsNoLimitRadio: All objects SetLimitRadio: number of objects Limit100Radio: 100 objectsIntegerSetLimitStr: for entering the number of objectsStatus bar ButtonsOKBtn."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Summary and balance list of G/L accounts: This module is used to call up the totals and balances list. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into balance sheet and profit and loss accounts. A further option enables the additional output of cost elements posted to a profit and loss account. A difference line is displayed in red if the total of these cost element postings does not match the total costs posted to the P&L account (Find cost element differences). If this option for displaying the cost elements is selected, you can also determine whether the profit and loss account belonging to the cost elements should be displayed at all. A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year. ### Instruction: Tell me the name of this module. ### Response: This module is called Summary and balance list of G/L accounts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Summary and balance list of G/L accounts serve? ### Response: The module Summary and balance list of G/L accounts serves the purpose of the following: This module is used to call up the totals and balances list. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into balance sheet and profit and loss accounts. A further option enables the additional output of cost elements posted to a profit and loss account. A difference line is displayed in red if the total of these cost element postings does not match the total costs posted to the P&L account (Find cost element differences). If this option for displaying the cost elements is selected, you can also determine whether the profit and loss account belonging to the cost elements should be displayed at all. A double click on a list entry navigates - if period values exist - directly to a list of postings, otherwise to an overview of the period balances of the selected fiscal year. By using the right mouse button you always reach the overview of the period balances of the selected account in the selected fiscal year.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Graphical data query wizard: The Graphical Data Query Assistant is used for simple and clear data queries. A results table is compiled by graphical elements and can be saved as a report at the end. ### Instruction: How is this module called? ### Response: This module is Graphical data query wizard."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Graphical data query wizard. ### Response: The purpose of the module Graphical data query wizard is as follows: The Graphical Data Query Assistant is used for simple and clear data queries. A results table is compiled by graphical elements and can be saved as a report at the end.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Help generator: Program for generating a ClassiX® help in HTML format. The help is compiled from the information provided by ClassiX® (SystemObject Call(ParseLib), SystemObject Call(GetModules), modul Call(LoadExternalModule), module Call(GetWindows), TRUE/FALSE modul Call(ReportMessages)). ### Instruction: Tell me the name of this module. ### Response: The module being described is Help generator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Help generator for me. ### Response: The module Help generator serves the purpose of the following: Program for generating a ClassiX® help in HTML format. The help is compiled from the information provided by ClassiX® (SystemObject Call(ParseLib), SystemObject Call(GetModules), modul Call(LoadExternalModule), module Call(GetWindows), TRUE/FALSE modul Call(ReportMessages)).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inventory Reservation Document: ClassiX® offers the possibility to automatically consume excess quantities of disposable parts, i.e. the stock of these parts, before the remaining quantity is procured according to the type of provision - i.e. disposable. For this purpose, the warehouse reserve document is necessary because, in contrast to normal warehouse parts, the available quantity must be reserved directly for requirements (order or parts request item). A warehouse reserve document is automatically generated via the parts request (see: surplus quantities) or the technical release of order items (see: surplus quantities). ### Instruction: Name this module. ### Response: This module is named Inventory Reservation Document."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Inventory Reservation Document for me. ### Response: The module Inventory Reservation Document serves the purpose of the following: ClassiX® offers the possibility to automatically consume excess quantities of disposable parts, i.e. the stock of these parts, before the remaining quantity is procured according to the type of provision - i.e. disposable. For this purpose, the warehouse reserve document is necessary because, in contrast to normal warehouse parts, the available quantity must be reserved directly for requirements (order or parts request item). A warehouse reserve document is automatically generated via the parts request (see: surplus quantities) or the technical release of order items (see: surplus quantities).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts and rolls: This module serves to create and delete parts or service-role relationships. Several roles can be assigned to each part or service, for example, a part can have the role sales article and product. Roles are used to enable the use of the business object. ### Instruction: What is the name of the module being described? ### Response: The module being described is Parts and rolls."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Parts and rolls? ### Response: The module Parts and rolls can be described as follows: This module serves to create and delete parts or service-role relationships. Several roles can be assigned to each part or service, for example, a part can have the role sales article and product. Roles are used to enable the use of the business object.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Import of storage places: This window is used to import storage bins. With the button \"Excel Template\" an Excel file with all column headings can be created and processed. The headings must be exactly as they appear in the file. Other headings will not be processed. Not all headings need to be present and the order is arbitrary. The column \"Storage bin\" and, if no warehouse was selected, the column \"Warehouse\" must be included. If the required columns are missing, no processing takes place. When the import file is processed, an additional column \"Error/ERROR\" is appended to the right end of the column. In this column is documented if an error has occurred. If the error is that no warehouse or storage bin is found in this line, the line is not processed further. Fields Field Description : Warehouse In this DropDownBox you can select the warehouse in which the storage locations are to be created. If the import was started from a warehouse, this warehouse is preselected and the drop-down box cannot be changed. If the DropDownBox is filled and the column \"Stock\" is present, only the rows that point to the same stock are processed. If the DropDownBox is filled and the column \"Stock\" is not available, all rows are processed. The DropDownBox does not have to be filled with a warehouse, but then it is expected that a column \"warehouse\" exists and is filled in the read in file. : Create non-existing storage locations! If this checkbox is active, storage bins which are not found in the selected warehouse are created automatically. Non-existing warehouses will not be created! Buttons button Description Action - back The window is closed. : Excel template An Excel table is created with the possible column headings and a sample row. : Read The Excel file, which can be selected via Windows window, is read in and processed. ### Instruction: Which module is being described? ### Response: This module is called Import of storage places."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Import of storage places. ### Response: The module Import of storage places is used for the following: This window is used to import storage bins. With the button \"Excel Template\" an Excel file with all column headings can be created and processed. The headings must be exactly as they appear in the file. Other headings will not be processed. Not all headings need to be present and the order is arbitrary. The column \"Storage bin\" and, if no warehouse was selected, the column \"Warehouse\" must be included. If the required columns are missing, no processing takes place. When the import file is processed, an additional column \"Error/ERROR\" is appended to the right end of the column. In this column is documented if an error has occurred. If the error is that no warehouse or storage bin is found in this line, the line is not processed further. Fields Field Description : Warehouse In this DropDownBox you can select the warehouse in which the storage locations are to be created. If the import was started from a warehouse, this warehouse is preselected and the drop-down box cannot be changed. If the DropDownBox is filled and the column \"Stock\" is present, only the rows that point to the same stock are processed. If the DropDownBox is filled and the column \"Stock\" is not available, all rows are processed. The DropDownBox does not have to be filled with a warehouse, but then it is expected that a column \"warehouse\" exists and is filled in the read in file. : Create non-existing storage locations! If this checkbox is active, storage bins which are not found in the selected warehouse are created automatically. Non-existing warehouses will not be created! Buttons button Description Action - back The window is closed. : Excel template An Excel table is created with the possible column headings and a sample row. : Read The Excel file, which can be selected via Windows window, is read in and processed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Index Manager: Shows each index in the database with all its information. It also offers additional functions that allow you to maintain the indexes manually or automatically. The Index Manager offers evaluation possibilities of the existing indices by searching for \"double keys\" or \"classes without index\". An index can be active or inactive, i.e. an index is first registered in the index manager with all required data, but it cannot be created/not be active. An overview of which indexes should be created can be found in the guide to indexes for queries. ### Instruction: What is the name of the module being described? ### Response: This module is called Index Manager."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Index Manager for me. ### Response: The module Index Manager is used for the following: Shows each index in the database with all its information. It also offers additional functions that allow you to maintain the indexes manually or automatically. The Index Manager offers evaluation possibilities of the existing indices by searching for \"double keys\" or \"classes without index\". An index can be active or inactive, i.e. an index is first registered in the index manager with all required data, but it cannot be created/not be active. An overview of which indexes should be created can be found in the guide to indexes for queries.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Initialisation: Initialisation of fiscal year, flexitime year or meeting date. ### Instruction: Which module is being described? ### Response: This module is Initialisation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Initialisation? ### Response: The purpose of the module Initialisation is as follows: Initialisation of fiscal year, flexitime year or meeting date.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Customer Supplies: If a customer places an order but already has parts in stock that could be used in this order, a customer provision document can be created from the parts request. To do this, select the part for which the customer provision is to be created in the parts requisition, open the context menu with the right mouse button and select the entry \"Change main disposition-->Customer provision\". When the parts requisition is processed further, more precisely when the first purchase requisition (or straggler purchase requisition) is created, a customer provision document is created for the customer provision item, which automatically pulls the following data from the parts requisition item: Part Description of the part Quantity Deployment date Customer from order header (is entered in the provision header) The created provision is treated as an order in the further business process. This means that a goods receipt must be created as a follow-on document containing the quantity received from the customer. The goods receipt must therefore also follow the usual route of provision from goods receipt. Consequently, the customer provision documents now also appear in the list of open orders. If only a partial quantity of the parts requisition item is to be provided by the supplier, this can only be done in the case of material withdrawals and purchase requisition parts requisition items. The required quantity must be reduced manually! The same applies to the quantity on the stock withdrawal document! For production orders, an auxiliary disposition \"customer provision\" is not possible!. ### Instruction: How is this module called? ### Response: The module being described is Customer Supplies."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Customer Supplies used for? ### Response: The module Customer Supplies serves the purpose of the following: If a customer places an order but already has parts in stock that could be used in this order, a customer provision document can be created from the parts request. To do this, select the part for which the customer provision is to be created in the parts requisition, open the context menu with the right mouse button and select the entry \"Change main disposition-->Customer provision\". When the parts requisition is processed further, more precisely when the first purchase requisition (or straggler purchase requisition) is created, a customer provision document is created for the customer provision item, which automatically pulls the following data from the parts requisition item: Part Description of the part Quantity Deployment date Customer from order header (is entered in the provision header) The created provision is treated as an order in the further business process. This means that a goods receipt must be created as a follow-on document containing the quantity received from the customer. The goods receipt must therefore also follow the usual route of provision from goods receipt. Consequently, the customer provision documents now also appear in the list of open orders. If only a partial quantity of the parts requisition item is to be provided by the supplier, this can only be done in the case of material withdrawals and purchase requisition parts requisition items. The required quantity must be reduced manually! The same applies to the quantity on the stock withdrawal document! For production orders, an auxiliary disposition \"customer provision\" is not possible!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Assembly cost allocation book: Within the scope of an intercompany allocation, the assembly cost allocation book is used to post registered assembly certificates in the financial accounting. For this purpose, the costs to be borne by the various cost centres of different, affiliated companies are booked between the companies via clearing accounts in the various companies (company codes). The corresponding documents can be filtered using various selection criteria. In addition to the filtered documents, the list also shows the initial account assignment belonging to each assembly certificate. Thus the assembly cost allocation book can also be used for control and evaluation. If the client's assembly certificates are divided into individual domains, the certificates from the domain logged on are displayed first, but you can switch to other domains or display the assembly certificates from all domains. ### Instruction: How is this module called? ### Response: This module is called Assembly cost allocation book."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Assembly cost allocation book used for? ### Response: The module Assembly cost allocation book can be described as follows: Within the scope of an intercompany allocation, the assembly cost allocation book is used to post registered assembly certificates in the financial accounting. For this purpose, the costs to be borne by the various cost centres of different, affiliated companies are booked between the companies via clearing accounts in the various companies (company codes). The corresponding documents can be filtered using various selection criteria. In addition to the filtered documents, the list also shows the initial account assignment belonging to each assembly certificate. Thus the assembly cost allocation book can also be used for control and evaluation. If the client's assembly certificates are divided into individual domains, the certificates from the domain logged on are displayed first, but you can switch to other domains or display the assembly certificates from all domains.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Intrastat declaration: In the context of the compilation of intra-trade statistics by the Federal Statistical Office of the Federal Republic of Germany, enterprises are required to report their trade in goods to and from other EU countries. The AppsWarehouse® module for Intrastat reporting compiles these data from incoming goods, direct deliveries and outgoing delivery notes for specific periods and prepares them for online transmission via the Internet to the Federal Statistical Office. For such Internet registrations, the Federal Statistical Office provides the so-called IDEV reporting system (Internet Data Collection in the Network of the Federal and Länder Statistical Offices) https://www-idev.destatis.de/idev/.Further information on reporting in intra-trade can be found at https://www-idev.destatis.de/idev/doc/intra/hilfe.html.Instructions for completing the IntraStat reports can be found at https://www-idev.destatis.de/idev/doc/intra/doc/Intrahandel_Leitfaden.pdf. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Intrastat declaration."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Intrastat declaration used for? ### Response: The purpose of the module Intrastat declaration is as follows: In the context of the compilation of intra-trade statistics by the Federal Statistical Office of the Federal Republic of Germany, enterprises are required to report their trade in goods to and from other EU countries. The AppsWarehouse® module for Intrastat reporting compiles these data from incoming goods, direct deliveries and outgoing delivery notes for specific periods and prepares them for online transmission via the Internet to the Federal Statistical Office. For such Internet registrations, the Federal Statistical Office provides the so-called IDEV reporting system (Internet Data Collection in the Network of the Federal and Länder Statistical Offices) https://www-idev.destatis.de/idev/.Further information on reporting in intra-trade can be found at https://www-idev.destatis.de/idev/doc/intra/hilfe.html.Instructions for completing the IntraStat reports can be found at https://www-idev.destatis.de/idev/doc/intra/doc/Intrahandel_Leitfaden.pdf.."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Intrastat declaration used for? ### Response: The purpose of the module Intrastat declaration is as follows: In the context of the compilation of intra-trade statistics by the Federal Statistical Office of the Federal Republic of Germany, enterprises are required to report their trade in goods to and from other EU countries. The AppsWarehouse® module for Intrastat reporting compiles these data from incoming goods, direct deliveries and outgoing delivery notes for specific periods and prepares them for online transmission via the Internet to the Federal Statistical Office. For such Internet registrations, the Federal Statistical Office provides the so-called IDEV reporting system (Internet Data Collection in the Network of the Federal and Länder Statistical Offices) https://www-idev.destatis.de/idev/.Further information on reporting in intra-trade can be found at https://www-idev.destatis.de/idev/doc/intra/hilfe.html.Instructions for completing the IntraStat reports can be found at https://www-idev.destatis.de/idev/doc/intra/doc/Intrahandel_Leitfaden.pdf.. ### Context: This is the description of EU Final Auditing Window in Intrastat declaration: This window offers the possibility to list all final invoices for a pre-settable period. The total revenue of the final invoices without freight surcharges is displayed and compared to the total value of all Intrastat declarations reported via delivery notes In this way, a plausibility check can be performed on all reported goods movements. ### Instruction: What is the name of this window? ### Response: This window is EU Final Auditing Window in Intrastat declaration."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the window EU Final Auditing Window in Intrastat declaration used for? ### Response: The purpose of the window EU Final Auditing Window in Intrastat declaration is the following: This window offers the possibility to list all final invoices for a pre-settable period. The total revenue of the final invoices without freight surcharges is displayed and compared to the total value of all Intrastat declarations reported via delivery notes In this way, a plausibility check can be performed on all reported goods movements.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inventory analysis: With this module, inventories are analysed in order to be able to draw conclusions about the quality of inventory accounting from completed inventories in the past, on the one hand, and to be able to check first of all whether the scope of the counting of inventories can be reduced by means of inventory sampling procedures, on the other. If a warehouse is suitable for inventory sampling, the samples can be drawn and checked from this module. ### Instruction: How is this module called? ### Response: This module is Inventory analysis."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Inventory analysis serve? ### Response: The module Inventory analysis serves the purpose of the following: With this module, inventories are analysed in order to be able to draw conclusions about the quality of inventory accounting from completed inventories in the past, on the one hand, and to be able to check first of all whether the scope of the counting of inventories can be reduced by means of inventory sampling procedures, on the other. If a warehouse is suitable for inventory sampling, the samples can be drawn and checked from this module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inventory list and evaluation: In this window you can get a quick overview of the current stock levels, the stock level of the last or the annual inventory. ### Instruction: How is this module called? ### Response: The name of this module is Inventory list and evaluation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Inventory list and evaluation used for? ### Response: The module Inventory list and evaluation serves the purpose of the following: In this window you can get a quick overview of the current stock levels, the stock level of the last or the annual inventory.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Analyse inventory(s): With this app one or more inventories can be analysed together. ### Instruction: What is the name of this module? ### Response: This module is named Analyse inventory(s)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Analyse inventory(s) used for? ### Response: The module Analyse inventory(s) is used for the following: With this app one or more inventories can be analysed together.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inventory checks: This app summarises various test routines for the proper operation of a warehouse with Hestia WMS. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Inventory checks."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Inventory checks? ### Response: The purpose of the module Inventory checks is as follows: This app summarises various test routines for the proper operation of a warehouse with Hestia WMS.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Frequency and value distribution: With this app, previously selected inventory items can be divided into freely selectable value ranges. This provides an overview of the value distribution of inventory items, which is particularly useful for stratified inventory sampling. The BIRT reports \"Frequency distribution\" and \"Lorenz curve\" are available as standard reports. ### Instruction: What is the name of the module being described? ### Response: This module is Frequency and value distribution."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Frequency and value distribution. ### Response: The purpose of the module Frequency and value distribution is as follows: With this app, previously selected inventory items can be divided into freely selectable value ranges. This provides an overview of the value distribution of inventory items, which is particularly useful for stratified inventory sampling. The BIRT reports \"Frequency distribution\" and \"Lorenz curve\" are available as standard reports.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Import book inventory from materials management system: With this app you can import stock data exported from a materials management system as a file into the ClassiX system. ### Instruction: Tell me the name of this module. ### Response: This module is named Import book inventory from materials management system."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Import book inventory from materials management system serve? ### Response: The purpose of the module Import book inventory from materials management system is as follows: With this app you can import stock data exported from a materials management system as a file into the ClassiX system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stratification: In this window, an inventory sampling can be carried out for inventory documents using the stratification procedure. ### Instruction: What is the name of this module? ### Response: The name of this module is Stratification."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Stratification. ### Response: The module Stratification is used for the following: In this window, an inventory sampling can be carried out for inventory documents using the stratification procedure.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Recording a count: With this app, the counting results of an inventory can be recorded. The app is designed in such a way that it can also be operated on a tablet PC or a smart phone. ### Instruction: What is the name of the module being described? ### Response: This module is called Recording a count."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Recording a count used for? ### Response: The module Recording a count is used for the following: With this app, the counting results of an inventory can be recorded. The app is designed in such a way that it can also be operated on a tablet PC or a smart phone.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inventory: This app supports the recording of current inventories (so-called stock corrections) as well as annual inventories in the form of one-time or permanent inventories. Since an inventory is supposed to represent a comparison/check of the (book) stocks in the DP system with the actual stocks in the warehouse, inventories are initially generated from data in the DP. In combination with the inventory analysis app, inventory sampling is also supported. Inventories are an important part of monthly and annual financial statements. As part of accounting, inventories are subject to strict organisational guidelines. ### Instruction: How is this module called? ### Response: The name of this module is Inventory."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Inventory used for? ### Response: The purpose of the module Inventory is the following: This app supports the recording of current inventories (so-called stock corrections) as well as annual inventories in the form of one-time or permanent inventories. Since an inventory is supposed to represent a comparison/check of the (book) stocks in the DP system with the actual stocks in the warehouse, inventories are initially generated from data in the DP. In combination with the inventory analysis app, inventory sampling is also supported. Inventories are an important part of monthly and annual financial statements. As part of accounting, inventories are subject to strict organisational guidelines.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Accounting position: Order items can be invoiced via invoice items. Invoice items are always part of an invoice. ### Instruction: What is the name of this module? ### Response: This module is called Accounting position."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Accounting position serve? ### Response: The purpose of the module Accounting position is as follows: Order items can be invoiced via invoice items. Invoice items are always part of an invoice.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Recurring outgoing invoice: This app is primarily intended for the creation of recurring outgoing invoices. In the second place, it is also possible to create evaluations of already created recurring A/R invoices or an overview of all recurring A/R invoices. A recurring A/R invoice to be issued can be defined via an order in two ways. Firstly, a sales order can be of the type \"maintenance contract\" and a payment condition of the type \"recurring payment\" and the settlement type \"lump sum payment\". This type of recurring A/R invoice is useful if, for example, the invoice is for flat-rate maintenance. A second way of defining a recurring A/R invoice is to enter an order item with a payment term of the \"recurring payment\" type. This option can also be used, for example, to bill for maintenance if the maintenance does not have to be paid as a lump sum (fixed price), but rather depending on a quantity (price per unit or per licence). In this case, the order item defines in more detail the amount of maintenance (e.g.: 15 licences * 100€/licence = 1,500€) and the payment conditions of the type \"recurring payment\" define the billing period (e.g. monthly, yearly, etc.). The rent for software, for example, can also be invoiced in this way. The preparation of such recurring outgoing invoices is based on the following rules: An A/R invoice is always issued on the first day of the period entered on the recurring payment term. The period (\"Check by date\") is used to check whether a recurring outgoing invoice should be issued by this date. Based on the interval defined in the condition, the system automatically checks how often and when the recurring outgoing invoice is to be created. Already settled, recurring outgoing invoices can be listed as an option. After listing the recurring outgoing invoices to be issued, the outgoing invoices can be generated for the selected entries by clicking on the invoice button in the toolbar. Items are combined to one A/R invoice if the order and the due date are identical. In this way, orders with different recurring payment items (e.g. 30 licenses as monthly rent + 1 monthly maintenance flat rate) can be settled via one invoice. ### Instruction: Name this module. ### Response: This module is named Recurring outgoing invoice."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Recurring outgoing invoice for me. ### Response: The purpose of the module Recurring outgoing invoice is the following: This app is primarily intended for the creation of recurring outgoing invoices. In the second place, it is also possible to create evaluations of already created recurring A/R invoices or an overview of all recurring A/R invoices. A recurring A/R invoice to be issued can be defined via an order in two ways. Firstly, a sales order can be of the type \"maintenance contract\" and a payment condition of the type \"recurring payment\" and the settlement type \"lump sum payment\". This type of recurring A/R invoice is useful if, for example, the invoice is for flat-rate maintenance. A second way of defining a recurring A/R invoice is to enter an order item with a payment term of the \"recurring payment\" type. This option can also be used, for example, to bill for maintenance if the maintenance does not have to be paid as a lump sum (fixed price), but rather depending on a quantity (price per unit or per licence). In this case, the order item defines in more detail the amount of maintenance (e.g.: 15 licences * 100€/licence = 1,500€) and the payment conditions of the type \"recurring payment\" define the billing period (e.g. monthly, yearly, etc.). The rent for software, for example, can also be invoiced in this way. The preparation of such recurring outgoing invoices is based on the following rules: An A/R invoice is always issued on the first day of the period entered on the recurring payment term. The period (\"Check by date\") is used to check whether a recurring outgoing invoice should be issued by this date. Based on the interval defined in the condition, the system automatically checks how often and when the recurring outgoing invoice is to be created. Already settled, recurring outgoing invoices can be listed as an option. After listing the recurring outgoing invoices to be issued, the outgoing invoices can be generated for the selected entries by clicking on the invoice button in the toolbar. Items are combined to one A/R invoice if the order and the due date are identical. In this way, orders with different recurring payment items (e.g. 30 licenses as monthly rent + 1 monthly maintenance flat rate) can be settled via one invoice.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Part master data: The ClassiX® system distinguishes between a part and the possible roles of a part. A part itself contains the descriptive data that can be named regardless of its use. For example, a part could be completely described by \"carpet\". Depending on its use, further data entities or roles are obtained: If the \"carpet\" is sold, then sales-specific data such as sales price, is maintained in the role sales item . Further roles would be order article (with data like main supplier, last purchase price) , production part (with data like bill of material, routing, lot size), etc. In ClassiX® any roles can be assigned to a part.Furthermore, ClassiX® distinguishes between single part, sub-part and variant part:A variant part describes a group of things or parts that are distinguished by certain characteristics: For example, \"carpet\" can be distinguished by colour and width. We then say that the variant part \"carpeting\" is described by the characteristic bar with the characteristics colour and width.A subpart is a unique characteristic of a variant part, e.g. \"Carpet: Colour red, width 4m\" . There is a direct assignment to a variant part, in our example to the variant part \"carpet\". Sub-parts can be detached (decoupled) from a variant part at any time and thus become an individual part.Individual parts are not variant parts and are not subordinate to a variant part. Individual parts can, however, be subsequently assigned (coupled) to variant parts. Usually, most EDP systems only support single parts.The advantage of processing with variant parts is that previously unknown characteristics of a part do not always have to lead to data entry. For example, if a customer wants a \"carpet\" with the colour pink and a \"carpet\" of this colour has never been processed before, this \"carpet\" can be ordered directly from the supplier as a variant part with the new characteristic pink without entering a new order article.The characteristic bar of a variant part consists of various characteristics or attributes. In our example above, these were the attributes colour and size . The attribute size can also be a formula attribute, i.e. it is calculated from the attributes\"length times width\". In this case, the attributes length and width must be specified in the subpart.The variant part \"carpet\" can of course be specified more precisely by further attributes. For example, material type (such as wool, plastic, or similar), pile thickness (in mm), pattern, etc. would be possible. One could even go so far as to define all carpets in the world as a sub-part of only one variant part. However, this would require an increase in the number of characteristics to be able to describe each carpet in a sufficiently distinguishable way from the others.To what extent parts are described with different variant parts - or whether variant parts are used at all - depends very much on the individual case. A DIY store may have only a few (or even only one) \"carpet\" variants, whereas a carpet manufacturer will prefer a more structured structure of its \"carpet\" variants. ### Instruction: Which module is being described? ### Response: The name of this module is Part master data."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Part master data serve? ### Response: The module Part master data is used for the following: The ClassiX® system distinguishes between a part and the possible roles of a part. A part itself contains the descriptive data that can be named regardless of its use. For example, a part could be completely described by \"carpet\". Depending on its use, further data entities or roles are obtained: If the \"carpet\" is sold, then sales-specific data such as sales price, is maintained in the role sales item . Further roles would be order article (with data like main supplier, last purchase price) , production part (with data like bill of material, routing, lot size), etc. In ClassiX® any roles can be assigned to a part.Furthermore, ClassiX® distinguishes between single part, sub-part and variant part:A variant part describes a group of things or parts that are distinguished by certain characteristics: For example, \"carpet\" can be distinguished by colour and width. We then say that the variant part \"carpeting\" is described by the characteristic bar with the characteristics colour and width.A subpart is a unique characteristic of a variant part, e.g. \"Carpet: Colour red, width 4m\" . There is a direct assignment to a variant part, in our example to the variant part \"carpet\". Sub-parts can be detached (decoupled) from a variant part at any time and thus become an individual part.Individual parts are not variant parts and are not subordinate to a variant part. Individual parts can, however, be subsequently assigned (coupled) to variant parts. Usually, most EDP systems only support single parts.The advantage of processing with variant parts is that previously unknown characteristics of a part do not always have to lead to data entry. For example, if a customer wants a \"carpet\" with the colour pink and a \"carpet\" of this colour has never been processed before, this \"carpet\" can be ordered directly from the supplier as a variant part with the new characteristic pink without entering a new order article.The characteristic bar of a variant part consists of various characteristics or attributes. In our example above, these were the attributes colour and size . The attribute size can also be a formula attribute, i.e. it is calculated from the attributes\"length times width\". In this case, the attributes length and width must be specified in the subpart.The variant part \"carpet\" can of course be specified more precisely by further attributes. For example, material type (such as wool, plastic, or similar), pile thickness (in mm), pattern, etc. would be possible. One could even go so far as to define all carpets in the world as a sub-part of only one variant part. However, this would require an increase in the number of characteristics to be able to describe each carpet in a sufficiently distinguishable way from the others.To what extent parts are described with different variant parts - or whether variant parts are used at all - depends very much on the individual case. A DIY store may have only a few (or even only one) \"carpet\" variants, whereas a carpet manufacturer will prefer a more structured structure of its \"carpet\" variants.."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Part master data serve? ### Response: The module Part master data is used for the following: The ClassiX® system distinguishes between a part and the possible roles of a part. A part itself contains the descriptive data that can be named regardless of its use. For example, a part could be completely described by \"carpet\". Depending on its use, further data entities or roles are obtained: If the \"carpet\" is sold, then sales-specific data such as sales price, is maintained in the role sales item . Further roles would be order article (with data like main supplier, last purchase price) , production part (with data like bill of material, routing, lot size), etc. In ClassiX® any roles can be assigned to a part.Furthermore, ClassiX® distinguishes between single part, sub-part and variant part:A variant part describes a group of things or parts that are distinguished by certain characteristics: For example, \"carpet\" can be distinguished by colour and width. We then say that the variant part \"carpeting\" is described by the characteristic bar with the characteristics colour and width.A subpart is a unique characteristic of a variant part, e.g. \"Carpet: Colour red, width 4m\" . There is a direct assignment to a variant part, in our example to the variant part \"carpet\". Sub-parts can be detached (decoupled) from a variant part at any time and thus become an individual part.Individual parts are not variant parts and are not subordinate to a variant part. Individual parts can, however, be subsequently assigned (coupled) to variant parts. Usually, most EDP systems only support single parts.The advantage of processing with variant parts is that previously unknown characteristics of a part do not always have to lead to data entry. For example, if a customer wants a \"carpet\" with the colour pink and a \"carpet\" of this colour has never been processed before, this \"carpet\" can be ordered directly from the supplier as a variant part with the new characteristic pink without entering a new order article.The characteristic bar of a variant part consists of various characteristics or attributes. In our example above, these were the attributes colour and size . The attribute size can also be a formula attribute, i.e. it is calculated from the attributes\"length times width\". In this case, the attributes length and width must be specified in the subpart.The variant part \"carpet\" can of course be specified more precisely by further attributes. For example, material type (such as wool, plastic, or similar), pile thickness (in mm), pattern, etc. would be possible. One could even go so far as to define all carpets in the world as a sub-part of only one variant part. However, this would require an increase in the number of characteristics to be able to describe each carpet in a sufficiently distinguishable way from the others.To what extent parts are described with different variant parts - or whether variant parts are used at all - depends very much on the individual case. A DIY store may have only a few (or even only one) \"carpet\" variants, whereas a carpet manufacturer will prefer a more structured structure of its \"carpet\" variants.. ### Context: This is the description of Input Window in Part master data: This window is used to maintain the part master. You can select a part by entering the desired number in the Number field and confirming with RETURN. If several parts with the entered number exist, the selection window with these parts is displayed. If you want to call up the list window, you can select the menu item \"Search\". In the menu under \"Edit -> Variants -> Filter part number\" you can set which part type can be searched for in the field number. When you create a new part, you should first determine whether it is a single part, a variant part or a subpart (Edit -> Variant part -> Part type). The part number for single and variant parts should be unique. When creating a sub-part, the 'Variant part' field appears to select the variant part to which the sub-part is to be assigned. Then assign a part number that makes sense to fit into the part master. Subparts can be created very easily by first calling up its variant part and then pressing the 'Insert' button in the list of subparts. A subpart is then automatically created, linked to the previously called variant and you only have to maintain the specific attributes / characteristics of the part. Existing subparts can be copied by right-clicking on the subpart to be copied in the subpart list of the variant part and selecting \"Copy\". All part data is copied to the new part, including all characteristic settings as well as MRP and stock account settings. Part roles and provision data on the logistics account are not copied. You can create a new part role by calling up the corresponding menu item in the \"Edit\" menu. If the part role has already been defined, it is indicated by a button in the toolbar. You can change the stock data of the part with the button or the menu item \"Stock account\" to view and change it. With a tick in front of Spare part or QA part you can declare the new part as a spare part or provide it for QA inspection. In the lower section of the window, under Characteristics, you can insert or delete characteristics. Save your data with OK. You can use the validity to exclude individual parts that are no longer to be used from the current part master. It should be noted that this also has an influence on parts lists and stock levels. Invalid parts can lead to error messages if they have not been replaced. To be able to edit existing parts, select the corresponding part via the selection window by double-clicking on it. Via 'Edit' you can change search terms, insert and create characteristics, jump to the warehouse account, the purchasing data, etc. and edit them. Since non-controlling attributes can be assigned to each subpart, they appear grey in the list. The column headings of these attributes change depending on which subpart you have selected. Controlling attributes are shown in turquoise. Subparts can be decoupled from the variant part and then treated as individual parts in the system. This way, the part could then be declared invalid, for example. A picture can be stored for a part in the \"Picture\" tab. This is then saved in the database. A picture can be loaded via the button \"Select picture\". The radio buttons allow switching between the display in original size and the dynamically adjusted view, where the image is displayed in the current window size. ### Instruction: Name this window. ### Response: This window is named Input Window in Part master data."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the window Input Window in Part master data used for? ### Response: The purpose of the window Input Window in Part master data is the following: This window is used to maintain the part master. You can select a part by entering the desired number in the Number field and confirming with RETURN. If several parts with the entered number exist, the selection window with these parts is displayed. If you want to call up the list window, you can select the menu item \"Search\". In the menu under \"Edit -> Variants -> Filter part number\" you can set which part type can be searched for in the field number. When you create a new part, you should first determine whether it is a single part, a variant part or a subpart (Edit -> Variant part -> Part type). The part number for single and variant parts should be unique. When creating a sub-part, the 'Variant part' field appears to select the variant part to which the sub-part is to be assigned. Then assign a part number that makes sense to fit into the part master. Subparts can be created very easily by first calling up its variant part and then pressing the 'Insert' button in the list of subparts. A subpart is then automatically created, linked to the previously called variant and you only have to maintain the specific attributes / characteristics of the part. Existing subparts can be copied by right-clicking on the subpart to be copied in the subpart list of the variant part and selecting \"Copy\". All part data is copied to the new part, including all characteristic settings as well as MRP and stock account settings. Part roles and provision data on the logistics account are not copied. You can create a new part role by calling up the corresponding menu item in the \"Edit\" menu. If the part role has already been defined, it is indicated by a button in the toolbar. You can change the stock data of the part with the button or the menu item \"Stock account\" to view and change it. With a tick in front of Spare part or QA part you can declare the new part as a spare part or provide it for QA inspection. In the lower section of the window, under Characteristics, you can insert or delete characteristics. Save your data with OK. You can use the validity to exclude individual parts that are no longer to be used from the current part master. It should be noted that this also has an influence on parts lists and stock levels. Invalid parts can lead to error messages if they have not been replaced. To be able to edit existing parts, select the corresponding part via the selection window by double-clicking on it. Via 'Edit' you can change search terms, insert and create characteristics, jump to the warehouse account, the purchasing data, etc. and edit them. Since non-controlling attributes can be assigned to each subpart, they appear grey in the list. The column headings of these attributes change depending on which subpart you have selected. Controlling attributes are shown in turquoise. Subparts can be decoupled from the variant part and then treated as individual parts in the system. This way, the part could then be declared invalid, for example. A picture can be stored for a part in the \"Picture\" tab. This is then saved in the database. A picture can be loaded via the button \"Select picture\". The radio buttons allow switching between the display in original size and the dynamically adjusted view, where the image is displayed in the current window size.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Periodised use of parts: This module is used to search for specific movements of a part in the context of orders and part requests. A user is thus given the possibility to see, for example, when a part was sent to a customer. This module is intended as an aid for service/sales. Related to this are the modules Parts Usage (intended for use by technology) and Parts Consumption (intended for use by logistics). If you generally want to evaluate the use or non-use of a part in a certain period, you can do this by means of an inspection run. The selection can be limited according to document types (orders, parts requests, parts lists). The search for part usages (by ticking parts lists) can take a very long time (see also the parts usage module), the use in order items and parts requests runs via the operation folders of the part and is therefore faster. It should be noted here that the period delimitation for orders is based on the date of the order and not, for example, on the date of delivery. The parts are selected by means of the part selection window, which opens after pressing the toolbar button opens, or simply dragged into the list with the mouse. Partial rolls are also accepted here. Double-clicking opens the editing mask of the selected document. ### Instruction: Which module is being described? ### Response: The name of this module is Periodised use of parts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Periodised use of parts? ### Response: The module Periodised use of parts serves the purpose of the following: This module is used to search for specific movements of a part in the context of orders and part requests. A user is thus given the possibility to see, for example, when a part was sent to a customer. This module is intended as an aid for service/sales. Related to this are the modules Parts Usage (intended for use by technology) and Parts Consumption (intended for use by logistics). If you generally want to evaluate the use or non-use of a part in a certain period, you can do this by means of an inspection run. The selection can be limited according to document types (orders, parts requests, parts lists). The search for part usages (by ticking parts lists) can take a very long time (see also the parts usage module), the use in order items and parts requests runs via the operation folders of the part and is therefore faster. It should be noted here that the period delimitation for orders is based on the date of the order and not, for example, on the date of delivery. The parts are selected by means of the part selection window, which opens after pressing the toolbar button opens, or simply dragged into the list with the mouse. Partial rolls are also accepted here. Double-clicking opens the editing mask of the selected document.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts Disposition: With this module, released (order-specific) production parts lists are selected before or for the creation of a gozintograph and combined to a common production lot/order network. The button \"Select orders\" lists the possible customer orders, stock orders and preliminary requirements. Identical or similar parts, which are also on schedule, can now be selected - even across orders - as one production lot, for which a single, common gozintograph is then generated. At the moment, customer orders, stock orders and advance requirements cannot be planned together. For example, several sales order items or stock order items may be combined, but not, for example, a sales order item and a preliminary requirements item. Although the actual further processing of the gozintograph generated in this way takes place in the\"Parts request\" module, optional specifications for the automated further processing of the gozintograph can already be made in this parts scheduling module: Automatic determination of the disposition type, the procurement time and execution of a first parts scheduling as forward or backward scheduling. During the automatic construction of the gozintograph, variant parts are checked again to see if the feature bar is fully developed. If this is not the case, the construction of the Gozintograph is aborted. (A corresponding \"Test Create Gozintograph\" can be carried out in advance). In the case of variant parts, a new attempt is also made to find a suitable lower part: if this is successful, the variant part is replaced by the lower part in the gozintograph. The gozintograph is built up in two phases, the progress of which is shown in the bottom status line of the mask: Phase: Sorting the parts lists according to parts and production stages Phase: Building the Gozintograph Important note: Basically all parts of the selected production parts lists are transferred to the Gozintograph. There is, however, one exception: If BOM items have been marked as\"constructive assembly\" in the master data, these entries will be read over, only the parts underneath (= the BOM items of the BOM item marked as constructive assembly) will be included in the Gozintograph - increased by one production level or decreased by one disposition level. Although in the modules for BOM maintenance the indicator\"constructive assembly\" can only be set if the part is an MRP production part, this is checked again in phase 2: The identification\"constructive assembly\" is ignored exactly if a part is no longer an MRP production part. ### Instruction: What is the name of the module being described? ### Response: This module is called Parts Disposition."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Parts Disposition used for? ### Response: The module Parts Disposition is used for the following: With this module, released (order-specific) production parts lists are selected before or for the creation of a gozintograph and combined to a common production lot/order network. The button \"Select orders\" lists the possible customer orders, stock orders and preliminary requirements. Identical or similar parts, which are also on schedule, can now be selected - even across orders - as one production lot, for which a single, common gozintograph is then generated. At the moment, customer orders, stock orders and advance requirements cannot be planned together. For example, several sales order items or stock order items may be combined, but not, for example, a sales order item and a preliminary requirements item. Although the actual further processing of the gozintograph generated in this way takes place in the\"Parts request\" module, optional specifications for the automated further processing of the gozintograph can already be made in this parts scheduling module: Automatic determination of the disposition type, the procurement time and execution of a first parts scheduling as forward or backward scheduling. During the automatic construction of the gozintograph, variant parts are checked again to see if the feature bar is fully developed. If this is not the case, the construction of the Gozintograph is aborted. (A corresponding \"Test Create Gozintograph\" can be carried out in advance). In the case of variant parts, a new attempt is also made to find a suitable lower part: if this is successful, the variant part is replaced by the lower part in the gozintograph. The gozintograph is built up in two phases, the progress of which is shown in the bottom status line of the mask: Phase: Sorting the parts lists according to parts and production stages Phase: Building the Gozintograph Important note: Basically all parts of the selected production parts lists are transferred to the Gozintograph. There is, however, one exception: If BOM items have been marked as\"constructive assembly\" in the master data, these entries will be read over, only the parts underneath (= the BOM items of the BOM item marked as constructive assembly) will be included in the Gozintograph - increased by one production level or decreased by one disposition level. Although in the modules for BOM maintenance the indicator\"constructive assembly\" can only be set if the part is an MRP production part, this is checked again in phase 2: The identification\"constructive assembly\" is ignored exactly if a part is no longer an MRP production part.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Selection of finished and exploded parts lists: Selection window for sales order, stock order and advance requirement items that have a completely exploded and technically released bill of materials. ### Instruction: How is this module called? ### Response: The name of this module is Selection of finished and exploded parts lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Selection of finished and exploded parts lists. ### Response: The module Selection of finished and exploded parts lists is used for the following: Selection window for sales order, stock order and advance requirement items that have a completely exploded and technically released bill of materials.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Search for parts (logistic): This window is used to search for parts based on various logistical criteria or filters easily visible in the window. Normally this window is called up by another window, i.e. function, searches for a certain parts list and passes it back to the outgoing window. There the transferred parts list can be filtered again!. ### Instruction: How is this module called? ### Response: This module is named Search for parts (logistic)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Search for parts (logistic)? ### Response: The purpose of the module Search for parts (logistic) is the following: This window is used to search for parts based on various logistical criteria or filters easily visible in the window. Normally this window is called up by another window, i.e. function, searches for a certain parts list and passes it back to the outgoing window. There the transferred parts list can be filtered again!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts Variance Analyser: The constantly changing requirements in the markets lead to a constant adaptation and expansion of the own product range (external variance). In addition, the company's own engineering and production also contributes to changes in the parts used (internal variance). This external and internal variance often leads to a constant growth of the own parts base and can lead to increasing difficulties to configure the own products customer-specific and error-free.Carefully constructed parts classes or other ontologies can help to keep an overview and order in the parts master, but they usually cannot prevent the parts master from growing per se. Also missing is the definition of a configuration logic for the own products.By introducing sustainable variant management, the growth of the parts master can be slowed down sustainably, which automatically leads to an increased overview, improved order in the parts master and overall to improved efficiency in the production process. On the other hand, the necessary configuration logic for one's own product range results almost in parallel.For this purpose, it is first necessary to find \"similar\" parts in the part master, i.e. to find and structure groups of parts in such a way that the individual members of a group can only be unambiguously described by different versions of one and the same set of characteristics. The attribute scale itself is determined by the group and is therefore valid for all members (parts) of the group.For each group of parts, a so-called variant part with its specific characteristics is then created. The parts of the group are then assigned to the variant part as so-called sub-parts, whereby the characteristics list is defined for each of these sub-parts according to the characteristics of the sub-part. The sub-parts assigned to a variant part clearly show the differences between these sub-parts with regard to the characteristic values of the features.Here it can often already be established that sub-parts have been defined unnecessarily, since their characteristics - clearly described by the characteristic bar - are quite comparable and even substitutable with other sub-parts of the same variant part.The consistent introduction of product features, product feature strips and variant parts gives the entire parts master a clear structure. The focus is no longer on the individual parts, but rather on material features, i.e. characteristics that determine the parts to be used. The rules of configuration logic then only refer to characteristics - i.e. properties - and no longer directly to part numbers.This separation of the configuration logic from part numbers also makes it possible to determine configurations with parts for which there is still \"no part number\": in this case, the configuration determines variant parts with those characteristics for which there is (still) no subpart in the variant part. This does not have to be the case, because the desired - non-existent - part is clearly specified by the variant part and the distinct attribute list. With this unambiguous specification, it can be processed throughout the entire logistics process even without a system in the part master.Variant parts and their associated lower parts with a distinct list of characteristics can thus help to increase the diversity of the product range without creating an overflowing parts master: in this way, variance can be controlled. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Parts Variance Analyser."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Parts Variance Analyser. ### Response: The module Parts Variance Analyser is used for the following: The constantly changing requirements in the markets lead to a constant adaptation and expansion of the own product range (external variance). In addition, the company's own engineering and production also contributes to changes in the parts used (internal variance). This external and internal variance often leads to a constant growth of the own parts base and can lead to increasing difficulties to configure the own products customer-specific and error-free.Carefully constructed parts classes or other ontologies can help to keep an overview and order in the parts master, but they usually cannot prevent the parts master from growing per se. Also missing is the definition of a configuration logic for the own products.By introducing sustainable variant management, the growth of the parts master can be slowed down sustainably, which automatically leads to an increased overview, improved order in the parts master and overall to improved efficiency in the production process. On the other hand, the necessary configuration logic for one's own product range results almost in parallel.For this purpose, it is first necessary to find \"similar\" parts in the part master, i.e. to find and structure groups of parts in such a way that the individual members of a group can only be unambiguously described by different versions of one and the same set of characteristics. The attribute scale itself is determined by the group and is therefore valid for all members (parts) of the group.For each group of parts, a so-called variant part with its specific characteristics is then created. The parts of the group are then assigned to the variant part as so-called sub-parts, whereby the characteristics list is defined for each of these sub-parts according to the characteristics of the sub-part. The sub-parts assigned to a variant part clearly show the differences between these sub-parts with regard to the characteristic values of the features.Here it can often already be established that sub-parts have been defined unnecessarily, since their characteristics - clearly described by the characteristic bar - are quite comparable and even substitutable with other sub-parts of the same variant part.The consistent introduction of product features, product feature strips and variant parts gives the entire parts master a clear structure. The focus is no longer on the individual parts, but rather on material features, i.e. characteristics that determine the parts to be used. The rules of configuration logic then only refer to characteristics - i.e. properties - and no longer directly to part numbers.This separation of the configuration logic from part numbers also makes it possible to determine configurations with parts for which there is still \"no part number\": in this case, the configuration determines variant parts with those characteristics for which there is (still) no subpart in the variant part. This does not have to be the case, because the desired - non-existent - part is clearly specified by the variant part and the distinct attribute list. With this unambiguous specification, it can be processed throughout the entire logistics process even without a system in the part master.Variant parts and their associated lower parts with a distinct list of characteristics can thus help to increase the diversity of the product range without creating an overflowing parts master: in this way, variance can be controlled.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Time sheet (by the day): This module is one of several apps for recording and maintaining time sheets. Time sheets are especially common in service industries, where it is necessary to record services for billing customers. Accordingly, the data to be entered is designed with a view to project-related billing or for the purpose of post-calculation. This app allows you to record time sheets by the day, another app (time sheet (single)) is structured in a way that you can directly record the hours accrued as expenses without specifying the daily work/attendance time. ### Instruction: Which module is being described? ### Response: The module being described is Time sheet (by the day)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Time sheet (by the day) used for? ### Response: The module Time sheet (by the day) serves the purpose of the following: This module is one of several apps for recording and maintaining time sheets. Time sheets are especially common in service industries, where it is necessary to record services for billing customers. Accordingly, the data to be entered is designed with a view to project-related billing or for the purpose of post-calculation. This app allows you to record time sheets by the day, another app (time sheet (single)) is structured in a way that you can directly record the hours accrued as expenses without specifying the daily work/attendance time.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Time sheet: This module is one of several apps for recording and maintaining time sheets. Time sheets are particularly common in service industries, where it is necessary to record services for billing purposes. Accordingly, the data to be entered is designed with a view to project-related billing or for the purpose of post-calculation. This app allows you to enter time sheets individually, another app (time sheet (by the day)) is structured in such a way that you first enter the daily work/attendance time and then record the hours worked during this time - for different cost centres/cost units - as expenses. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Time sheet."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Time sheet used for? ### Response: The purpose of the module Time sheet is the following: This module is one of several apps for recording and maintaining time sheets. Time sheets are particularly common in service industries, where it is necessary to record services for billing purposes. Accordingly, the data to be entered is designed with a view to project-related billing or for the purpose of post-calculation. This app allows you to enter time sheets individually, another app (time sheet (by the day)) is structured in such a way that you first enter the daily work/attendance time and then record the hours worked during this time - for different cost centres/cost units - as expenses.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Work plan: Work plans describe the work steps that must be carried out to produce a manufacturing part. A work plan consists of work sequences, which in turn may have their own work plans. Each sequence of operations describes which workstations and which machines are required for the production of the part and for how long. The basic heading includes an operation, a work station and a machine, and the times required for production are recorded. A variant item is a conditional list of basic headings. When exploding the routing, the (single) item whose condition is the first to be fulfilled is used. ### Instruction: Tell me the name of this module. ### Response: The module being described is Work plan."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Work plan for me. ### Response: The module Work plan is used for the following: Work plans describe the work steps that must be carried out to produce a manufacturing part. A work plan consists of work sequences, which in turn may have their own work plans. Each sequence of operations describes which workstations and which machines are required for the production of the part and for how long. The basic heading includes an operation, a work station and a machine, and the times required for production are recorded. A variant item is a conditional list of basic headings. When exploding the routing, the (single) item whose condition is the first to be fulfilled is used.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional sequence of operations: A conditional work sequence of a work plan contains a conditional list of individual work sequences, the so-called variants. This provides a set of instruments to define different resources in a work sequence, e.g. due to different characteristics of the part to be produced. Different time specifications can also be stored as a table in an individual work sequence. In the course of a routing explosion, the item whose condition is fulfilled first is inserted into the production routing. ### Instruction: How is this module called? ### Response: This module is named Conditional sequence of operations."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Conditional sequence of operations for me. ### Response: The module Conditional sequence of operations is used for the following: A conditional work sequence of a work plan contains a conditional list of individual work sequences, the so-called variants. This provides a set of instruments to define different resources in a work sequence, e.g. due to different characteristics of the part to be produced. Different time specifications can also be stored as a table in an individual work sequence. In the course of a routing explosion, the item whose condition is fulfilled first is inserted into the production routing.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sequence of operations: A work plan consists of individual work sequences or operations. This module is used to record individual work sequences, i.e. work sequences that are only to be carried out at the workstation/resource specified in this work sequence. Only the set-up time and the piece time can be entered as a formula - and therefore variable. If a sequence of operations is to be defined variably with regard to the workstation/resource, a conditional sequence of operations can be inserted into the work plan. ### Instruction: Name this module. ### Response: The module being described is Sequence of operations."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Sequence of operations used for? ### Response: The module Sequence of operations serves the purpose of the following: A work plan consists of individual work sequences or operations. This module is used to record individual work sequences, i.e. work sequences that are only to be carried out at the workstation/resource specified in this work sequence. Only the set-up time and the piece time can be entered as a formula - and therefore variable. If a sequence of operations is to be defined variably with regard to the workstation/resource, a conditional sequence of operations can be inserted into the work plan.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Access keys: With this module, access keys (function keys: e.g. F3 or F5 or corresponding system events) can be defined for a user to call specific applications. ### Instruction: Name this module. ### Response: The module being described is Access keys."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Access keys. ### Response: The purpose of the module Access keys is as follows: With this module, access keys (function keys: e.g. F3 or F5 or corresponding system events) can be defined for a user to call specific applications.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of KPI Auditors: KPI auditors are observers of transaction documents for the definition and determination of business key figures = Key Performance Indicators (KPI). KPI auditors can be used to collect key figures for supplier evaluation, machine utilisation or the quality of a cost centre, for example. The KPI auditors determine the key performance indicators by name and also the set of rules according to which they are determined. The KPI auditors are integrated either via the business processes (workflows) of transactions, whereby the key figures themselves are processed via transaction descriptions, or by direct assignment to business objects. The KPI Monitor App is responsible for the actual display and evaluation of the KPIs defined by means of this app. ### Instruction: Which module is being described? ### Response: This module is named KPI Auditors."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module KPI Auditors? ### Response: The purpose of the module KPI Auditors is as follows: KPI auditors are observers of transaction documents for the definition and determination of business key figures = Key Performance Indicators (KPI). KPI auditors can be used to collect key figures for supplier evaluation, machine utilisation or the quality of a cost centre, for example. The KPI auditors determine the key performance indicators by name and also the set of rules according to which they are determined. The KPI auditors are integrated either via the business processes (workflows) of transactions, whereby the key figures themselves are processed via transaction descriptions, or by direct assignment to business objects. The KPI Monitor App is responsible for the actual display and evaluation of the KPIs defined by means of this app.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:KPI Monitor: With its KPI monitor, ClassiX® supports the determination of any key figure systems from posting processes and master data, whereby the summarisation levels can also be set as required. Using drill-down, the key figures can be traced and analysed down to the individual booking record. KPI (key performance indicators) = process-oriented key figures, which are defined in the KPI auditor. ### Instruction: Which module is being described? ### Response: The module being described is English:KPI Monitor."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:KPI Monitor for me. ### Response: The purpose of the module English:KPI Monitor is as follows: With its KPI monitor, ClassiX® supports the determination of any key figure systems from posting processes and master data, whereby the summarisation levels can also be set as required. Using drill-down, the key figures can be traced and analysed down to the individual booking record. KPI (key performance indicators) = process-oriented key figures, which are defined in the KPI auditor.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Supplier overview: Via this module, ClassiX® offers the possibility to view all relevant data on and about a supplier at a glance. In preparation for a meeting with the supplier, it is also possible to print them out. The data is compiled from the company/supplier master data (contact data, supplier data, etc.), the parts master data(supplier agreements), financial accounting (open item balance, etc.), transaction data (open orders, returns, reminders, etc.) and supplier evaluation (key figures, sales, etc.). ### Instruction: Tell me the name of this module. ### Response: The module being described is Supplier overview."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Supplier overview serve? ### Response: The module Supplier overview can be described as follows: Via this module, ClassiX® offers the possibility to view all relevant data on and about a supplier at a glance. In preparation for a meeting with the supplier, it is also possible to print them out. The data is compiled from the company/supplier master data (contact data, supplier data, etc.), the parts master data(supplier agreements), financial accounting (open item balance, etc.), transaction data (open orders, returns, reminders, etc.) and supplier evaluation (key figures, sales, etc.).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Language: Currently, 6,912 languages are known worldwide (www.ethnologue.com). It is not absolutely necessary to store information about languages in ClassiX® , multilingualism is not dependent on this. Information about languages is necessary, for example, when using the vocabulary module from the AppsWarehouse® , which is part of the multilingual dictionary in ClassiX®. Languages or their names are coded internationally, whereby there are, among others, the 2-digit ISO 639-1 (administered by the International Information Centre for Terminology (Infoterm) and the 3-digit ISO 639-2 code (administered by the Library of Congress of the USA). The latter code (in terminological form, see below) is used by ClassiX® as the main code, but the 2-digit ISO 639-1 code can be included as additional information. ### Instruction: Name this module. ### Response: The module being described is Language."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Language. ### Response: The module Language is used for the following: Currently, 6,912 languages are known worldwide (www.ethnologue.com). It is not absolutely necessary to store information about languages in ClassiX® , multilingualism is not dependent on this. Information about languages is necessary, for example, when using the vocabulary module from the AppsWarehouse® , which is part of the multilingual dictionary in ClassiX®. Languages or their names are coded internationally, whereby there are, among others, the 2-digit ISO 639-1 (administered by the International Information Centre for Terminology (Infoterm) and the 3-digit ISO 639-2 code (administered by the Library of Congress of the USA). The latter code (in terminological form, see below) is used by ClassiX® as the main code, but the 2-digit ISO 639-1 code can be included as additional information.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Company duplicate cleansing: This window is used for company duplicate cleansing. Toolbar Symbol Description Save company Update display Fields Field Description Duplicated company Company duplicate(s) Master data : Duplicate company / companies duplicate - : : Name Company name : : Home page Home Page (www address) of the company : : : VAT Id.No. Domestic tax number of the company at the tax office : : Industry* Assignment of the company to one or more industries (classification term with identifier \"INDUSTRIES\") : : Status* see Status field in the editing window Address - : : Address : : Street Street name of the street address of the company : : Address suffix : : Country Country of the street address of the company : : POSTCODE Postcode of the company's street address : : Place Place of the street address of the company : : Remark : : Communication : Contact person : : Duplicate company / companies duplicate Listing of the contact persons of the respective company : Castors : : Duplicate company / companies duplicate Listing of the roles of the respective company Buttons button Description Exchange the selected duplicate with the current company Master data - : / / The picture appears if the master data data field does not differ from the duplicate data field, otherwise the arrow is displayed as a prompt to check whether the information from the duplicate (right field) has been transferred to the master data (left field). Once this button has been pressed, the image in the button changes to a grey because only after saving with the memory button the transfer to the master data takes place. Action - back The window is closed. ### Instruction: Which module is being described? ### Response: This module is called Company duplicate cleansing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Company duplicate cleansing used for? ### Response: The purpose of the module Company duplicate cleansing is the following: This window is used for company duplicate cleansing. Toolbar Symbol Description Save company Update display Fields Field Description Duplicated company Company duplicate(s) Master data : Duplicate company / companies duplicate - : : Name Company name : : Home page Home Page (www address) of the company : : : VAT Id.No. Domestic tax number of the company at the tax office : : Industry* Assignment of the company to one or more industries (classification term with identifier \"INDUSTRIES\") : : Status* see Status field in the editing window Address - : : Address : : Street Street name of the street address of the company : : Address suffix : : Country Country of the street address of the company : : POSTCODE Postcode of the company's street address : : Place Place of the street address of the company : : Remark : : Communication : Contact person : : Duplicate company / companies duplicate Listing of the contact persons of the respective company : Castors : : Duplicate company / companies duplicate Listing of the roles of the respective company Buttons button Description Exchange the selected duplicate with the current company Master data - : / / The picture appears if the master data data field does not differ from the duplicate data field, otherwise the arrow is displayed as a prompt to check whether the information from the duplicate (right field) has been transferred to the master data (left field). Once this button has been pressed, the image in the button changes to a grey because only after saving with the memory button the transfer to the master data takes place. Action - back The window is closed."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Company duplicate lists: When duplicate matching, the name is split up according to the spaces and line breaks and searched for these in the company master data using wildcards. For companies found in this way, the name is not checked, only the country, town and street. If the street in the found company does not contain the term \"P.O. Box\" in the checked company or vice versa, the company is considered to be the same so that a manual check can be carried out. In addition, the sales tax identification number is also checked. The check is carried out in the input mask before saving if the automatic check at save is set in the options. Examples of duplicates: Why is this a duplicate? Name Country Place Street/Postal Box The name is similar, the town is the same and in one field \"street\" there is the word \"post office box University sample EN Samples Zülpicherstr. 45 University of Model Central EN Samples PO box 41 09 24 The location of one address appears in the other address The system knows the abbreviation \"str.\" and thus recognises that it is the same street. MUSTER electrical trade Ltd. EN Frankfurt am Main Hauptstrasse 19 Samples ELEKTROHANDEL LTD. EN Frankfurt Hauptstr. 19. ### Instruction: What is the name of this module? ### Response: The module being described is Company duplicate lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Company duplicate lists used for? ### Response: The module Company duplicate lists can be described as follows: When duplicate matching, the name is split up according to the spaces and line breaks and searched for these in the company master data using wildcards. For companies found in this way, the name is not checked, only the country, town and street. If the street in the found company does not contain the term \"P.O. Box\" in the checked company or vice versa, the company is considered to be the same so that a manual check can be carried out. In addition, the sales tax identification number is also checked. The check is carried out in the input mask before saving if the automatic check at save is set in the options. Examples of duplicates: Why is this a duplicate? Name Country Place Street/Postal Box The name is similar, the town is the same and in one field \"street\" there is the word \"post office box University sample EN Samples Zülpicherstr. 45 University of Model Central EN Samples PO box 41 09 24 The location of one address appears in the other address The system knows the abbreviation \"str.\" and thus recognises that it is the same street. MUSTER electrical trade Ltd. EN Frankfurt am Main Hauptstrasse 19 Samples ELEKTROHANDEL LTD. EN Frankfurt Hauptstr. 19."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Company name lists: This window serves to list the names and titles of companies. The names of all companies are collected and displayed in a list of names. The aim of this application is to be able to check names for their correct spelling. Toolbar Symbol Description Rebuild the list of names Search fields Field Description List of names Filter - : : Company name Enter a (partial) name. The result is a list of names. If you select an entry in the list, the companies that have this name will be listed below it. : Company names Listing of search results : Companies Listing of the companies selected by name Buttons button Description Action - back The window is closed. ### Instruction: Name this module. ### Response: The name of this module is Company name lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Company name lists serve? ### Response: The purpose of the module Company name lists is as follows: This window serves to list the names and titles of companies. The names of all companies are collected and displayed in a list of names. The aim of this application is to be able to check names for their correct spelling. Toolbar Symbol Description Rebuild the list of names Search fields Field Description List of names Filter - : : Company name Enter a (partial) name. The result is a list of names. If you select an entry in the list, the companies that have this name will be listed below it. : Company names Listing of search results : Companies Listing of the companies selected by name Buttons button Description Action - back The window is closed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Saved lists: Many of the lists/evaluations in the AppsWarehouse® of ClassiX® can be accessed via the symbols is called up from a buffer memory, deleted and can be saved. This functionality allows on the one hand to temporarily store a list once called up and to call it up again at another time. On the other hand, a user can allow another user - who does not have this access right - to view a list for which this user has an access right. A saved list transferred in this way can be restricted in its use (see the documentation of the respective evaluation). A list is saved for each user, but a user can save multiple versions of the same list. ### Instruction: Which module is being described? ### Response: The module being described is Saved lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Saved lists? ### Response: The purpose of the module Saved lists is the following: Many of the lists/evaluations in the AppsWarehouse® of ClassiX® can be accessed via the symbols is called up from a buffer memory, deleted and can be saved. This functionality allows on the one hand to temporarily store a list once called up and to call it up again at another time. On the other hand, a user can allow another user - who does not have this access right - to view a list for which this user has an access right. A saved list transferred in this way can be restricted in its use (see the documentation of the respective evaluation). A list is saved for each user, but a user can save multiple versions of the same list.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Text Literal Browser: AppsWarehouse: This app is part of the multilingualism of the CyberEnterprise business OS and is responsible for the texts in the different operating languages. With this app, the texts occurring in the AppsWarehouse® (InstantView® code) (see also Text Constants in the InstantView® Framework) can be is displayed, adapted to specific company requirements and/or can be translated into all other languages required. By default, all texts in AppsWarehouse® Code (window titles, field labels, hint texts, etc.) are written in German as the first and English as the second, so-called bridge language. The respective expressions in these two languages together form the \"key\" for unambiguous identification of a text. Using this \"key\", the texts can be changed (for alternative designations: e.g. device - instrument - installation) and/or freely assigned to a language as of the third language (French). These extensions and/or changes to the texts from the AppsWarehouse code are written to the file appsWHLiterals.stg (formerly: cxstring-uc.002) with the above-mentioned \"key\" (see Stored text constants in file cxstring_uc.002).At runtime, the displayed texts are then adapted/overwritten/extended using the entries in this file.In addition, you can have a *.info file created (usually cxstring-uc.002.info), by means of which you can freeze a specific version of the AppsWarehouse text constants. If changes are made in the AppsWarehouse code afterwards, it can be determined in which modules/apps certain text constants used to be (see Text constants unrelated to AppsWarehouse®).The languages that can be selected or used at runtime are defined in the location-specific data (language, system number of the language). How many and which languages are actually to be used within an application is specified in the client under System/Language Control. If nothing is specified there, the number of languages is determined directly from the location-specific data. ### Instruction: What is the name of this module? ### Response: This module is named English:Text Literal Browser: AppsWarehouse."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Text Literal Browser: AppsWarehouse for me. ### Response: The purpose of the module English:Text Literal Browser: AppsWarehouse is the following: This app is part of the multilingualism of the CyberEnterprise business OS and is responsible for the texts in the different operating languages. With this app, the texts occurring in the AppsWarehouse® (InstantView® code) (see also Text Constants in the InstantView® Framework) can be is displayed, adapted to specific company requirements and/or can be translated into all other languages required. By default, all texts in AppsWarehouse® Code (window titles, field labels, hint texts, etc.) are written in German as the first and English as the second, so-called bridge language. The respective expressions in these two languages together form the \"key\" for unambiguous identification of a text. Using this \"key\", the texts can be changed (for alternative designations: e.g. device - instrument - installation) and/or freely assigned to a language as of the third language (French). These extensions and/or changes to the texts from the AppsWarehouse code are written to the file appsWHLiterals.stg (formerly: cxstring-uc.002) with the above-mentioned \"key\" (see Stored text constants in file cxstring_uc.002).At runtime, the displayed texts are then adapted/overwritten/extended using the entries in this file.In addition, you can have a *.info file created (usually cxstring-uc.002.info), by means of which you can freeze a specific version of the AppsWarehouse text constants. If changes are made in the AppsWarehouse code afterwards, it can be determined in which modules/apps certain text constants used to be (see Text constants unrelated to AppsWarehouse®).The languages that can be selected or used at runtime are defined in the location-specific data (language, system number of the language). How many and which languages are actually to be used within an application is specified in the client under System/Language Control. If nothing is specified there, the number of languages is determined directly from the location-specific data.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Text Literals: This module is part of the multilingualism of theCyberEnterprise® platform and is responsible for the system texts in the different operating languages. With this module the texts occurring as text constants on the CyberEnterprise® platform can a) be displayed, b) be specifically adapted to the company and/or c) be translated into all other desired languages.By default, all texts on the CyberEnterprise platform are recorded in German as the first language and English as the second language. In contrast to the text literals of the AppsWarehouse modules, the text literals of the CyberEnterprise platform have their own unique identification number via which these texts can be maintained. Using this number, the texts can be changed (for alternative designations: e.g. January - January) and/or freely assigned to a language from the third language onwards.{img type=\"fileId\" fileId=\"528\" thumb=\"box\" width=\"100%\"}. ### Instruction: Name this module. ### Response: This module is named Text Literals."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Text Literals serve? ### Response: The module Text Literals is used for the following: This module is part of the multilingualism of theCyberEnterprise® platform and is responsible for the system texts in the different operating languages. With this module the texts occurring as text constants on the CyberEnterprise® platform can a) be displayed, b) be specifically adapted to the company and/or c) be translated into all other desired languages.By default, all texts on the CyberEnterprise platform are recorded in German as the first language and English as the second language. In contrast to the text literals of the AppsWarehouse modules, the text literals of the CyberEnterprise platform have their own unique identification number via which these texts can be maintained. Using this number, the texts can be changed (for alternative designations: e.g. January - January) and/or freely assigned to a language from the third language onwards.{img type=\"fileId\" fileId=\"528\" thumb=\"box\" width=\"100%\"}."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Loaded DLLs: ClassiX® consists, technically speaking, of a number of executable files and libraries (.dll files, in the following referred to as DLLs). There are ClassiX® own DLLs, foreign libraries, ObjectStore DLLs and system DLLs. All DLLs are loaded into the address space of the process. This module provides an overview of these DLLs and shows where the DLLs were loaded. {img type=\"fileId\" fileId=\"406\" thumb=\"box\" width=\"100%\"} For each DLL loaded by the ClassiX® process, this information is output: DLL: Name of the DLL Sequence: DLLs are loaded into the memory one after the other. This number indicates when the DLL was loaded. Base address: Each DLL has stored where in the address space it should best be loaded. But if this memory area is occupied, Windows loads the DLL into another, free address space (O6MOP1.dll in the picture, this DLL collides with another ObjectStore DLL) Windows moves the DLL tacitly; nevertheless this process is not without consequences, because on the one hand the movement takes some time, on the other hand a moved DLL can only be swapped out via the swap file (otherwise Windows throws the DLL out of the RAM and reloads it later from the .dll file). Size: Number of bytes the DLL occupies in memory. Address area: A summary from the previous two columns for the sake of clarity. Original address space: If a DLL has been moved in memory, this shows where the DLL would have been loaded to if there had been enough space in that location Address space. Path: File name with full path. The list is only a snapshot, because during operation ClassiX® can load further DLLs, in which e.g. rarely used functions are stored. These functions can in turn reload further DLLs themselves. The sequence shows which DLLs were loaded first and which last. How you can see why the address space for ObjectStore cannot exceed a certain limit is explained in the section Address Space. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Loaded DLLs."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Loaded DLLs used for? ### Response: The module Loaded DLLs is used for the following: ClassiX® consists, technically speaking, of a number of executable files and libraries (.dll files, in the following referred to as DLLs). There are ClassiX® own DLLs, foreign libraries, ObjectStore DLLs and system DLLs. All DLLs are loaded into the address space of the process. This module provides an overview of these DLLs and shows where the DLLs were loaded. {img type=\"fileId\" fileId=\"406\" thumb=\"box\" width=\"100%\"} For each DLL loaded by the ClassiX® process, this information is output: DLL: Name of the DLL Sequence: DLLs are loaded into the memory one after the other. This number indicates when the DLL was loaded. Base address: Each DLL has stored where in the address space it should best be loaded. But if this memory area is occupied, Windows loads the DLL into another, free address space (O6MOP1.dll in the picture, this DLL collides with another ObjectStore DLL) Windows moves the DLL tacitly; nevertheless this process is not without consequences, because on the one hand the movement takes some time, on the other hand a moved DLL can only be swapped out via the swap file (otherwise Windows throws the DLL out of the RAM and reloads it later from the .dll file). Size: Number of bytes the DLL occupies in memory. Address area: A summary from the previous two columns for the sake of clarity. Original address space: If a DLL has been moved in memory, this shows where the DLL would have been loaded to if there had been enough space in that location Address space. Path: File name with full path. The list is only a snapshot, because during operation ClassiX® can load further DLLs, in which e.g. rarely used functions are stored. These functions can in turn reload further DLLs themselves. The sequence shows which DLLs were loaded first and which last. How you can see why the address space for ObjectStore cannot exceed a certain limit is explained in the section Address Space.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Location data: Important! Please also read the description on the subject of location-specific data in the installation documentation This module is used to create, maintain and manage location-specific data. These can represent and explain federal states, provinces and any deeply nested regions. When a user logs on to the system, the system checks whether a separate company calendar (locale) exists at the employing company (place of employment of the employee). If so, this locale calendar is logged on, otherwise it is checked whether the locale has one and so on up to the top locale. If no company calendar was found in this way, the system checks whether there is a locale at the client company and registers it. If no locale is linked here either, the locale specified in the batch file via the environment variables for country, state and region is registered. As the ClassiX® system knows the connections between different localities, for example the superordinate country of any state or region, the following possibilities arise: Generally speaking, a country's characteristics are handed down to a federal state and then to subordinate regions. However, some of this information can be overwritten by directly changing a certain property in a subordinate locality, for example a federal state. Now this new property applies to this subordinate locality and all its subordinate localities, for example regions. Of course you can also change the same property in some of the subordinate localities, for example in regions. However, a region can also pass on properties to a federal state and this to the higher-level state. This is the special case where a superior locality has at least all time zones of its subordinate localities. Of course, the time zones of the superior locality can be extended, but not restricted. This is another reason why you need to be sure where you are making settings. That is why the characteristics of a locality are divided into informative characteristics of the superior country, characteristics to be set in the superior country and characteristics to be set in this locality: Informative characteristics of a country are: - Country name - Country code - Number plate - Winter/summer time or summer/winter time changeover These properties are taken from internal tables and cannot be changed by the user to ensure consistency with reality. These informative properties are valid for the country and all its subordinate localities. The characteristics of a country to be set are: - National currency - International area code - Number format - Date and time These characteristics are from a superior country, not from a subordinate locality, and must therefore be changed at the state level. These properties to be set are valid for the country and all its subordinate localities. The properties of a locality to be set are: - Place name - Language - System number of the language - Time zone or start and end time zone (regions have only one time zone) - Working days - Telecommunications - Holidays and holidays These properties are specific to a particular location and can therefore be set at all levels. If these properties are only set at state level, they are also valid for all subordinate localities. However, as mentioned above, these can be changed at a subordinate local level. These changes are valid for the edited locality and all its subordinate localities. Telecommunication is an exception, as these settings are only valid for your own locality, neither taken from above nor transferred to below. A special case of informative features are the federal state and region codes. These are automatically assigned by the ClassiX® system when the corresponding localities are created and can be used in combination with the state codes to set the environment variables in the project-specific batch file. You can read more about this in the description of location-specific data in the installation documentation. Attention! If you make changes to the location that is currently set as the system location, you must first activate it by setting this location as the system location again. ### Instruction: Tell me the name of this module. ### Response: This module is named Location data."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Location data serve? ### Response: The module Location data serves the purpose of the following: Important! Please also read the description on the subject of location-specific data in the installation documentation This module is used to create, maintain and manage location-specific data. These can represent and explain federal states, provinces and any deeply nested regions. When a user logs on to the system, the system checks whether a separate company calendar (locale) exists at the employing company (place of employment of the employee). If so, this locale calendar is logged on, otherwise it is checked whether the locale has one and so on up to the top locale. If no company calendar was found in this way, the system checks whether there is a locale at the client company and registers it. If no locale is linked here either, the locale specified in the batch file via the environment variables for country, state and region is registered. As the ClassiX® system knows the connections between different localities, for example the superordinate country of any state or region, the following possibilities arise: Generally speaking, a country's characteristics are handed down to a federal state and then to subordinate regions. However, some of this information can be overwritten by directly changing a certain property in a subordinate locality, for example a federal state. Now this new property applies to this subordinate locality and all its subordinate localities, for example regions. Of course you can also change the same property in some of the subordinate localities, for example in regions. However, a region can also pass on properties to a federal state and this to the higher-level state. This is the special case where a superior locality has at least all time zones of its subordinate localities. Of course, the time zones of the superior locality can be extended, but not restricted. This is another reason why you need to be sure where you are making settings. That is why the characteristics of a locality are divided into informative characteristics of the superior country, characteristics to be set in the superior country and characteristics to be set in this locality: Informative characteristics of a country are: - Country name - Country code - Number plate - Winter/summer time or summer/winter time changeover These properties are taken from internal tables and cannot be changed by the user to ensure consistency with reality. These informative properties are valid for the country and all its subordinate localities. The characteristics of a country to be set are: - National currency - International area code - Number format - Date and time These characteristics are from a superior country, not from a subordinate locality, and must therefore be changed at the state level. These properties to be set are valid for the country and all its subordinate localities. The properties of a locality to be set are: - Place name - Language - System number of the language - Time zone or start and end time zone (regions have only one time zone) - Working days - Telecommunications - Holidays and holidays These properties are specific to a particular location and can therefore be set at all levels. If these properties are only set at state level, they are also valid for all subordinate localities. However, as mentioned above, these can be changed at a subordinate local level. These changes are valid for the edited locality and all its subordinate localities. Telecommunication is an exception, as these settings are only valid for your own locality, neither taken from above nor transferred to below. A special case of informative features are the federal state and region codes. These are automatically assigned by the ClassiX® system when the corresponding localities are created and can be used in combination with the state codes to set the environment variables in the project-specific batch file. You can read more about this in the description of location-specific data in the installation documentation. Attention! If you make changes to the location that is currently set as the system location, you must first activate it by setting this location as the system location again.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of System login by selecting a client: Within this processing stage you determine the client with which you want to work. ### Instruction: What is the name of the module being described? ### Response: The module being described is System login by selecting a client."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module System login by selecting a client? ### Response: The module System login by selecting a client can be described as follows: Within this processing stage you determine the client with which you want to work.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of System login by selecting a client and a user: Within this processing stage, you determine the client you want to work with and you register in the system as an additional user. When a user logs on, the system checks whether a separate company calendar (locale) exists at the employing company (place of employment of the employee). If so, this locale is logged on, otherwise it is checked whether the locale has one and so on up to the top locale. If no operating calendar was found in this way, the system checks whether there is a locale at the client's company and registers it. If no locale is linked here either, the locale specified in the batch file is registered via the environment variables for country, state and region. ### Instruction: Which module is being described? ### Response: The module being described is System login by selecting a client and a user."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module System login by selecting a client and a user for me. ### Response: The module System login by selecting a client and a user serves the purpose of the following: Within this processing stage, you determine the client you want to work with and you register in the system as an additional user. When a user logs on, the system checks whether a separate company calendar (locale) exists at the employing company (place of employment of the employee). If so, this locale is logged on, otherwise it is checked whether the locale has one and so on up to the top locale. If no operating calendar was found in this way, the system checks whether there is a locale at the client's company and registers it. If no locale is linked here either, the locale specified in the batch file is registered via the environment variables for country, state and region.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Evaluation log file: Evaluation: Performance What should be taken into account when evaluating the logfiles, or what are indications of code that can be optimised? Evaluation: System crashes Blockade trigger - tree view This module is used to create various evaluations of log files and display them accordingly. The files are read out according to sessions (start of ClassiX® until end or crash). The remaining entries of the log file are thus assigned to the created sessions. If additional dbProf files are read in, these entries are assigned to the sessions by the OS Client ID, if possible. An option can be used to set whether or not the previous sessions should be reset before each import. If this option is not set, many days in a row can easily be read in. Either several selected files, entire folders can be read in (subfolders are automatically taken into account) or a time period can be specified in which all log files are automatically searched and loaded. Specifying a time period is best suited in MorphIT, because the MorphIT user does not have to worry about the location of the log files and whether they are on the same computer, especially since in this case no files have to be uploaded. The automatic reading of log files depending on the time period requires that the log files are stored in a temporal subfolder structure, i.e. the following option must be activated in logging.ini. log4cplus.OrganizeLogsByDate=true Selecting individual files also allows you to view files for sessions from different time periods and points side by side. In addition to the sessions and user logins, certain events such as deadlocks, timeouts, crashes, etc. are additionally summarised in monitors across sessions. After reading in, all sessions are displayed in the session list with the most important data. A session is opened by double-clicking on it and you can see what happened. In the Statistics tab, graphical evaluations can be created flexibly. The monitors can be assigned to the diagrams as desired. There is a maximum of 3 diagrams, whereby only one monitor can be assigned to a diagram. You can drag and drop the monitors into the diagram areas or select a monitor and then click on the corresponding \"Add monitor\" button. For dbProf statistics, the desired evaluation can be selected after a double click. In the X-axis option area, the evaluation variant can be selected, whereby the transactions are evaluated according to time or date. In the case of an evaluation based on time, all transactions are summarised according to their time, so that one can see, for example, which events have occurred at which time of day. In this case, it makes sense to load or select only sessions from a single day. The time span and the period length of the evaluation can be specified in the Options section. The period length self-explanatory determines the accuracy of the statistics. For statistics accurate to the minute, a period length of 1 minute should be selected, but this could lead to extensive graphs. If, on the other hand, you want to make a summary evaluation over several days, you should select the option by date. All transactions of a particular monitor are summarised in days and displayed graphically. You could also select the time of day under Options, outside which the transactions are not considered. The monitor user has the special feature that besides the normal evaluation of the login, the maximum number of simultaneous use of ClassiX on one day is graphically displayed. Either \"All sessions\" or \"Selected sessions only\" can be set as an option. With the option \"All sessions\" all loaded sessions are used for the evaluation, otherwise only the sessions selected in the session list are used. The option \"All sessions\" can be used to read and compare only dbProf files of different days. So it is not necessary to read in all files from each day. For any number of monitors the transactions can be viewed within a time span. This makes it easier to understand which events are interdependent within a limited period of time. In the tab Blocks/ Crashes/Locks the transactions mentioned above for the selected sessions are displayed. The locking conflicts can be viewed in a summary by \"Locked By\" (Who is locking the others?) and segment. Red lines in a list or also called ListView Fatals (crashes within a ListView) are displayed in the same tab. RO and RW long distance transactions are grouped by location and displayed in the Long distance TXNs tab. The average duration and the average number of pages read are also displayed. IV faults are displayed in a separate tab. ### Instruction: Name this module. ### Response: The module being described is Evaluation log file."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Evaluation log file. ### Response: The module Evaluation log file can be described as follows: Evaluation: Performance What should be taken into account when evaluating the logfiles, or what are indications of code that can be optimised? Evaluation: System crashes Blockade trigger - tree view This module is used to create various evaluations of log files and display them accordingly. The files are read out according to sessions (start of ClassiX® until end or crash). The remaining entries of the log file are thus assigned to the created sessions. If additional dbProf files are read in, these entries are assigned to the sessions by the OS Client ID, if possible. An option can be used to set whether or not the previous sessions should be reset before each import. If this option is not set, many days in a row can easily be read in. Either several selected files, entire folders can be read in (subfolders are automatically taken into account) or a time period can be specified in which all log files are automatically searched and loaded. Specifying a time period is best suited in MorphIT, because the MorphIT user does not have to worry about the location of the log files and whether they are on the same computer, especially since in this case no files have to be uploaded. The automatic reading of log files depending on the time period requires that the log files are stored in a temporal subfolder structure, i.e. the following option must be activated in logging.ini. log4cplus.OrganizeLogsByDate=true Selecting individual files also allows you to view files for sessions from different time periods and points side by side. In addition to the sessions and user logins, certain events such as deadlocks, timeouts, crashes, etc. are additionally summarised in monitors across sessions. After reading in, all sessions are displayed in the session list with the most important data. A session is opened by double-clicking on it and you can see what happened. In the Statistics tab, graphical evaluations can be created flexibly. The monitors can be assigned to the diagrams as desired. There is a maximum of 3 diagrams, whereby only one monitor can be assigned to a diagram. You can drag and drop the monitors into the diagram areas or select a monitor and then click on the corresponding \"Add monitor\" button. For dbProf statistics, the desired evaluation can be selected after a double click. In the X-axis option area, the evaluation variant can be selected, whereby the transactions are evaluated according to time or date. In the case of an evaluation based on time, all transactions are summarised according to their time, so that one can see, for example, which events have occurred at which time of day. In this case, it makes sense to load or select only sessions from a single day. The time span and the period length of the evaluation can be specified in the Options section. The period length self-explanatory determines the accuracy of the statistics. For statistics accurate to the minute, a period length of 1 minute should be selected, but this could lead to extensive graphs. If, on the other hand, you want to make a summary evaluation over several days, you should select the option by date. All transactions of a particular monitor are summarised in days and displayed graphically. You could also select the time of day under Options, outside which the transactions are not considered. The monitor user has the special feature that besides the normal evaluation of the login, the maximum number of simultaneous use of ClassiX on one day is graphically displayed. Either \"All sessions\" or \"Selected sessions only\" can be set as an option. With the option \"All sessions\" all loaded sessions are used for the evaluation, otherwise only the sessions selected in the session list are used. The option \"All sessions\" can be used to read and compare only dbProf files of different days. So it is not necessary to read in all files from each day. For any number of monitors the transactions can be viewed within a time span. This makes it easier to understand which events are interdependent within a limited period of time. In the tab Blocks/ Crashes/Locks the transactions mentioned above for the selected sessions are displayed. The locking conflicts can be viewed in a summary by \"Locked By\" (Who is locking the others?) and segment. Red lines in a list or also called ListView Fatals (crashes within a ListView) are displayed in the same tab. RO and RW long distance transactions are grouped by location and displayed in the Long distance TXNs tab. The average duration and the average number of pages read are also displayed. IV faults are displayed in a separate tab.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Preliminary requirements for order: Preliminary requirements are necessary if the final parts lists for customer orders cannot yet be completely created, but certain - already fixed - sub-assemblies can or should be produced or ordered in advance for scheduling reasons. ### Instruction: How is this module called? ### Response: The module being described is Preliminary requirements for order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Preliminary requirements for order? ### Response: The module Preliminary requirements for order serves the purpose of the following: Preliminary requirements are necessary if the final parts lists for customer orders cannot yet be completely created, but certain - already fixed - sub-assemblies can or should be produced or ordered in advance for scheduling reasons.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order items with the status \"Create parts list: Module for finding order items to be produced without production parts list. ### Instruction: Which module is being described? ### Response: This module is called Order items with the status \"Create parts list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Order items with the status \"Create parts list for me. ### Response: The module Order items with the status \"Create parts list can be described as follows: Module for finding order items to be produced without production parts list."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Changed parts requirement items: This module is used to find parts request items that have reduced requirement quantities due to cancellations or secondary planning. It is possible to release (partial) quantities that have already been planned and are no longer required, or to cancel the planning (return document, goods storage, cancellation of the order, ...). ### Instruction: Tell me the name of this module. ### Response: The name of this module is Changed parts requirement items."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Changed parts requirement items. ### Response: The purpose of the module Changed parts requirement items is as follows: This module is used to find parts request items that have reduced requirement quantities due to cancellations or secondary planning. It is possible to release (partial) quantities that have already been planned and are no longer required, or to cancel the planning (return document, goods storage, cancellation of the order, ...).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Cost transactions: This module is used to list the periodical bookings on cost types, cost centres and cost objects/order. ### Instruction: Tell me the name of this module. ### Response: The module being described is Cost transactions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Cost transactions used for? ### Response: The module Cost transactions serves the purpose of the following: This module is used to list the periodical bookings on cost types, cost centres and cost objects/order.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Disposition account (demand forecast): The documents posted in the MRP account and certain data from the logistics account are displayed. In principle, only those open documents that represent planned departures or receipts should be posted in the MRP account (for example: open planned receipt: requirement request item not yet (completely) ordered, production order item not yet reported as finished, etc.; open planned retirement: order item not yet (completely) delivered, part requirement item not yet (completely) withdrawn, etc.). Based on the current stock level, the documents in the MRP account represent the future (planned) stock development in the date sequence. The stock level can fall below the minimum stock level for the respective part at any one time or even become negative. Such situations (minimum stock shortage, reorder point) are analysed in the requirements and stock list (see also date control). Attention - Irregularity with exceeded deadlines via the SCM module: When checking dates in SCM (missing parts list), note that planned receipt documents that are scheduled earlier than today and have not yet arrived are automatically scheduled as a \"tomorrow\" date! If an order was scheduled for 6.2.2012 and has a purchase order with the same date, but today is 7.2.2012 and the purchase order has not yet arrived, then the order is classified as a missing part and receives the shortage indicator in the MRP account. This item also appears in SCM as a missing part! (Technical note: If the variables checkInPastActivated and checkInPastGenerallyActivated are set to TRUE in SetOptions, this control is also active in the normal MRP account and the B&B list with schedule control). The disposition account can also be called up for individual company codes. Requirement triggers in the MRP account (requirement triggers reduce the stock): Project reservations with the status \"started Order items Advance requirementsPart requirements (dispositions) Stock Reserves Coverage of requirements in the dispo account (coverage of requirements increases the stock) Unordered requisitions Orders Stock orders Production orders Although documents such as goods receipts increase stock, they will never be seen in the MRP account because they do not represent a future movement but already reduce stock when the document is posted. Parts consumption and parts sales The dispatch account also shows how often the part has been used in the last year. For consumption, quantities are added up on transaction data in a certain period. The movement data includes goods withdrawals, goods receipts and direct deliveries not put into storage and production orders not put into storage. For Kanban parts, other evidence for the evaluation of consumption is included, namely the confirmed order items and the further processed part request items of the part. For Kanban parts it is not possible to use the two arrows to switch to the parts consumption overview in addition to the parts consumption, as the parts consumption for Kanban parts does not appear in this overview. Consumption from order items can be viewed via the sales item turnover display. The other consumptions via processed parts request items can only be viewed via the operation folder of the part. ### Instruction: Which module is being described? ### Response: This module is named Disposition account (demand forecast)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Disposition account (demand forecast) for me. ### Response: The purpose of the module Disposition account (demand forecast) is the following: The documents posted in the MRP account and certain data from the logistics account are displayed. In principle, only those open documents that represent planned departures or receipts should be posted in the MRP account (for example: open planned receipt: requirement request item not yet (completely) ordered, production order item not yet reported as finished, etc.; open planned retirement: order item not yet (completely) delivered, part requirement item not yet (completely) withdrawn, etc.). Based on the current stock level, the documents in the MRP account represent the future (planned) stock development in the date sequence. The stock level can fall below the minimum stock level for the respective part at any one time or even become negative. Such situations (minimum stock shortage, reorder point) are analysed in the requirements and stock list (see also date control). Attention - Irregularity with exceeded deadlines via the SCM module: When checking dates in SCM (missing parts list), note that planned receipt documents that are scheduled earlier than today and have not yet arrived are automatically scheduled as a \"tomorrow\" date! If an order was scheduled for 6.2.2012 and has a purchase order with the same date, but today is 7.2.2012 and the purchase order has not yet arrived, then the order is classified as a missing part and receives the shortage indicator in the MRP account. This item also appears in SCM as a missing part! (Technical note: If the variables checkInPastActivated and checkInPastGenerallyActivated are set to TRUE in SetOptions, this control is also active in the normal MRP account and the B&B list with schedule control). The disposition account can also be called up for individual company codes. Requirement triggers in the MRP account (requirement triggers reduce the stock): Project reservations with the status \"started Order items Advance requirementsPart requirements (dispositions) Stock Reserves Coverage of requirements in the dispo account (coverage of requirements increases the stock) Unordered requisitions Orders Stock orders Production orders Although documents such as goods receipts increase stock, they will never be seen in the MRP account because they do not represent a future movement but already reduce stock when the document is posted. Parts consumption and parts sales The dispatch account also shows how often the part has been used in the last year. For consumption, quantities are added up on transaction data in a certain period. The movement data includes goods withdrawals, goods receipts and direct deliveries not put into storage and production orders not put into storage. For Kanban parts, other evidence for the evaluation of consumption is included, namely the confirmed order items and the further processed part request items of the part. For Kanban parts it is not possible to use the two arrows to switch to the parts consumption overview in addition to the parts consumption, as the parts consumption for Kanban parts does not appear in this overview. Consumption from order items can be viewed via the sales item turnover display. The other consumptions via processed parts request items can only be viewed via the operation folder of the part.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order items with the status \"parts available\".: This module displays the disposition status of documents across all document types. The main purpose of this view is to check whether documents have been \"stuck\" within logistics, i.e. documents have not been processed further. ### Instruction: What is the name of this module? ### Response: The module being described is Order items with the status \"parts available\".."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Order items with the status \"parts available\". for me. ### Response: The module Order items with the status \"parts available\". is used for the following: This module displays the disposition status of documents across all document types. The main purpose of this view is to check whether documents have been \"stuck\" within logistics, i.e. documents have not been processed further.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Bookings: Selection window for transactions posted in one or more status monitors. ### Instruction: How is this module called? ### Response: This module is called Bookings."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Bookings serve? ### Response: The purpose of the module Bookings is as follows: Selection window for transactions posted in one or more status monitors.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open positions Representative: This module lists bookings on commission accounts. The listing of commission postings can be called up either for a single posting period or for all postings within a fiscal year. In the latter case, the current balance is displayed as a separate column - if sorted according to the \"Counter\" column. This module is called up from the module for displaying the financial accounting balances of a general or personal account. ### Instruction: Which module is being described? ### Response: The module being described is Open positions Representative."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Open positions Representative? ### Response: The module Open positions Representative can be described as follows: This module lists bookings on commission accounts. The listing of commission postings can be called up either for a single posting period or for all postings within a fiscal year. In the latter case, the current balance is displayed as a separate column - if sorted according to the \"Counter\" column. This module is called up from the module for displaying the financial accounting balances of a general or personal account.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open items accounts payable: With this module, bookings on accounts payable are listed. The list of vendor postings is called up either for a single posting period or for all postings within a fiscal year. In the latter case, the current balance is output as a separate column - if sorted according to the column \"Counter\". This module is called up from the module for displaying the financial accounting balances of a general or personal account. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Open items accounts payable."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Open items accounts payable used for? ### Response: The purpose of the module Open items accounts payable is the following: With this module, bookings on accounts payable are listed. The list of vendor postings is called up either for a single posting period or for all postings within a fiscal year. In the latter case, the current balance is output as a separate column - if sorted according to the column \"Counter\". This module is called up from the module for displaying the financial accounting balances of a general or personal account.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open items debtors: With this module, bookings on debtor accounts are listed. The listing of customer bookings can be called up either for a single posting period or for all bookings within a fiscal year. In the latter case, the current balance is output as a separate column - if sorted according to the column \"Counter\". This module is called up from the module for displaying the financial accounting balances of a general or personal account. ### Instruction: What is the name of this module? ### Response: This module is named Open items debtors."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Open items debtors serve? ### Response: The module Open items debtors can be described as follows: With this module, bookings on debtor accounts are listed. The listing of customer bookings can be called up either for a single posting period or for all bookings within a fiscal year. In the latter case, the current balance is output as a separate column - if sorted according to the column \"Counter\". This module is called up from the module for displaying the financial accounting balances of a general or personal account.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open positions employees: This module lists bookings on employee accounts. The listing of employee bookings can be called up either for a single posting period or for all bookings within a fiscal year. In the latter case, the current balance is displayed as a separate column - if sorted according to the column \"Counter\". This module is called up from the module for displaying the financial accounting balances of a general or personal account. ### Instruction: What is the name of this module? ### Response: This module is Open positions employees."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Open positions employees. ### Response: The purpose of the module Open positions employees is as follows: This module lists bookings on employee accounts. The listing of employee bookings can be called up either for a single posting period or for all bookings within a fiscal year. In the latter case, the current balance is displayed as a separate column - if sorted according to the column \"Counter\". This module is called up from the module for displaying the financial accounting balances of a general or personal account.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Picking - Shipping: The picking list for dispatch is the hub for the coordinator, as it provides him with an optimal overview of the order items that need to be delivered. (All order items with a delivery status are displayed, the logistical status of these items is displayed in the form of the planning status) By automatically creating delivery notes and goods withdrawals from the list, the coordinator can actively intervene in further processing.By printing the picking documents from the list, the packer receives his instructions. After completion of the work step, the picking papers, which have been extended by the package information, are returned to the coordinator. The coordinator can now enter the package data and report the delivery note as packed.Furthermore, the order processor receives an overview of the processing status of his orders. For this purpose, the list must be switched from the position view to the order view via the radio buttons. ### Instruction: How is this module called? ### Response: This module is Picking - Shipping."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Picking - Shipping for me. ### Response: The purpose of the module Picking - Shipping is the following: The picking list for dispatch is the hub for the coordinator, as it provides him with an optimal overview of the order items that need to be delivered. (All order items with a delivery status are displayed, the logistical status of these items is displayed in the form of the planning status) By automatically creating delivery notes and goods withdrawals from the list, the coordinator can actively intervene in further processing.By printing the picking documents from the list, the packer receives his instructions. After completion of the work step, the picking papers, which have been extended by the package information, are returned to the coordinator. The coordinator can now enter the package data and report the delivery note as packed.Furthermore, the order processor receives an overview of the processing status of his orders. For this purpose, the list must be switched from the position view to the order view via the radio buttons.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Worklist - Work orders: With this module, booked work sequences or work orders can be listed. By default, only the open work sequences/work orders are displayed, but this can be changed to a display of already completed work sequences/work orders via a setting in the options. If you select a workstation or a production area, the still open work sequences/work orders of these production points are displayed: you can see the still open work list of a production point. It is also possible to display all work sequences based on a customer order, warehouse order or advance requirements. This gives you the production workload or workload related to an order. The list can be compiled and filtered in various ways. This module can therefore also be regarded as an information and control tool within the production (e.g. in the production control or at master stations), e.g. for individual work sequences the production documents can also be printed out directly or times can be reported back (see context-sensitive menu per entry). ### Instruction: What is the name of the module being described? ### Response: The module being described is Worklist - Work orders."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Worklist - Work orders. ### Response: The purpose of the module Worklist - Work orders is as follows: With this module, booked work sequences or work orders can be listed. By default, only the open work sequences/work orders are displayed, but this can be changed to a display of already completed work sequences/work orders via a setting in the options. If you select a workstation or a production area, the still open work sequences/work orders of these production points are displayed: you can see the still open work list of a production point. It is also possible to display all work sequences based on a customer order, warehouse order or advance requirements. This gives you the production workload or workload related to an order. The list can be compiled and filtered in various ways. This module can therefore also be regarded as an information and control tool within the production (e.g. in the production control or at master stations), e.g. for individual work sequences the production documents can also be printed out directly or times can be reported back (see context-sensitive menu per entry).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Production order items: Display window for production order items, separated according to the respective states defined by the production process: started, interrupted, finished, provided, etc. The module is mainly used to provide finished production order items. ### Instruction: Name this module. ### Response: This module is Production order items."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Production order items for me. ### Response: The module Production order items can be described as follows: Display window for production order items, separated according to the respective states defined by the production process: started, interrupted, finished, provided, etc. The module is mainly used to provide finished production order items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Staging (staging status) - staging from stock: In order to be able to deliver products to customers or to be able to produce in a manufacturing plant at all, it must be guaranteed that the parts required for this are available at the right place at the desired time: This is called provision. This module is used for the display/further processing of parts to be provided or already provided within the logistics supply chain in a company. On the one hand, it is possible to differentiate between external demand triggers (sales order items) or internal demand triggers (storage and production orders). (For further selection options according to storage bins or only open documents, see below) A provision must therefore be made not only for the dispatch of goods, but also within the company within the framework of production. To be provided: Depending on the logistical identification (purchased or manufactured part) and the type of provision (non-stock-keeping or stock-keeping with corresponding special forms such as JIT, etc.) of a part, parts are supplied to the logistical business process from Order requirements (for purchased parts not kept in stock) construction contracts (for production parts not kept in stock) or Storage reservations If the corresponding programme steps for provision are carried out, the documents affected by this, such as part requests, are automatically transferred to the next status: Provided: Analogous to the states of the parts to be provided, the following states result here Provided: Goods receipt Provided: Manufacturing Provided: Warehouse Provided: Shipping The state \"dispatch\" stands for those parts which are sent directly from the warehouse to dispatch for customer orders. (The part is kept in stock and the requirement trigger is a customer order) The programmatic execution of the provision from purchase requisitions - carried out by employees of the incoming goods department - and the provision from production orders - possibly carried out by employees of a final inspection - are not absolutely necessary, but they facilitate the control over the whereabouts of parts. The provision from stock reservations - carried out by employees of the warehouse - leads in the standard system to the creation of stock withdrawal documents (stock removal documents). In the case of KANBAN parts or special material withdrawals, staging is carried out in the same way as for warehouse reservations, but no goods withdrawal documents are created for these staging types. Instead, when the menu item \"Create goods withdrawal from selected items\" is selected, the selected items are immediately technically staged and a withdrawal slip is printed out. After a conversion of a production bill of materials, parts request items have the status \"Return to stock\". A putaway must be created for these documents in order to switch them to the final status \"put away\" and to clear them from the MRP account as planned receipts. See conversion parts lists. ### Instruction: What is the name of this module? ### Response: The module being described is Staging (staging status) - staging from stock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Staging (staging status) - staging from stock serve? ### Response: The module Staging (staging status) - staging from stock serves the purpose of the following: In order to be able to deliver products to customers or to be able to produce in a manufacturing plant at all, it must be guaranteed that the parts required for this are available at the right place at the desired time: This is called provision. This module is used for the display/further processing of parts to be provided or already provided within the logistics supply chain in a company. On the one hand, it is possible to differentiate between external demand triggers (sales order items) or internal demand triggers (storage and production orders). (For further selection options according to storage bins or only open documents, see below) A provision must therefore be made not only for the dispatch of goods, but also within the company within the framework of production. To be provided: Depending on the logistical identification (purchased or manufactured part) and the type of provision (non-stock-keeping or stock-keeping with corresponding special forms such as JIT, etc.) of a part, parts are supplied to the logistical business process from Order requirements (for purchased parts not kept in stock) construction contracts (for production parts not kept in stock) or Storage reservations If the corresponding programme steps for provision are carried out, the documents affected by this, such as part requests, are automatically transferred to the next status: Provided: Analogous to the states of the parts to be provided, the following states result here Provided: Goods receipt Provided: Manufacturing Provided: Warehouse Provided: Shipping The state \"dispatch\" stands for those parts which are sent directly from the warehouse to dispatch for customer orders. (The part is kept in stock and the requirement trigger is a customer order) The programmatic execution of the provision from purchase requisitions - carried out by employees of the incoming goods department - and the provision from production orders - possibly carried out by employees of a final inspection - are not absolutely necessary, but they facilitate the control over the whereabouts of parts. The provision from stock reservations - carried out by employees of the warehouse - leads in the standard system to the creation of stock withdrawal documents (stock removal documents). In the case of KANBAN parts or special material withdrawals, staging is carried out in the same way as for warehouse reservations, but no goods withdrawal documents are created for these staging types. Instead, when the menu item \"Create goods withdrawal from selected items\" is selected, the selected items are immediately technically staged and a withdrawal slip is printed out. After a conversion of a production bill of materials, parts request items have the status \"Return to stock\". A putaway must be created for these documents in order to switch them to the final status \"put away\" and to clear them from the MRP account as planned receipts. See conversion parts lists."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Deployment (deployment status): In order to be able to deliver products to customers or to be able to produce in a manufacturing plant at all, it must be guaranteed that the parts required for this are available at the right place at the desired time: This is called provision. This module is used for the display/further processing of parts to be provided or already provided within the logistics supply chain in a company. On the one hand, it is possible to differentiate between external demand triggers (sales order items) or internal demand triggers (storage and production orders). (For further selection options according to storage bins or only open documents, see below) A provision must therefore be made not only for the dispatch of goods, but also within the company within the framework of production. To be provided: Depending on the logistical identification (purchased or manufactured part) and the type of provision (non-stock-keeping or stock-keeping with corresponding special forms such as JIT, etc.) of a part, parts are supplied to the logistical business process from Order requirements (for purchased parts not kept in stock) construction contracts (for production parts not kept in stock) or Storage reservations The programmatic execution of the provision from purchase requisitions - carried out by employees of the incoming goods department - and the provision from production orders - possibly carried out by employees of a final inspection - are not absolutely necessary, but they facilitate the control over the whereabouts of parts. The provision from stock reservations - carried out by employees of the warehouse - leads in the standard system to the creation of stock withdrawal documents (stock removal documents). In the case of KANBAN parts or special material withdrawals, staging is carried out in the same way as for warehouse reservations, but no goods withdrawal documents are created for these staging types. Instead, when the menu item \"Create goods withdrawal from selected items\" is selected, the selected items are immediately technically staged and a withdrawal slip is printed out. If the corresponding programme steps for provision have been carried out, the part requests are automatically transferred to the next state (status): Provided: Analogous to the states of the parts to be provided, the following states result here Provided: Goods receipt Provided: Manufacturing Provided: Warehouse Provided: Shipping The state \"dispatch\" stands for those parts which are sent directly from the warehouse to dispatch for customer orders. (The part is kept in stock and the requirement trigger is a customer order). ### Instruction: How is this module called? ### Response: The module being described is Deployment (deployment status)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Deployment (deployment status)? ### Response: The purpose of the module Deployment (deployment status) is the following: In order to be able to deliver products to customers or to be able to produce in a manufacturing plant at all, it must be guaranteed that the parts required for this are available at the right place at the desired time: This is called provision. This module is used for the display/further processing of parts to be provided or already provided within the logistics supply chain in a company. On the one hand, it is possible to differentiate between external demand triggers (sales order items) or internal demand triggers (storage and production orders). (For further selection options according to storage bins or only open documents, see below) A provision must therefore be made not only for the dispatch of goods, but also within the company within the framework of production. To be provided: Depending on the logistical identification (purchased or manufactured part) and the type of provision (non-stock-keeping or stock-keeping with corresponding special forms such as JIT, etc.) of a part, parts are supplied to the logistical business process from Order requirements (for purchased parts not kept in stock) construction contracts (for production parts not kept in stock) or Storage reservations The programmatic execution of the provision from purchase requisitions - carried out by employees of the incoming goods department - and the provision from production orders - possibly carried out by employees of a final inspection - are not absolutely necessary, but they facilitate the control over the whereabouts of parts. The provision from stock reservations - carried out by employees of the warehouse - leads in the standard system to the creation of stock withdrawal documents (stock removal documents). In the case of KANBAN parts or special material withdrawals, staging is carried out in the same way as for warehouse reservations, but no goods withdrawal documents are created for these staging types. Instead, when the menu item \"Create goods withdrawal from selected items\" is selected, the selected items are immediately technically staged and a withdrawal slip is printed out. If the corresponding programme steps for provision have been carried out, the part requests are automatically transferred to the next state (status): Provided: Analogous to the states of the parts to be provided, the following states result here Provided: Goods receipt Provided: Manufacturing Provided: Warehouse Provided: Shipping The state \"dispatch\" stands for those parts which are sent directly from the warehouse to dispatch for customer orders. (The part is kept in stock and the requirement trigger is a customer order)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stock bookings: Warehouse movements are storage, removal, stock transfers, inventories and warehouse execution documents, whereby the latter are only used as part of the Hestia WMS. Each stock movement is posted directly to the part, to the SLM (if available) and to the storage bin as an activity. ### Instruction: How is this module called? ### Response: This module is called Stock bookings."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Stock bookings for me. ### Response: The module Stock bookings serves the purpose of the following: Warehouse movements are storage, removal, stock transfers, inventories and warehouse execution documents, whereby the latter are only used as part of the Hestia WMS. Each stock movement is posted directly to the part, to the SLM (if available) and to the storage bin as an activity.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Receipts relevant to costs: This document can be used to display all cost-relevant documents of an order, a group of order items or individual order items. The list is used for closer control (drill down) of the costs shown in the final costing or when determining the stock of unfinished products. For further information on the valuation of work in progress or post-calculation, please refer to the monthly financial statements. ### Instruction: Tell me the name of this module. ### Response: This module is called Receipts relevant to costs."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Receipts relevant to costs used for? ### Response: The module Receipts relevant to costs can be described as follows: This document can be used to display all cost-relevant documents of an order, a group of order items or individual order items. The list is used for closer control (drill down) of the costs shown in the final costing or when determining the stock of unfinished products. For further information on the valuation of work in progress or post-calculation, please refer to the monthly financial statements.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of System login without selecting a client or user: This module is used to start an application without entering a client or a user. It is to all other system login modules. If no client is created, the message NEW_CYBER is sent. After receiving the message CYBER_CREATED, the client is saved as a client. Only the client first created in the database is automatically selected. The database layer \"1\" always applies !. ### Instruction: Which module is being described? ### Response: The module being described is System login without selecting a client or user."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module System login without selecting a client or user? ### Response: The module System login without selecting a client or user is used for the following: This module is used to start an application without entering a client or a user. It is to all other system login modules. If no client is created, the message NEW_CYBER is sent. After receiving the message CYBER_CREATED, the client is saved as a client. Only the client first created in the database is automatically selected. The database layer \"1\" always applies !."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Representative Login: With this app, a logged-in user can take over the rights of another user account. In contrast to the alias login, only the rights are taken over; the logged-in user is used in change histories or for editor information. For this function, the user must have the system access right \"Allow alias login\".Possible scenarios are, for example, the processing of documents of users who are absent at short notice by the support or back office. If a user is available, as a better alternative he can grant another user access to his user account by means of the substitute definition. ### Instruction: Tell me the name of this module. ### Response: This module is Representative Login."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Representative Login. ### Response: The purpose of the module Representative Login is as follows: With this app, a logged-in user can take over the rights of another user account. In contrast to the alias login, only the rights are taken over; the logged-in user is used in change histories or for editor information. For this function, the user must have the system access right \"Allow alias login\".Possible scenarios are, for example, the processing of documents of users who are absent at short notice by the support or back office. If a user is available, as a better alternative he can grant another user access to his user account by means of the substitute definition.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Alias Login: This app allows a logged-in user to swap their login with another user's account. For this function, the user must have the system access right \"Allow alias login\". After a user is accepted, the machine behaves as if the selected user had logged in himself. This allows you to log in to the system as a user whose password you do not know. Possible scenarios are e.g. the re-enactment of certain errors with exactly this user (support) or the necessary access to a user account of a user who is not available. If a user is available, as a better alternative he can grant another user access to his user account by means of the substitute regulation. ### Instruction: What is the name of this module? ### Response: This module is called English:Alias Login."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:Alias Login used for? ### Response: The purpose of the module English:Alias Login is the following: This app allows a logged-in user to swap their login with another user's account. For this function, the user must have the system access right \"Allow alias login\". After a user is accepted, the machine behaves as if the selected user had logged in himself. This allows you to log in to the system as a user whose password you do not know. Possible scenarios are e.g. the re-enactment of certain errors with exactly this user (support) or the necessary access to a user account of a user who is not available. If a user is available, as a better alternative he can grant another user access to his user account by means of the substitute regulation.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Logout: This app is called up when a user presses or selects the button or menu item to log off. With this app, the user can confirm logoff or select certain settings. ### Instruction: What is the name of this module? ### Response: This module is named English:Logout."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module English:Logout? ### Response: The module English:Logout serves the purpose of the following: This app is called up when a user presses or selects the button or menu item to log off. With this app, the user can confirm logoff or select certain settings.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of System Login by entering a user: This module is used to start an application by entering a user. A password must be entered at the same time. If no client is created, the message NEW_CYBER is sent. After receiving the message CYBER_CREATED, the client is saved as a client. Only the client first created in the database is automatically selected. If no user is created, the message NEW_USER is sent. After receiving the USER_CREATED message, this user is used to log in to this machine. The database layer \"1\" always applies !. ### Instruction: Tell me the name of this module. ### Response: This module is called System Login by entering a user."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module System Login by entering a user used for? ### Response: The module System Login by entering a user serves the purpose of the following: This module is used to start an application by entering a user. A password must be entered at the same time. If no client is created, the message NEW_CYBER is sent. After receiving the message CYBER_CREATED, the client is saved as a client. Only the client first created in the database is automatically selected. If no user is created, the message NEW_USER is sent. After receiving the USER_CREATED message, this user is used to log in to this machine. The database layer \"1\" always applies !."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Machine: Machines are treated in the ClassiX® system as a special manifestation of parts, i.e. according to the linguistic usage of object orientation, one also says that machines are derived from parts, machines are inherited from parts. The same applies to industrial plants, which are also derived from parts. Machines are thus individually identifiable larger units used as plants. In contrast, tools are defined as part roles in the ClassiX® system, just as plants are defined as part roles in ClassiX®. Machines have a manufacturer, are assigned to a workplace and incur costs. In operation, they can have standard set-up and piece times, they require tools and have a direct connection to the plant master. For preventive maintenance, work plans can be assigned to the machines as maintenance plans. Based on these maintenance plans, maintenance orders (in the form of production orders) are created. All work created for a maintenance plan is recorded in the maintenance account of the machine. By means of the start date, the periodicity and the last work carried out, the system can then automatically determine in the maintenance module which maintenance orders are due next. ### Instruction: How is this module called? ### Response: This module is called Machine."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Machine for me. ### Response: The module Machine is used for the following: Machines are treated in the ClassiX® system as a special manifestation of parts, i.e. according to the linguistic usage of object orientation, one also says that machines are derived from parts, machines are inherited from parts. The same applies to industrial plants, which are also derived from parts. Machines are thus individually identifiable larger units used as plants. In contrast, tools are defined as part roles in the ClassiX® system, just as plants are defined as part roles in ClassiX®. Machines have a manufacturer, are assigned to a workplace and incur costs. In operation, they can have standard set-up and piece times, they require tools and have a direct connection to the plant master. For preventive maintenance, work plans can be assigned to the machines as maintenance plans. Based on these maintenance plans, maintenance orders (in the form of production orders) are created. All work created for a maintenance plan is recorded in the maintenance account of the machine. By means of the start date, the periodicity and the last work carried out, the system can then automatically determine in the maintenance module which maintenance orders are due next.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Maintenance: If preventive maintenance work is required on machines, these maintenance plans (in the form of task lists) must be assigned to the machines. This assignment is made in the module for maintenance of the machines ( Maintenance tab). There it is also defined from which date with which periodicity certain maintenance work must be carried out. If a maintenance order (in the form of a production order) is then issued, it is posted at the machine. This enables a reliable check of the maintenance work already carried out, and at the same time it is possible to determine when the next maintenance work is to be carried out again. The task of this module is to find the machines and their maintenance plans for which maintenance work is required next. ### Instruction: What is the name of this module? ### Response: This module is Maintenance."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Maintenance serve? ### Response: The module Maintenance serves the purpose of the following: If preventive maintenance work is required on machines, these maintenance plans (in the form of task lists) must be assigned to the machines. This assignment is made in the module for maintenance of the machines ( Maintenance tab). There it is also defined from which date with which periodicity certain maintenance work must be carried out. If a maintenance order (in the form of a production order) is then issued, it is posted at the machine. This enables a reliable check of the maintenance work already carried out, and at the same time it is possible to determine when the next maintenance work is to be carried out again. The task of this module is to find the machines and their maintenance plans for which maintenance work is required next.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Recurring payment: The conditions \"Recurring payments\" are payment plans of a cyclical nature. They can be used for sales orders with the order type \"maintenance contract\" and control the billing cycle here. A maintenance payment can be of three different types: 1. cyclical lump sum payment 2. frame + expenditure 3. expenditure. ### Instruction: How is this module called? ### Response: This module is called Recurring payment."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Recurring payment? ### Response: The purpose of the module Recurring payment is the following: The conditions \"Recurring payments\" are payment plans of a cyclical nature. They can be used for sales orders with the order type \"maintenance contract\" and control the billing cycle here. A maintenance payment can be of three different types: 1. cyclical lump sum payment 2. frame + expenditure 3. expenditure."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Test equipment: Some tools have to be calibrated or checked regularly for their measuring accuracy. For this purpose, so-called test equipment is required to carry out this test or with which the test is performed. These inspection devices are managed and maintenance work is carried out here. The maintenance work due can be determined via the evaluation: Activities -> Production -> Maintenance and processed further from here. ### Instruction: Name this module. ### Response: This module is named Test equipment."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Test equipment? ### Response: The purpose of the module Test equipment is as follows: Some tools have to be calibrated or checked regularly for their measuring accuracy. For this purpose, so-called test equipment is required to carry out this test or with which the test is performed. These inspection devices are managed and maintenance work is carried out here. The maintenance work due can be determined via the evaluation: Activities -> Production -> Maintenance and processed further from here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Member - Dynamic data fields: With this application you can create, persist and then maintain members. One must be aware that only persistent members can and should be changed. Therefore you have to make created, first transient, members persistent at runtime, only then you are allowed to change them. Transient members of the ClassiX® system, i.e. members that are loaded from the *.DIC and *.INI files when the system is started, may neither be changed nor made persistent. Once created and made persistent, members can no longer be deleted. Once created and made transient members cannot be deleted either, but they will no longer be present when the system is next booted. Making members persistent only works from the list window, this is a security measure. For example, if you have created several transient members and you don't want to keep one of them, you can make the members you want to keep persistent, restart the system and then only the persisted members will be available. The created transient member will no longer be displayed. ### Instruction: Which module is being described? ### Response: This module is named Member - Dynamic data fields."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Member - Dynamic data fields for me. ### Response: The purpose of the module Member - Dynamic data fields is as follows: With this application you can create, persist and then maintain members. One must be aware that only persistent members can and should be changed. Therefore you have to make created, first transient, members persistent at runtime, only then you are allowed to change them. Transient members of the ClassiX® system, i.e. members that are loaded from the *.DIC and *.INI files when the system is started, may neither be changed nor made persistent. Once created and made persistent, members can no longer be deleted. Once created and made transient members cannot be deleted either, but they will no longer be present when the system is next booted. Making members persistent only works from the list window, this is a security measure. For example, if you have created several transient members and you don't want to keep one of them, you can make the members you want to keep persistent, restart the system and then only the persisted members will be available. The created transient member will no longer be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Meta Access: Meta-Access objects represent the data fields and access paths in the meta model. They are created automatically for data fields via the ObjectCrawler and manually for access paths with procedure or function calls. The master of a Meta-Access object is always a Meta-Object. In case the type of the return value of the Meta-Access object is a reference (object or list), the respective target objects are again meta objects. ### Instruction: Tell me the name of this module. ### Response: The module being described is English:Meta Access."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Meta Access for me. ### Response: The module English:Meta Access can be described as follows: Meta-Access objects represent the data fields and access paths in the meta model. They are created automatically for data fields via the ObjectCrawler and manually for access paths with procedure or function calls. The master of a Meta-Access object is always a Meta-Object. In case the type of the return value of the Meta-Access object is a reference (object or list), the respective target objects are again meta objects.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Metainfo: This app displays the inheritance path of the CyberEnterprise classes and their defined attributes and methods. Furthermore, all dynamic data fields (slots) defined in the system, all methods of the SystemObject and the class methods that can be used in queries are displayed. ### Instruction: What is the name of the module being described? ### Response: The name of this module is English:Metainfo."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:Metainfo used for? ### Response: The purpose of the module English:Metainfo is the following: This app displays the inheritance path of the CyberEnterprise classes and their defined attributes and methods. Furthermore, all dynamic data fields (slots) defined in the system, all methods of the SystemObject and the class methods that can be used in queries are displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:meta model: Due to its business model classes and data fields, Classix does not have a rigid model and therefore no central administration of entities and data fields. In order to be able to describe the dynamically created objects, their attributes and relationships, an ObjectCrawler is implemented with this module, which independently scans the database, collects, examines and categorises objects and stores this information as meta-description. These meta descriptions of the objects and their attributes and relationships can then be maintained here. Before starting the search, you must define the settings for the search, on which the speed and duration of the search depend. The following settings are available: Under the boundary conditions you can specify the maximum age of the meta-info. To speed up the search, meta-information is not overwritten and skipped if it is younger than the set date. Transaction splitting is used to specify after how many transactions (analyses of meta objects) the results are saved in the database. The maximum collection depth specifies how many elements of an M1, MN relation, or collection are analysed (if set to 0, all elements of a collection are searched). The maximum collection depth can significantly influence the duration of the crawling process, a value of 500, and 5 for very large databases, can lead to fast results. Equally important for the duration of the crawling process is the recursion depth parameter (-1 stands for infinite depth). The recursion depth determines how far the crawler should recursively examine the references of an object. Regardless of this setting, the ObjectCrawler always performs a width search, i.e. referenced objects are only examined after all siblings of an object have been examined. The last and most important option is the REP start index, which tells where the object crawler is located when searching the database. The crawler searches the database in such a way that it takes a single object from each REP and examines it to get a clear and meaningful picture of the database as quickly as possible. This so-called REP start index determines the current (start) index of this object extraction from the REPs. -1 lets the crawler take a random element from each REP, but if you want to do a full scan, you should start at 0 and observe the increment of this value to know where the crawler is at that moment. If this value exceeds the maximum length of a REP, the crawler is automatically stopped and you have thus scanned the entire REP. Under the runtime options you can limit the crawling duration of the object crawler. By default you let the crawler run until you stop it (the cancel button in the progressbar window closes the search with EndTXN and therefore the button is more a stop button than a cancel button) or until it is finished. You can stop the crawler automatically after the first run by selecting the option with the same name or only when the queue with all REP objects from the first run including their referenced objects is processed and empty by selecting the corresponding option Stop crawler when queue is empty. Depending on the selected option, you can control the behaviour in case of errors. In this sense, errors are not InstantView errors but logical consistency errors in the database. It is recommended to select the option Log error and continue. Under other settings you can define various options like: ObjectCrawler logging: all ObjectCrawler operations are written to separate log files. Process backreferences intelligently: if this option is selected, certain class checks are performed when examining backreferences to prevent errors. ### Instruction: What is the name of this module? ### Response: This module is named English:meta model."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:meta model for me. ### Response: The purpose of the module English:meta model is as follows: Due to its business model classes and data fields, Classix does not have a rigid model and therefore no central administration of entities and data fields. In order to be able to describe the dynamically created objects, their attributes and relationships, an ObjectCrawler is implemented with this module, which independently scans the database, collects, examines and categorises objects and stores this information as meta-description. These meta descriptions of the objects and their attributes and relationships can then be maintained here. Before starting the search, you must define the settings for the search, on which the speed and duration of the search depend. The following settings are available: Under the boundary conditions you can specify the maximum age of the meta-info. To speed up the search, meta-information is not overwritten and skipped if it is younger than the set date. Transaction splitting is used to specify after how many transactions (analyses of meta objects) the results are saved in the database. The maximum collection depth specifies how many elements of an M1, MN relation, or collection are analysed (if set to 0, all elements of a collection are searched). The maximum collection depth can significantly influence the duration of the crawling process, a value of 500, and 5 for very large databases, can lead to fast results. Equally important for the duration of the crawling process is the recursion depth parameter (-1 stands for infinite depth). The recursion depth determines how far the crawler should recursively examine the references of an object. Regardless of this setting, the ObjectCrawler always performs a width search, i.e. referenced objects are only examined after all siblings of an object have been examined. The last and most important option is the REP start index, which tells where the object crawler is located when searching the database. The crawler searches the database in such a way that it takes a single object from each REP and examines it to get a clear and meaningful picture of the database as quickly as possible. This so-called REP start index determines the current (start) index of this object extraction from the REPs. -1 lets the crawler take a random element from each REP, but if you want to do a full scan, you should start at 0 and observe the increment of this value to know where the crawler is at that moment. If this value exceeds the maximum length of a REP, the crawler is automatically stopped and you have thus scanned the entire REP. Under the runtime options you can limit the crawling duration of the object crawler. By default you let the crawler run until you stop it (the cancel button in the progressbar window closes the search with EndTXN and therefore the button is more a stop button than a cancel button) or until it is finished. You can stop the crawler automatically after the first run by selecting the option with the same name or only when the queue with all REP objects from the first run including their referenced objects is processed and empty by selecting the corresponding option Stop crawler when queue is empty. Depending on the selected option, you can control the behaviour in case of errors. In this sense, errors are not InstantView errors but logical consistency errors in the database. It is recommended to select the option Log error and continue. Under other settings you can define various options like: ObjectCrawler logging: all ObjectCrawler operations are written to separate log files. Process backreferences intelligently: if this option is selected, certain class checks are performed when examining backreferences to prevent errors.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:meta object: A meta object represents a group of identical or similar objects of an application solution. It is similar because different objects, for example of the same class \"CX_CUSTOMER\", can differ from each other by the number and type of data fields. Nevertheless, such \"similar\" objects are combined in the meta model to form a meta object \"customer\". This meta-object is then described by the totality of all possible data fields. Meta-Objects are created exclusively by the ObjectCrawler. ### Instruction: How is this module called? ### Response: This module is called English:meta object."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module English:meta object. ### Response: The purpose of the module English:meta object is as follows: A meta object represents a group of identical or similar objects of an application solution. It is similar because different objects, for example of the same class \"CX_CUSTOMER\", can differ from each other by the number and type of data fields. Nevertheless, such \"similar\" objects are combined in the meta model to form a meta object \"customer\". This meta-object is then described by the totality of all possible data fields. Meta-Objects are created exclusively by the ObjectCrawler.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Mini-Workbench: The Mini-Workbench allows the user to modify the application. If a window is edited with the Mini-Workbench, the ClassiX Shell is extended by a toggle button (red/green circle), which allows to switch from the editing mode to the normal mode and vice versa. ### Instruction: What is the name of the module being described? ### Response: The module being described is English:Mini-Workbench."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:Mini-Workbench used for? ### Response: The module English:Mini-Workbench is used for the following: The Mini-Workbench allows the user to modify the application. If a window is edited with the Mini-Workbench, the ClassiX Shell is extended by a toggle button (red/green circle), which allows to switch from the editing mode to the normal mode and vice versa.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Dynamic binding of variables: If a formula or condition is to be calculated/resolved in ClassiX and variables (usually attributes) are missing, the user can query them in this window. This may be the case, for example, if a variant part or a conditional bill of material is to be exploded and not all attributes are specified. This query is only made at the time the condition/formula is resolved. The attribute values entered here are not written off, but only taken into account for the one-time resolution. Therefore, it is usually recommended to leave this window via \"Cancel\" and rather add the missing attributes to the document. ### Instruction: Which module is being described? ### Response: This module is named Dynamic binding of variables."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Dynamic binding of variables for me. ### Response: The purpose of the module Dynamic binding of variables is the following: If a formula or condition is to be calculated/resolved in ClassiX and variables (usually attributes) are missing, the user can query them in this window. This may be the case, for example, if a variant part or a conditional bill of material is to be exploded and not all attributes are specified. This query is only made at the time the condition/formula is resolved. The attribute values entered here are not written off, but only taken into account for the one-time resolution. Therefore, it is usually recommended to leave this window via \"Cancel\" and rather add the missing attributes to the document.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Editing bank statements: This module allows to import account statements, which are provided by banks in the context of online banking as files (*.STA) in MT940 format, into ClassiX® and to transfer them to the financial accounting. On the basis of the imported data, the module automatically determines the appropriate account assignment, e.g. by searching for invoice, customer or other numbers or specific usage texts. This initial account assignment can also be carried out or maintained manually by the user. Since banks usually transmit the data from different accounts in only one file, options can be used to set whether the statement data of accounts (and/or banks) not defined in the system should simply be read over. It can also be specified in the data of current accounts stored in the system whether these should not be read in. If data from a file has not been read in, a corresponding warning message is issued. If individual (or all) postings on a bank statement have been automatically pre-assigned or post-processed, these (or the bank statement as a whole) can be transferred to financial accounting. ### Instruction: How is this module called? ### Response: This module is named Editing bank statements."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Editing bank statements. ### Response: The module Editing bank statements is used for the following: This module allows to import account statements, which are provided by banks in the context of online banking as files (*.STA) in MT940 format, into ClassiX® and to transfer them to the financial accounting. On the basis of the imported data, the module automatically determines the appropriate account assignment, e.g. by searching for invoice, customer or other numbers or specific usage texts. This initial account assignment can also be carried out or maintained manually by the user. Since banks usually transmit the data from different accounts in only one file, options can be used to set whether the statement data of accounts (and/or banks) not defined in the system should simply be read over. It can also be specified in the data of current accounts stored in the system whether these should not be read in. If data from a file has not been read in, a corresponding warning message is issued. If individual (or all) postings on a bank statement have been automatically pre-assigned or post-processed, these (or the bank statement as a whole) can be transferred to financial accounting.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Build a neural network: This app is used to create, train and test a neural network. The input data can be made available to the neural network from the system via a list or via an external Excel file. ### Instruction: What is the name of the module being described? ### Response: This module is named Build a neural network."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Build a neural network. ### Response: The purpose of the module Build a neural network is as follows: This app is used to create, train and test a neural network. The input data can be made available to the neural network from the system via a list or via an external Excel file.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Neural network query: This app can be used to call up and query networks stored in the system. ### Instruction: How is this module called? ### Response: The module being described is Neural network query."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Neural network query serve? ### Response: The module Neural network query is used for the following: This app can be used to call up and query networks stored in the system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Newsletter2Go Interface: The interface enables the synchronisation of persons, employees and contact persons with Newsletter2Go. You can add people, employees and contacts to lists, remove them from lists, lock them via the blacklist and unlock them again. ### Instruction: Tell me the name of this module. ### Response: This module is Newsletter2Go Interface."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Newsletter2Go Interface? ### Response: The module Newsletter2Go Interface serves the purpose of the following: The interface enables the synchronisation of persons, employees and contact persons with Newsletter2Go. You can add people, employees and contacts to lists, remove them from lists, lock them via the blacklist and unlock them again.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Count objects: The module is used to count all objects in the database and provides an overview of which objects can be found in the database and how often. ### Instruction: Which module is being described? ### Response: This module is Count objects."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Count objects serve? ### Response: The module Count objects is used for the following: The module is used to count all objects in the database and provides an overview of which objects can be found in the database and how often.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Object Query: Based on SQL (Standard Query Language), this module can be used to query data from the object-oriented database of ClassiX®. A common use of SQL is to output certain data fields (using the SELECT statement) from a table (specified with FROM) as a result list under certain conditions (specified with WHERE). Similarly, a list of objects can be selected in this module from which data can be output (FROM \"REP collection\"). The objects of such a list belong to a certain class or a class inherited from this class. Therefore you have to consider which (\"SELECT\") data fields you select, furthermore you can query any free data fields (slots) from the objects. Due to the use of an object-oriented database, the selected data fields - nested within themselves - can be references (POINTER or REL_1M) to other objects. This module supports the construction of such data access paths by simple navigation to the referenced classes, such as reference_to_object_1.reference_to_object_2.reference_to_object_3.target_data_field_in_object_3 (the individual references are connected with \".\" each other). Since such access paths can also contain function or method calls, the classes also output their methods. Once you have selected your (\"SELECT\") data fields, you can further specify the selection of data to be displayed by a (\"WHERE\") specification, which must be specified here in the form of a query expression or InstantView® script. The result of the script must always return either TRUE/an Object/1 or FALSE/INVALID/0. After entering all criteria, the result list is displayed in a separate window as an object list. ### Instruction: What is the name of the module being described? ### Response: The name of this module is English:Object Query."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Object Query for me. ### Response: The purpose of the module English:Object Query is the following: Based on SQL (Standard Query Language), this module can be used to query data from the object-oriented database of ClassiX®. A common use of SQL is to output certain data fields (using the SELECT statement) from a table (specified with FROM) as a result list under certain conditions (specified with WHERE). Similarly, a list of objects can be selected in this module from which data can be output (FROM \"REP collection\"). The objects of such a list belong to a certain class or a class inherited from this class. Therefore you have to consider which (\"SELECT\") data fields you select, furthermore you can query any free data fields (slots) from the objects. Due to the use of an object-oriented database, the selected data fields - nested within themselves - can be references (POINTER or REL_1M) to other objects. This module supports the construction of such data access paths by simple navigation to the referenced classes, such as reference_to_object_1.reference_to_object_2.reference_to_object_3.target_data_field_in_object_3 (the individual references are connected with \".\" each other). Since such access paths can also contain function or method calls, the classes also output their methods. Once you have selected your (\"SELECT\") data fields, you can further specify the selection of data to be displayed by a (\"WHERE\") specification, which must be specified here in the form of a query expression or InstantView® script. The result of the script must always return either TRUE/an Object/1 or FALSE/INVALID/0. After entering all criteria, the result list is displayed in a separate window as an object list.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Loading objects: ... ### Instruction: Tell me the name of this module. ### Response: This module is named Loading objects."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Loading objects used for? ### Response: The module Loading objects is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Edit order term entries: Easy editing of objects in an ordinal term.Functionality Input window. ### Instruction: Tell me the name of this module. ### Response: This module is Edit order term entries."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Edit order term entries used for? ### Response: The module Edit order term entries serves the purpose of the following: Easy editing of objects in an ordinal term.Functionality Input window."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Object Web Crawler: The object web crawler runs through the database and automatically creates data connectors for the objects found. The data connectors then receive data fields matching the objects, so that in the end the data fields of a data connector represent the superset of the used slots and members of all objects of this data connector. A detailed description of the crawler's logic can be found in the technical documentation. ### Instruction: Which module is being described? ### Response: This module is Object Web Crawler."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Object Web Crawler used for? ### Response: The module Object Web Crawler is used for the following: The object web crawler runs through the database and automatically creates data connectors for the objects found. The data connectors then receive data fields matching the objects, so that in the end the data fields of a data connector represent the superset of the used slots and members of all objects of this data connector. A detailed description of the crawler's logic can be found in the technical documentation.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of CyberEnterprise Inspector: This module \"CyberEnterprise Inspector\" is a collection of universal display and editing tools for the objects stored in a database. The Inspector basically fulfils three tasks: Display objects and collections (object lists) Editing data fields in objects navigate from one object to other objects via pointers and relations The Inspector also has a number of tools for advanced direct operations with objects and/or the database. Because the Object Inspector provides a user-friendly environment for direct data access, it is recommended to grant access to the CyberEnterprise Inspector only to specially trained users. ### Instruction: What is the name of this module? ### Response: The name of this module is CyberEnterprise Inspector."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module CyberEnterprise Inspector used for? ### Response: The purpose of the module CyberEnterprise Inspector is as follows: This module \"CyberEnterprise Inspector\" is a collection of universal display and editing tools for the objects stored in a database. The Inspector basically fulfils three tasks: Display objects and collections (object lists) Editing data fields in objects navigate from one object to other objects via pointers and relations The Inspector also has a number of tools for advanced direct operations with objects and/or the database. Because the Object Inspector provides a user-friendly environment for direct data access, it is recommended to grant access to the CyberEnterprise Inspector only to specially trained users.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Object Navigator: The Object Navigator enables a three-dimensional view of objects and their connections. It attempts to enable the user to understand the data by additionally displaying the context of an object (the neighbouring objects connected to it). It is possible to follow up connections by adding its context to one of the displayed objects. Thus, paths between objects within the database can be investigated. There is a general display mode for the objects, but if required, it is also possible to switch to correspondingly optimised displays for special circumstances. ### Instruction: How is this module called? ### Response: This module is Object Navigator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Object Navigator used for? ### Response: The purpose of the module Object Navigator is as follows: The Object Navigator enables a three-dimensional view of objects and their connections. It attempts to enable the user to understand the data by additionally displaying the context of an object (the neighbouring objects connected to it). It is possible to follow up connections by adding its context to one of the displayed objects. Thus, paths between objects within the database can be investigated. There is a general display mode for the objects, but if required, it is also possible to switch to correspondingly optimised displays for special circumstances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Customer documentation: The \"Customer Documentation\" module is used to compile all user manuals and documents of an order which have to be provided to the customer. This document is therefore always the successor of an order. The processing of this type of table of contents is carried out parallel to the delivery notes, because the documents are usually not an order item or refer directly to such items, if the parts to be documented only appear in the parts list, for example. ### Instruction: Name this module. ### Response: The name of this module is Customer documentation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Customer documentation for me. ### Response: The purpose of the module Customer documentation is the following: The \"Customer Documentation\" module is used to compile all user manuals and documents of an order which have to be provided to the customer. This document is therefore always the successor of an order. The processing of this type of table of contents is carried out parallel to the delivery notes, because the documents are usually not an order item or refer directly to such items, if the parts to be documented only appear in the parts list, for example.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Offer and order: In the corresponding main window you can create an offer or an order. Here you select all information and set all values that should apply to the entire document and all sub-items, e.g. certain infrastructure data, the customer, a general delivery address, a general delivery date, etc. Much of this information can be further specified in the corresponding item windows.Instructions for printing offers and orders can be found here. ### Instruction: What is the name of the module being described? ### Response: This module is called Offer and order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Offer and order for me. ### Response: The purpose of the module Offer and order is the following: In the corresponding main window you can create an offer or an order. Here you select all information and set all values that should apply to the entire document and all sub-items, e.g. certain infrastructure data, the customer, a general delivery address, a general delivery date, etc. Much of this information can be further specified in the corresponding item windows.Instructions for printing offers and orders can be found here.."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Offer and order for me. ### Response: The purpose of the module Offer and order is the following: In the corresponding main window you can create an offer or an order. Here you select all information and set all values that should apply to the entire document and all sub-items, e.g. certain infrastructure data, the customer, a general delivery address, a general delivery date, etc. Much of this information can be further specified in the corresponding item windows.Instructions for printing offers and orders can be found here.. ### Context: This is the description of Window: Set dates in Offer and order: This window is called up via the menu \"Edit -> Items -> Set dates\". In the header of the window, the desired date fields can be activated and filled in by means of a checkbox. In the list, the positions to which the dates are transferred are displayed. The process is triggered via the OK button. The fields can be locked individually by message blocking users. See Security for Window: Setting Appointments. ### Instruction: What is the name of the window being described? ### Response: The window being described is Window: Set dates in Offer and order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the window Window: Set dates in Offer and order. ### Response: The purpose of the window Window: Set dates in Offer and order is the following: This window is called up via the menu \"Edit -> Items -> Set dates\". In the header of the window, the desired date fields can be activated and filled in by means of a checkbox. In the list, the positions to which the dates are transferred are displayed. The process is triggered via the OK button. The fields can be locked individually by message blocking users. See Security for Window: Setting Appointments."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the window Window: Set dates in Offer and order. ### Response: The purpose of the window Window: Set dates in Offer and order is the following: This window is called up via the menu \"Edit -> Items -> Set dates\". In the header of the window, the desired date fields can be activated and filled in by means of a checkbox. In the list, the positions to which the dates are transferred are displayed. The process is triggered via the OK button. The fields can be locked individually by message blocking users. See Security for Window: Setting Appointments. ### Context: This is the description of Window: Edit condition description in Offer and order: Double-click on an item inserted in the order to open this window. In the OLE box, the Word document describing the condition and which is printed in the document is displayed in the preview. The Word document can be edited by double-clicking in the OLE box. Important: When editing the description via this way, only the condition of the order is changed, not the master condition. The editing is completed with OK. In the list of conditions a symbol is displayed in the column \"Word\" if the order condition has an individual description. ### Instruction: What is the name of this window? ### Response: The window being described is Window: Edit condition description in Offer and order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the window Window: Edit condition description in Offer and order? ### Response: The purpose of the window Window: Edit condition description in Offer and order is as follows: Double-click on an item inserted in the order to open this window. In the OLE box, the Word document describing the condition and which is printed in the document is displayed in the preview. The Word document can be edited by double-clicking in the OLE box. Important: When editing the description via this way, only the condition of the order is changed, not the master condition. The editing is completed with OK. In the list of conditions a symbol is displayed in the column \"Word\" if the order condition has an individual description.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Offer-Order Attributes Editing Window: If an order or quotation contains many identical variant parts with always slightly different specifications, it is more economical to be able to use the same specifications for all of them. To be able to set the same attributes quickly and clearly, this window is provided. ### Instruction: What is the name of the module being described? ### Response: This module is Offer-Order Attributes Editing Window."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Offer-Order Attributes Editing Window? ### Response: The module Offer-Order Attributes Editing Window serves the purpose of the following: If an order or quotation contains many identical variant parts with always slightly different specifications, it is more economical to be able to use the same specifications for all of them. To be able to set the same attributes quickly and clearly, this window is provided.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Offer and order position: This module is used to maintain offer/order items. ### Instruction: How is this module called? ### Response: This module is named Offer and order position."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Offer and order position used for? ### Response: The module Offer and order position is used for the following: This module is used to maintain offer/order items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select order item: This module is called up by default whenever you want to select individual items of a customer order from other applications. By pressing the \"OK\" key, the selected order items are transferred to the calling application (in many cases, the items can also be transferred by drag & drop). If only a job number without an item is entered (see \"Job\" field below), all items of the job are displayed. From the displayed order items on the first level, you can then display further sub-items by expanding the tree display and then select the desired order items by marking them (multiple selection is possible). If a valid item number of the order is entered in addition to the order number, then this is considered to be immediately selected (see \"Item\" field below). ### Instruction: What is the name of the module being described? ### Response: This module is named Select order item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Select order item? ### Response: The purpose of the module Select order item is as follows: This module is called up by default whenever you want to select individual items of a customer order from other applications. By pressing the \"OK\" key, the selected order items are transferred to the calling application (in many cases, the items can also be transferred by drag & drop). If only a job number without an item is entered (see \"Job\" field below), all items of the job are displayed. From the displayed order items on the first level, you can then display further sub-items by expanding the tree display and then select the desired order items by marking them (multiple selection is possible). If a valid item number of the order is entered in addition to the order number, then this is considered to be immediately selected (see \"Item\" field below).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:supply chain management: This module is mainly used to determine the delivery or provision status of one or more order items. Once an order item has been delivered, it is displayed as completed. If it has not been delivered, all parts of the supply chain necessary for complete delivery are displayed with their respective status. The status of possible follow-on documents (requirement request, purchase order, goods receipt, quality assurance, return document) is evaluated for MRP order parts (merchandise), for MRP production parts the status of the follow-on documents is determined and displayed for all parts of the bill of material (exploded bill of material item, parts request, production order, purchase order documents, etc.). If an order part has been produced, then the system will also flexibly search for follow-up documents from production and vice versa. ClassiX® supports flexible disposition, i.e. purchased parts can be manufactured or production parts can be ordered (also partially). This flexible disposition is also recognised and correctly evaluated by the SCM. Exceeded deadlines are additionally marked. For stocked parts the availability is determined at the warehouse. In the missing parts list with the option \"Only insufficient parts\" only those parts in stock are displayed which are available in insufficient quantity on the requirement date. A number of options (see below) serve to quickly gain an overview of the delivery capacity and its bottlenecks. By being able to navigate to the subsequent documents or to higher-level items, you can quickly obtain all the information necessary to intervene to ensure punctual delivery. ### Instruction: Tell me the name of this module. ### Response: The name of this module is English:supply chain management."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:supply chain management used for? ### Response: The purpose of the module English:supply chain management is as follows: This module is mainly used to determine the delivery or provision status of one or more order items. Once an order item has been delivered, it is displayed as completed. If it has not been delivered, all parts of the supply chain necessary for complete delivery are displayed with their respective status. The status of possible follow-on documents (requirement request, purchase order, goods receipt, quality assurance, return document) is evaluated for MRP order parts (merchandise), for MRP production parts the status of the follow-on documents is determined and displayed for all parts of the bill of material (exploded bill of material item, parts request, production order, purchase order documents, etc.). If an order part has been produced, then the system will also flexibly search for follow-up documents from production and vice versa. ClassiX® supports flexible disposition, i.e. purchased parts can be manufactured or production parts can be ordered (also partially). This flexible disposition is also recognised and correctly evaluated by the SCM. Exceeded deadlines are additionally marked. For stocked parts the availability is determined at the warehouse. In the missing parts list with the option \"Only insufficient parts\" only those parts in stock are displayed which are available in insufficient quantity on the requirement date. A number of options (see below) serve to quickly gain an overview of the delivery capacity and its bottlenecks. By being able to navigate to the subsequent documents or to higher-level items, you can quickly obtain all the information necessary to intervene to ensure punctual delivery.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Customers sales article statistics: With this module a customer/ sales item or a sales item/customer statistic can be created for certain periods of time. The basis of these statistics are 2-dimensional OLAP data cubes (see also monitors) between customers and sales item objects. Depending on the selection of the - primary - dimension (i.e. the point of entry) into the statistics, the second remaining dimension is the so-called secondary dimension. If you choose\"customers\" as the primary dimension, the \"sales items\" are the secondary sub-dimension and vice versa.Depending on the selection of the primary dimension (customer or sales item), the total values of the statistics can vary. This is because sales can be made with \"customers\" even without sales articles (e.g. when using text articles or fixed values in orders or outgoing invoices). A statistic according to \"Customers\" can therefore be larger in total than the \"same\" statistic according to \"Sales articles\".The data is updated every time a quotation, an order or an invoice is saved. Whether the values are shown in the totals of the statistics depends on the status of the respective documents. Below is a list of the statuses that are included in the statistics totals for the various documents (the documents themselves are nevertheless always kept in the corresponding data cubes, only the values are not always added up):Status offersOffer submitted (OFFER_SUBMITTED)Offer partially converted into order (OFFER_CONFIRMED_IN_PART)Offer completely taken over as order (OFFER_CONFIRMED)Orders in statusOrder confirmed (SALES_ORDER_CONFIRMED)Job stopped (SALES_ORDER_STOPPED)Job waiting for acceptance (SALES_ORDER_WAITING_FOR_ACCEPTION)Mission accomplished (SALES_ORDER_IMPLEMENTED)Invoices/credit notesAll registered invoices/credit notes are included in the statistics (registered credit notes are only considered if they are issued for a customer. Credit notes for commission recipients are therefore excluded, for example). Values for packaging and freight are distributed proportionally among the sales items (if available in the invoice or credit memo), therefore there may be differences in the distributions (value of goods - packaging - freight) between the values displayed in these statistics and the values displayed in the list of invoices or credit memos. The totals are of course identical.All statistic values are held in local currency only. ### Instruction: What is the name of this module? ### Response: The name of this module is Customers sales article statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Customers sales article statistics used for? ### Response: The module Customers sales article statistics can be described as follows: With this module a customer/ sales item or a sales item/customer statistic can be created for certain periods of time. The basis of these statistics are 2-dimensional OLAP data cubes (see also monitors) between customers and sales item objects. Depending on the selection of the - primary - dimension (i.e. the point of entry) into the statistics, the second remaining dimension is the so-called secondary dimension. If you choose\"customers\" as the primary dimension, the \"sales items\" are the secondary sub-dimension and vice versa.Depending on the selection of the primary dimension (customer or sales item), the total values of the statistics can vary. This is because sales can be made with \"customers\" even without sales articles (e.g. when using text articles or fixed values in orders or outgoing invoices). A statistic according to \"Customers\" can therefore be larger in total than the \"same\" statistic according to \"Sales articles\".The data is updated every time a quotation, an order or an invoice is saved. Whether the values are shown in the totals of the statistics depends on the status of the respective documents. Below is a list of the statuses that are included in the statistics totals for the various documents (the documents themselves are nevertheless always kept in the corresponding data cubes, only the values are not always added up):Status offersOffer submitted (OFFER_SUBMITTED)Offer partially converted into order (OFFER_CONFIRMED_IN_PART)Offer completely taken over as order (OFFER_CONFIRMED)Orders in statusOrder confirmed (SALES_ORDER_CONFIRMED)Job stopped (SALES_ORDER_STOPPED)Job waiting for acceptance (SALES_ORDER_WAITING_FOR_ACCEPTION)Mission accomplished (SALES_ORDER_IMPLEMENTED)Invoices/credit notesAll registered invoices/credit notes are included in the statistics (registered credit notes are only considered if they are issued for a customer. Credit notes for commission recipients are therefore excluded, for example). Values for packaging and freight are distributed proportionally among the sales items (if available in the invoice or credit memo), therefore there may be differences in the distributions (value of goods - packaging - freight) between the values displayed in these statistics and the values displayed in the list of invoices or credit memos. The totals are of course identical.All statistic values are held in local currency only.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Commission recipient UK article Statistics: With this module a commission taker (representative)/sales item or sales item/commission taker(representative) statistics can be created for specific periods of time. The basis of these statistics are 2-dimensional OLAP data cubes (see also monitors) between representatives and sales item objects. Depending on the selection of the - primary - dimension (i.e. the point of entry) into the statistics, the second remaining dimension is the so-called secondary dimension. If you choose\"representatives\" as the primary dimension, the \"sales items\" are the secondary sub-dimension and vice versa.Depending on the selection of the primary dimension (commission recipient (representative) or sales item), the total values of the statistics can vary. This is because sales can be made with \"representatives\" even without sales articles (e.g. when using text articles or fixed values in orders or outgoing credit notes). A statistic according to \"commission recipients\" can therefore be larger in total than the \"same\" statistic according to \"sales articles\".The data is updated each time an invoice or credit note is saved. Whether the values are shown in the totals of the statistics depends on the status of the respective documents. Below is a list of the statuses that are included in the statistics totals for the various documents (the documents themselves are nevertheless always kept in the corresponding data cubes, only the values are not always added up):Invoices/credit notesAll registered invoices/credit notes are included in the statistics (registered credit notes are only considered if they are issued for a customer. Credit memos for commission recipients are therefore excluded, for example)All statistic values are held in local currency only. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Commission recipient UK article Statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Commission recipient UK article Statistics. ### Response: The module Commission recipient UK article Statistics can be described as follows: With this module a commission taker (representative)/sales item or sales item/commission taker(representative) statistics can be created for specific periods of time. The basis of these statistics are 2-dimensional OLAP data cubes (see also monitors) between representatives and sales item objects. Depending on the selection of the - primary - dimension (i.e. the point of entry) into the statistics, the second remaining dimension is the so-called secondary dimension. If you choose\"representatives\" as the primary dimension, the \"sales items\" are the secondary sub-dimension and vice versa.Depending on the selection of the primary dimension (commission recipient (representative) or sales item), the total values of the statistics can vary. This is because sales can be made with \"representatives\" even without sales articles (e.g. when using text articles or fixed values in orders or outgoing credit notes). A statistic according to \"commission recipients\" can therefore be larger in total than the \"same\" statistic according to \"sales articles\".The data is updated each time an invoice or credit note is saved. Whether the values are shown in the totals of the statistics depends on the status of the respective documents. Below is a list of the statuses that are included in the statistics totals for the various documents (the documents themselves are nevertheless always kept in the corresponding data cubes, only the values are not always added up):Invoices/credit notesAll registered invoices/credit notes are included in the statistics (registered credit notes are only considered if they are issued for a customer. Credit memos for commission recipients are therefore excluded, for example)All statistic values are held in local currency only.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Suppliers Article Statistics: With this module a supplier/article or article/supplier statistic can be created for certain periods of time. The basis of these statistics are 2-dimensional OLAP data cubes (see also monitors) between suppliers and article objects. Depending on the selection of the - primary - dimension (i.e. the point of entry) into the statistics, the second remaining dimension is the so-called secondary dimension. If you choose \"suppliers\" as the primary dimension, the \"articles\" are the secondary sub-dimension and vice versa.Depending on the selection of the primary dimension (suppliers or articles), the total values of the statistics can vary. This is due to the fact that with \"suppliers\" sales can also be made without articles (e.g. when using text articles or fixed values in incoming invoices). A statistic according to \"Suppliers\" can therefore be larger in total than the \"same\" statistic according to \"Articles\".The data is updated each time an order, an incoming invoice or a credit note is saved. Whether the values are shown in the totals of the statistics depends on the status of the respective documents. Below is a list of the statuses that are included in the statistics totals for the various documents (the documents themselves are nevertheless always kept in the corresponding data cubes, only the values are not always added up):Order Statistics are not recorded for the following statuses :\"Only created\"\"On demand\"\"Call-off order completed\"\"Canceled\"\"Susts\"Invoices and credit notes are written to the statistics after releaseAll statistic values are held in local currency only. ### Instruction: Which module is being described? ### Response: This module is named Suppliers Article Statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Suppliers Article Statistics for me. ### Response: The module Suppliers Article Statistics serves the purpose of the following: With this module a supplier/article or article/supplier statistic can be created for certain periods of time. The basis of these statistics are 2-dimensional OLAP data cubes (see also monitors) between suppliers and article objects. Depending on the selection of the - primary - dimension (i.e. the point of entry) into the statistics, the second remaining dimension is the so-called secondary dimension. If you choose \"suppliers\" as the primary dimension, the \"articles\" are the secondary sub-dimension and vice versa.Depending on the selection of the primary dimension (suppliers or articles), the total values of the statistics can vary. This is due to the fact that with \"suppliers\" sales can also be made without articles (e.g. when using text articles or fixed values in incoming invoices). A statistic according to \"Suppliers\" can therefore be larger in total than the \"same\" statistic according to \"Articles\".The data is updated each time an order, an incoming invoice or a credit note is saved. Whether the values are shown in the totals of the statistics depends on the status of the respective documents. Below is a list of the statuses that are included in the statistics totals for the various documents (the documents themselves are nevertheless always kept in the corresponding data cubes, only the values are not always added up):Order Statistics are not recorded for the following statuses :\"Only created\"\"On demand\"\"Call-off order completed\"\"Canceled\"\"Susts\"Invoices and credit notes are written to the statistics after releaseAll statistic values are held in local currency only.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Outlook Synchronisation: With this module the contacts in a folder of Outlook can be synchronised with any contacts in ClassiX®. The basic procedure is the following: First a connection between a contact in Outlook and a contact in ClassiX® must be established. Then the contact data (business address, private address, ...) is assigned to the desired fields in Outlook. This assignment can be made individually for each contact and will be used later for all synchronisation processes. As soon as there is a connection between the contacts, they can be synchronised at any time. ### Instruction: Which module is being described? ### Response: This module is named English:Outlook Synchronisation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:Outlook Synchronisation used for? ### Response: The purpose of the module English:Outlook Synchronisation is the following: With this module the contacts in a folder of Outlook can be synchronised with any contacts in ClassiX®. The basic procedure is the following: First a connection between a contact in Outlook and a contact in ClassiX® must be established. Then the contact data (business address, private address, ...) is assigned to the desired fields in Outlook. This assignment can be made individually for each contact and will be used later for all synchronisation processes. As soon as there is a connection between the contacts, they can be synchronised at any time.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of one-time partner: One-time addresses are used in ClassiX® in order not to inflate the master data if an address is used once and has no informative value for the company afterwards. For example, an order can be delivered to a ship that is temporarily in a port. The address of the port has no value for the company after delivery, so it is not worthwhile to create it as a company. One-time addresses can be created as one-time persons or one-time companies. This module is used to search and list the one-time partners. ### Instruction: How is this module called? ### Response: This module is called one-time partner."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module one-time partner for me. ### Response: The purpose of the module one-time partner is the following: One-time addresses are used in ClassiX® in order not to inflate the master data if an address is used once and has no informative value for the company afterwards. For example, an order can be delivered to a ship that is temporarily in a port. The address of the port has no value for the company after delivery, so it is not worthwhile to create it as a company. One-time addresses can be created as one-time persons or one-time companies. This module is used to search and list the one-time partners.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open positions: This module is used to maintain open item objects. When maintaining an open item individually, the mask structure changes depending on whether it is an open item of a customer, a supplier, an employee or a representative. In case of multiple selection of open items (e.g. from the payment proposal list), the due dates and payment blocks can be edited. ### Instruction: How is this module called? ### Response: This module is Open positions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Open positions. ### Response: The module Open positions can be described as follows: This module is used to maintain open item objects. When maintaining an open item individually, the mask structure changes depending on whether it is an open item of a customer, a supplier, an employee or a representative. In case of multiple selection of open items (e.g. from the payment proposal list), the due dates and payment blocks can be edited.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select open items: This app can be used to search specifically for individual open items. This app is called from other apps and is used to search for both debit-side and credit-side open items. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Select open items."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Select open items serve? ### Response: The module Select open items serves the purpose of the following: This app can be used to search specifically for individual open items. This app is called from other apps and is used to search for both debit-side and credit-side open items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open item lists: Here you can list the open items for customers, vendors and employees and, if necessary, branch to the processing of the individual open item, account, etc. (In the list context menu via right mouse button). ### Instruction: What is the name of this module? ### Response: The module being described is Open item lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Open item lists serve? ### Response: The purpose of the module Open item lists is as follows: Here you can list the open items for customers, vendors and employees and, if necessary, branch to the processing of the individual open item, account, etc. (In the list context menu via right mouse button).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open items account representative: The documentation compiled here for representative (commission recipient) OPs is a specialisation of the general documentation on open items. From the OR window you can also go directly from the OR window to the substitute master data via the corresponding icons or view the journal entry belonging to the OR. You can also print the displayed surgeries. Then simply return to the open OR window. ### Instruction: What is the name of the module being described? ### Response: This module is Open items account representative."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Open items account representative serve? ### Response: The purpose of the module Open items account representative is as follows: The documentation compiled here for representative (commission recipient) OPs is a specialisation of the general documentation on open items. From the OR window you can also go directly from the OR window to the substitute master data via the corresponding icons or view the journal entry belonging to the OR. You can also print the displayed surgeries. Then simply return to the open OR window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open items account suppliers: The documentation compiled here for suppliers OPs is a specialisation of the general documentation on open items. If there are down payment requests for down payment requests still open from the supplier or if down payments have been made to the supplier, these documents are displayed in a separate list in the upper part of the screen. From the OR window you can also go directly from the OR window to the supplier master data via the corresponding icons or view the journal entry belonging to the OR. You can also print the displayed OPs or transfer them to the payment proposal window. Then simply return to the open OR window. ### Instruction: Tell me the name of this module. ### Response: The module being described is Open items account suppliers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Open items account suppliers for me. ### Response: The purpose of the module Open items account suppliers is as follows: The documentation compiled here for suppliers OPs is a specialisation of the general documentation on open items. If there are down payment requests for down payment requests still open from the supplier or if down payments have been made to the supplier, these documents are displayed in a separate list in the upper part of the screen. From the OR window you can also go directly from the OR window to the supplier master data via the corresponding icons or view the journal entry belonging to the OR. You can also print the displayed OPs or transfer them to the payment proposal window. Then simply return to the open OR window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open items account customers: The documentation compiled here for staff OPs is a specialisation of the general documentation on open items. If there are still open down payment requests for the customer or if down payments have been made by the customer, these documents are displayed in a separate list in the upper part of the screen. From the OR window you can also go directly from the OR window to the customer master data via the corresponding icons or view the journal entry belonging to the OR. You can also print the displayed ORs or transfer them to the reminder window. Afterwards you simply return to the open OR window. ### Instruction: Tell me the name of this module. ### Response: This module is Open items account customers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Open items account customers? ### Response: The module Open items account customers can be described as follows: The documentation compiled here for staff OPs is a specialisation of the general documentation on open items. If there are still open down payment requests for the customer or if down payments have been made by the customer, these documents are displayed in a separate list in the upper part of the screen. From the OR window you can also go directly from the OR window to the customer master data via the corresponding icons or view the journal entry belonging to the OR. You can also print the displayed ORs or transfer them to the reminder window. Afterwards you simply return to the open OR window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Edit reminders: Open items can be dunned via the dunning modules. The usual procedure is to have the system automatically make reminder proposals after entering a few selection criteria. These are processed in the reminder suggestion list, the reminders are then created and can then be revised and possibly reprinted. ### Instruction: What is the name of the module being described? ### Response: This module is Edit reminders."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Edit reminders. ### Response: The module Edit reminders serves the purpose of the following: Open items can be dunned via the dunning modules. The usual procedure is to have the system automatically make reminder proposals after entering a few selection criteria. These are processed in the reminder suggestion list, the reminders are then created and can then be revised and possibly reprinted.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open items account employee: The documentation compiled here for staff OPs is a specialisation of the general documentation on open items. ### Instruction: What is the name of this module? ### Response: The name of this module is Open items account employee."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Open items account employee. ### Response: The purpose of the module Open items account employee is the following: The documentation compiled here for staff OPs is a specialisation of the general documentation on open items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Edit open items G/L account: G/L accounts can be defined as OP type accounts. This allows - e.g. in the case of clearing accounts - a better overview of the postings, as different postings can be linked with each other, so that only the balance with one posting is displayed. Postings to accounts marked as open item type are written continuously to the open item account and are only removed from it by manual clearing. If bookings are erroneously cleared, they can be re-inserted into the OP account at any time by drag & drop. It may also be necessary to replenish the OP account at a later date if the \"OP type\" identifier was set later. ### Instruction: What is the name of the module being described? ### Response: This module is Edit open items G/L account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Edit open items G/L account used for? ### Response: The module Edit open items G/L account serves the purpose of the following: G/L accounts can be defined as OP type accounts. This allows - e.g. in the case of clearing accounts - a better overview of the postings, as different postings can be linked with each other, so that only the balance with one posting is displayed. Postings to accounts marked as open item type are written continuously to the open item account and are only removed from it by manual clearing. If bookings are erroneously cleared, they can be re-inserted into the OP account at any time by drag & drop. It may also be necessary to replenish the OP account at a later date if the \"OP type\" identifier was set later.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order resolution: With this module, for order items to be produced, their master bills of materials, previously defined in the master or flexibly on the technical release window, can be exploded order-specifically according to its specifications.All distinctive characteristics from the order item up to the order header are used for the evaluation of conditional parts list items. ### Instruction: What is the name of the module being described? ### Response: The module being described is Order resolution."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Order resolution used for? ### Response: The purpose of the module Order resolution is as follows: With this module, for order items to be produced, their master bills of materials, previously defined in the master or flexibly on the technical release window, can be exploded order-specifically according to its specifications.All distinctive characteristics from the order item up to the order header are used for the evaluation of conditional parts list items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order grouping: With this module, the items of an order can be structured under different aspects. While the order tree looks at the items from a commercial point of view, this module can be used to arrange and summarise the items from a technical point of view, for example. ### Instruction: What is the name of this module? ### Response: This module is called Order grouping."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Order grouping? ### Response: The purpose of the module Order grouping is the following: With this module, the items of an order can be structured under different aspects. While the order tree looks at the items from a commercial point of view, this module can be used to arrange and summarise the items from a technical point of view, for example.."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Order grouping? ### Response: The purpose of the module Order grouping is the following: With this module, the items of an order can be structured under different aspects. While the order tree looks at the items from a commercial point of view, this module can be used to arrange and summarise the items from a technical point of view, for example.. ### Context: This is the description of Window: Compare nodes in Order grouping: Use this window to compare structure nodes. To do this, you can drag and drop nodes from the grouping window into the fields \"Node 1\" and \"Node 2\" and start the comparison via the toolbar button. The identical positions, which are present under both nodes, are displayed in the corresponding list. Positions which exist exclusively under the respective nodes are displayed in the separate lists below the nodes. ### Instruction: What is the name of this window? ### Response: This window is named Window: Compare nodes in Order grouping."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the window Window: Compare nodes in Order grouping serve? ### Response: The purpose of the window Window: Compare nodes in Order grouping is as follows: Use this window to compare structure nodes. To do this, you can drag and drop nodes from the grouping window into the fields \"Node 1\" and \"Node 2\" and start the comparison via the toolbar button. The identical positions, which are present under both nodes, are displayed in the corresponding list. Positions which exist exclusively under the respective nodes are displayed in the separate lists below the nodes.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Position group: Via item groups, any number of order items can be divided into groups. Appointments can be assigned collectively for these groups, which can then also be transferred directly to all subitems. It is also possible to mark groups as option groups in the offer - their costs are then not included in the total offer, these groups are ignored when they are transferred to an order. Fixed sums can also be defined on the group for all subitems. Furthermore, different recipients can be entered on the group, if, for example, a pallet with goods is to be delivered to the customer's external warehouse, or the delivery of dangerous goods has to be cleared at another gate. ### Instruction: Tell me the name of this module. ### Response: This module is Position group."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Position group? ### Response: The module Position group is used for the following: Via item groups, any number of order items can be divided into groups. Appointments can be assigned collectively for these groups, which can then also be transferred directly to all subitems. It is also possible to mark groups as option groups in the offer - their costs are then not included in the total offer, these groups are ignored when they are transferred to an order. Fixed sums can also be defined on the group for all subitems. Furthermore, different recipients can be entered on the group, if, for example, a pallet with goods is to be delivered to the customer's external warehouse, or the delivery of dangerous goods has to be cleared at another gate.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Maintenance contracts due: Service provider groups in customer orders, which are of the type \"maintenance contract\", can be assigned a cycle and a period. On the first day of the entered period, this maintenance order is then due for the first time. A follow-up order must be created from it. To do this, there is this evaluation. An end time for finding due maintenance orders up to this date can be specified. In order to see all due maintenance orders up to this point, not only the first due one, the so named check mark must be set. Example: An order must be performed monthly. If the tick \"All due...\" is not set, only the first due date is displayed.If the tick is set, all those that must be created by the check date are displayed. Now the entries can be marked and the orders can be created on their respective due dates by clicking on the toolbar button \"Create orders\". It is confirmed with a message: All tasks created! The created orders can be found via the cost object. The capacities for these orders are then booked directly and are visible via the capacity utilisation. ### Instruction: How is this module called? ### Response: The name of this module is Maintenance contracts due."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Maintenance contracts due. ### Response: The module Maintenance contracts due is used for the following: Service provider groups in customer orders, which are of the type \"maintenance contract\", can be assigned a cycle and a period. On the first day of the entered period, this maintenance order is then due for the first time. A follow-up order must be created from it. To do this, there is this evaluation. An end time for finding due maintenance orders up to this date can be specified. In order to see all due maintenance orders up to this point, not only the first due one, the so named check mark must be set. Example: An order must be performed monthly. If the tick \"All due...\" is not set, only the first due date is displayed.If the tick is set, all those that must be created by the check date are displayed. Now the entries can be marked and the orders can be created on their respective due dates by clicking on the toolbar button \"Create orders\". It is confirmed with a message: All tasks created! The created orders can be found via the cost object. The capacities for these orders are then booked directly and are visible via the capacity utilisation.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order payment statistics: Order Payment Statistics is an app to make the interface between commercial order processing and financial accounting more transparent. After order processing has issued and registered the invoice, an order is in the status \"invoiced\" and is thus considered completed from the point of view of order processing. The next step is to transfer outgoing invoices to financial accounting as open items via the outgoing invoice book. The order payment statistics now enable an evaluation from the viewpoint of the orders with regard to payment by the customer. ### Instruction: Name this module. ### Response: This module is named Order payment statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Order payment statistics used for? ### Response: The module Order payment statistics serves the purpose of the following: Order Payment Statistics is an app to make the interface between commercial order processing and financial accounting more transparent. After order processing has issued and registered the invoice, an order is in the status \"invoiced\" and is thus considered completed from the point of view of order processing. The next step is to transfer outgoing invoices to financial accounting as open items via the outgoing invoice book. The order payment statistics now enable an evaluation from the viewpoint of the orders with regard to payment by the customer.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Quick order entry: The quote/order fast entry is a user interface which allows single-stage, unstructured quotes/orders to be entered efficiently, whereas the normal quote/order mask is more suitable for entering complex, structured quotes or orders (e.g. for larger, complex machines or plants).Due to a TAPI connection, this module is also ideal for entering quotations/orders via telephone sales. Callers are automatically recognised and can be directly transferred to a new offer or a new order.The quote/quick order entry mask is completed by displaying the own processes, the processes of the caller and the predecessors of the customer from the currently opened order. ### Instruction: How is this module called? ### Response: The module being described is Quick order entry."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Quick order entry used for? ### Response: The module Quick order entry can be described as follows: The quote/order fast entry is a user interface which allows single-stage, unstructured quotes/orders to be entered efficiently, whereas the normal quote/order mask is more suitable for entering complex, structured quotes or orders (e.g. for larger, complex machines or plants).Due to a TAPI connection, this module is also ideal for entering quotations/orders via telephone sales. Callers are automatically recognised and can be directly transferred to a new offer or a new order.The quote/quick order entry mask is completed by displaying the own processes, the processes of the caller and the predecessors of the customer from the currently opened order.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Disruption of contract: Contract faults can be error messages from customers, which can be categorised and processed using transaction documents. ### Instruction: What is the name of this module? ### Response: The name of this module is Disruption of contract."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Disruption of contract? ### Response: The module Disruption of contract is used for the following: Contract faults can be error messages from customers, which can be categorised and processed using transaction documents.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Offer and order statistics: The quotation / order header statistics module is used to evaluate, monitor (control) and plan these corresponding documents.EvaluationMonitoring (control)This module is ideal for creating order statistics, as it offers extensive search and filter options, for example. (sales area, statistics period, status, ...). The column \"Net value AE\" is calculated from the \"Value\" minus \"Total commissions\". In the following column, this is converted into the local currency and displayed without currency so that the values can be edited more easily after transfer to Excel. The next column \"adjusted\" shows the amount for fully invoiced orders that results from the sum of all invoices and credit notes. This results in a possible difference between the original incoming order and the actually invoiced values. If an order has not yet been invoiced, the amount in this column corresponds to that in the previous column.The contribution margin is calculated from the adjusted net value and the cost of production and compared.The statistics are completed by the possibility of forming subtotals, for example, in order to compare the turnover of the sales areas.Monitoring is possible in particular by searching for dates, such as the delivery date of the orders and the output of the order status in the list. ### Instruction: How is this module called? ### Response: This module is Offer and order statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Offer and order statistics used for? ### Response: The module Offer and order statistics is used for the following: The quotation / order header statistics module is used to evaluate, monitor (control) and plan these corresponding documents.EvaluationMonitoring (control)This module is ideal for creating order statistics, as it offers extensive search and filter options, for example. (sales area, statistics period, status, ...). The column \"Net value AE\" is calculated from the \"Value\" minus \"Total commissions\". In the following column, this is converted into the local currency and displayed without currency so that the values can be edited more easily after transfer to Excel. The next column \"adjusted\" shows the amount for fully invoiced orders that results from the sum of all invoices and credit notes. This results in a possible difference between the original incoming order and the actually invoiced values. If an order has not yet been invoiced, the amount in this column corresponds to that in the previous column.The contribution margin is calculated from the adjusted net value and the cost of production and compared.The statistics are completed by the possibility of forming subtotals, for example, in order to compare the turnover of the sales areas.Monitoring is possible in particular by searching for dates, such as the delivery date of the orders and the output of the order status in the list.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Text positions: In sales documents, such as quotations, orders, invoices and credit notes, it is possible to create items that consist only of text between the actual article items. These text blocks have no article, no price and no quantity, they only consist of text, which is printed when the sales document is printed and can contain more detailed explanations of preceding or subsequent items, such as final assembly instructions. ### Instruction: Name this module. ### Response: The module being described is Text positions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Text positions used for? ### Response: The purpose of the module Text positions is as follows: In sales documents, such as quotations, orders, invoices and credit notes, it is possible to create items that consist only of text between the actual article items. These text blocks have no article, no price and no quantity, they only consist of text, which is printed when the sales document is printed and can contain more detailed explanations of preceding or subsequent items, such as final assembly instructions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Organisation chart for cost centre plan: This network represents the entire organisational hierarchy (or only parts of it), optionally with all employees, using the cost centre plan as a diagram. ### Instruction: How is this module called? ### Response: This module is Organisation chart for cost centre plan."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Organisation chart for cost centre plan used for? ### Response: The module Organisation chart for cost centre plan is used for the following: This network represents the entire organisational hierarchy (or only parts of it), optionally with all employees, using the cost centre plan as a diagram.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of List of originating products: With this module, proofs of origin can be created for individual items of customer or warehouse orders. This is a list of all those purchased parts for which the respective suppliers cannot explicitly provide proof of valid certificates of origin (origin EU) at the time of delivery (the value of the non-originating goods in a delivery item determines the amount of import duties for some countries). Such declarations can be made by companies acting as \"approved exporters\" by the customs authorities. Alternatively, a list of the purchased parts clearly declared as originating, as well as a list of all purchased parts - regardless of their originating status - can be issued. The following information on the origin of a product can be entered(if an identifier is no longer valid from the date - as it is older than one year - the system will place a \"?\" in front of the identifier for further verification. e.g. \"?N\"): Description Identification Original product U not originating N Reference to invoice R not specified - Requested A With regard to the country of origin, the following information can be entered(if an identifier is no longer valid from the date - as it is older than one year - the system will place a \"?\" in front of the identifier for further verification. e.g. \"?DE\"): Description Identification Country code of the country of origin DE (Germany), CH (Switzerland), ... not specified - Various countries are eligible #. ### Instruction: Name this module. ### Response: This module is List of originating products."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module List of originating products used for? ### Response: The module List of originating products is used for the following: With this module, proofs of origin can be created for individual items of customer or warehouse orders. This is a list of all those purchased parts for which the respective suppliers cannot explicitly provide proof of valid certificates of origin (origin EU) at the time of delivery (the value of the non-originating goods in a delivery item determines the amount of import duties for some countries). Such declarations can be made by companies acting as \"approved exporters\" by the customs authorities. Alternatively, a list of the purchased parts clearly declared as originating, as well as a list of all purchased parts - regardless of their originating status - can be issued. The following information on the origin of a product can be entered(if an identifier is no longer valid from the date - as it is older than one year - the system will place a \"?\" in front of the identifier for further verification. e.g. \"?N\"): Description Identification Original product U not originating N Reference to invoice R not specified - Requested A With regard to the country of origin, the following information can be entered(if an identifier is no longer valid from the date - as it is older than one year - the system will place a \"?\" in front of the identifier for further verification. e.g. \"?DE\"): Description Identification Country code of the country of origin DE (Germany), CH (Switzerland), ... not specified - Various countries are eligible #."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Fast delivery and invoicing: This module is used to quickly enter delivery notes and invoices from the order. It is used if an order is to be delivered or invoiced completely or all open positions. ### Instruction: What is the name of the module being described? ### Response: This module is called Fast delivery and invoicing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Fast delivery and invoicing used for? ### Response: The module Fast delivery and invoicing is used for the following: This module is used to quickly enter delivery notes and invoices from the order. It is used if an order is to be delivered or invoiced completely or all open positions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Outlook: With the Outlook module, contacts from MS Outlook® can be synchronised with persons, contact persons and employees from the CyberEnterprise® PS database. Two different modes of use are available for this purpose: import and export mode. Which mode to use depends on the system (in MS Outlook® or in the CyberEnterprise® PS database) in which a contact is first created or already existed. If many contacts already exist in MS Outlook® or if the contacts are first created in MS Outlook®, then the import mode should be used. In this case, the contacts from MS Outlook® must be manually assigned to the corresponding objects in the CyberEnterprise® PS database via Connect, as contacts in MS Outlook® are not managed clearly separated according to (private) persons, contact persons or employees. If contact data is first created in the CyberEnterprise® PS database, it can be transferred to MS Outlook® using the export mode. ### Instruction: What is the name of the module being described? ### Response: This module is English:Outlook."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module English:Outlook? ### Response: The module English:Outlook can be described as follows: With the Outlook module, contacts from MS Outlook® can be synchronised with persons, contact persons and employees from the CyberEnterprise® PS database. Two different modes of use are available for this purpose: import and export mode. Which mode to use depends on the system (in MS Outlook® or in the CyberEnterprise® PS database) in which a contact is first created or already existed. If many contacts already exist in MS Outlook® or if the contacts are first created in MS Outlook®, then the import mode should be used. In this case, the contacts from MS Outlook® must be manually assigned to the corresponding objects in the CyberEnterprise® PS database via Connect, as contacts in MS Outlook® are not managed clearly separated according to (private) persons, contact persons or employees. If contact data is first created in the CyberEnterprise® PS database, it can be transferred to MS Outlook® using the export mode.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Own supplies: In-house provisions enable the planning of the provision of own goods to a supplier. For a more detailed description of the business process of providing your own goods, see here. ### Instruction: Which module is being described? ### Response: The module being described is Own supplies."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Own supplies serve? ### Response: The module Own supplies is used for the following: In-house provisions enable the planning of the provision of own goods to a supplier. For a more detailed description of the business process of providing your own goods, see here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Emballages: Packaging means empties or containers (bottles, crates, pallets) with which or in which a buyer receives his goods. Frequently, packaging is made available to the buyer free of charge, so it is necessary to keep a record of how many packages have been delivered or possibly collected, when and with what. With this module of AppsWarehouse® such packaging accounts (e.g. as pallet accounts) can be managed. An emballage account can either be assigned to a partner (e.g. customer or supplier) or to an emballage (e.g. pallet or crate) as account owner. If the account owner of an emballage account is, for example, a customer, this customer can in turn maintain so-called sub-accounts for different emballages: one sub-account for e.g. europallets, another sub-account for e.g. cable drums. Conversely, the partners are assigned to each part of the packaging account as sub-accounts: e.g. the packaging account for Euro pallets holds the customers to whom the goods were delivered on pallets as sub-accounts. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Emballages."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Emballages for me. ### Response: The purpose of the module Emballages is the following: Packaging means empties or containers (bottles, crates, pallets) with which or in which a buyer receives his goods. Frequently, packaging is made available to the buyer free of charge, so it is necessary to keep a record of how many packages have been delivered or possibly collected, when and with what. With this module of AppsWarehouse® such packaging accounts (e.g. as pallet accounts) can be managed. An emballage account can either be assigned to a partner (e.g. customer or supplier) or to an emballage (e.g. pallet or crate) as account owner. If the account owner of an emballage account is, for example, a customer, this customer can in turn maintain so-called sub-accounts for different emballages: one sub-account for e.g. europallets, another sub-account for e.g. cable drums. Conversely, the partners are assigned to each part of the packaging account as sub-accounts: e.g. the packaging account for Euro pallets holds the customers to whom the goods were delivered on pallets as sub-accounts.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Packaging material: The roll of packaging material can be used to define outer packaging and/or the labels required for it. ### Instruction: How is this module called? ### Response: This module is called Packaging material."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Packaging material. ### Response: The purpose of the module Packaging material is as follows: The roll of packaging material can be used to define outer packaging and/or the labels required for it.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Package list: This module can be used both as a loading list and as a forwarding order.The loading list serves as a specification of a delivery note with regard to the packaging of the goods. If the goods of a delivery note are divided into several packages, containers, etc., the loading list can be used to determine which package contains which goods. At the same time, the package as such is specified in the loading list item, for example by weight, size, tracking ID. The loading list can either be printed directly. However, it is also possible to print it via the delivery note. In this case, the loading list number in which the item is packed is printed behind each delivery note item. The overview of all loading list items is then printed in the delivery note footer. The forwarding order is the order given to the forwarder. It informs him which parcels (forwarding order items) he should bring where (pick-up point) and where (delivery note address). Further information can be given using the text blocks. ### Instruction: Which module is being described? ### Response: The name of this module is Package list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Package list for me. ### Response: The module Package list can be described as follows: This module can be used both as a loading list and as a forwarding order.The loading list serves as a specification of a delivery note with regard to the packaging of the goods. If the goods of a delivery note are divided into several packages, containers, etc., the loading list can be used to determine which package contains which goods. At the same time, the package as such is specified in the loading list item, for example by weight, size, tracking ID. The loading list can either be printed directly. However, it is also possible to print it via the delivery note. In this case, the loading list number in which the item is packed is printed behind each delivery note item. The overview of all loading list items is then printed in the delivery note footer. The forwarding order is the order given to the forwarder. It informs him which parcels (forwarding order items) he should bring where (pick-up point) and where (delivery note address). Further information can be given using the text blocks.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Partner research: Through the partner search, ClassiX® offers its users the possibility to research contact persons and companies via complex query options. First and foremost, ClassiX® offers the possibility to search for partners via their respective search masks. Thus, there are search masks to search directly for companies and persons as well as the respective roles (contact person, interested parties, customers, etc.). Via the search mask, these search options can now be combined as desired. ### Instruction: Which module is being described? ### Response: This module is named Partner research."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Partner research serve? ### Response: The purpose of the module Partner research is as follows: Through the partner search, ClassiX® offers its users the possibility to research contact persons and companies via complex query options. First and foremost, ClassiX® offers the possibility to search for partners via their respective search masks. Thus, there are search masks to search directly for companies and persons as well as the respective roles (contact person, interested parties, customers, etc.). Via the search mask, these search options can now be combined as desired.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Partners and roles: This app is used to create and delete partner-role relationships. Several roles can be assigned to each partner, e.g. a company and/or a person can have the role \"customer\" and also the role \"operator\" (of an industrial plant). Also, a person can be, for example, \"employee\" and also \"user\" (of the IT system) or a company can be \"supplier\" and also \"manufacturer\", etc.\"Partners\" in CyberEnterprise® are therefore only companies (legal entities) or persons (natural persons), these central entities are assigned e.g. addresses, bank details, private details, etc., i.e. information that is independent of the type of business relationship. The actual way in which these partners relate to you in a business relationship is defined by their role.Both companies and persons can have one or more roles. ### Instruction: What is the name of this module? ### Response: The module being described is Partners and roles."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Partners and roles used for? ### Response: The module Partners and roles serves the purpose of the following: This app is used to create and delete partner-role relationships. Several roles can be assigned to each partner, e.g. a company and/or a person can have the role \"customer\" and also the role \"operator\" (of an industrial plant). Also, a person can be, for example, \"employee\" and also \"user\" (of the IT system) or a company can be \"supplier\" and also \"manufacturer\", etc.\"Partners\" in CyberEnterprise® are therefore only companies (legal entities) or persons (natural persons), these central entities are assigned e.g. addresses, bank details, private details, etc., i.e. information that is independent of the type of business relationship. The actual way in which these partners relate to you in a business relationship is defined by their role.Both companies and persons can have one or more roles.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Partial payment: Payment plan conditions can be used to define partial payments (payment plan amounts) in both sales and purchasing. Each partial payment is defined by the amount and the date (event).Since payment plans are transaction-specific data, the master conditions only serve as a reference. When inserting the condition into an order, for example, the condition is copied here and thus always inserted locally.Payment schedules, when used in a document, can trigger an event such as the down payment request. This makes this condition different from all others. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Partial payment."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Partial payment used for? ### Response: The purpose of the module Partial payment is as follows: Payment plan conditions can be used to define partial payments (payment plan amounts) in both sales and purchasing. Each partial payment is defined by the amount and the date (event).Since payment plans are transaction-specific data, the master conditions only serve as a reference. When inserting the condition into an order, for example, the condition is copied here and thus always inserted locally.Payment schedules, when used in a document, can trigger an event such as the down payment request. This makes this condition different from all others.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Password: This module is for maintaining the user password. If the user has forgotten his or her password, the administrator can set a new password in the user input window. ### Instruction: Which module is being described? ### Response: This module is called Password."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Password used for? ### Response: The module Password is used for the following: This module is for maintaining the user password. If the user has forgotten his or her password, the administrator can set a new password in the user input window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Payments Posting Cheque (Accounts Payable): With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) the cheques are printed immediately afterwards. The printing of cheques can also be called up/repeated separately for a payment run (payment document from financial accounting) at a later date. ### Instruction: Tell me the name of this module. ### Response: This module is Payments Posting Cheque (Accounts Payable)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Payments Posting Cheque (Accounts Payable) for me. ### Response: The module Payments Posting Cheque (Accounts Payable) is used for the following: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) the cheques are printed immediately afterwards. The printing of cheques can also be called up/repeated separately for a payment run (payment document from financial accounting) at a later date.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Domestic creditor payments in German data exchange format DTAUS: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank data medium is created in the German data exchange format DTAUS for domestic payments. The creation of the bank data medium in the German data exchange format DTAUS can also be called up/repeated separately for a payment run (payment document of the financial accounting). This format becomes invalid from 1.2.2014. ### Instruction: What is the name of this module? ### Response: The name of this module is Domestic creditor payments in German data exchange format DTAUS."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Domestic creditor payments in German data exchange format DTAUS for me. ### Response: The purpose of the module Domestic creditor payments in German data exchange format DTAUS is the following: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank data medium is created in the German data exchange format DTAUS for domestic payments. The creation of the bank data medium in the German data exchange format DTAUS can also be called up/repeated separately for a payment run (payment document of the financial accounting). This format becomes invalid from 1.2.2014.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Posting payments abroad (accounts payable): With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank creates data carriers in the German data exchange format DTAZV for foreign payments. The creation of the bank data medium in the German data exchange format DTAUS can also be called up/repeated separately for a payment run (payment document of the financial accounting). ### Instruction: Name this module. ### Response: This module is named Posting payments abroad (accounts payable)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Posting payments abroad (accounts payable)? ### Response: The purpose of the module Posting payments abroad (accounts payable) is as follows: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank creates data carriers in the German data exchange format DTAZV for foreign payments. The creation of the bank data medium in the German data exchange format DTAUS can also be called up/repeated separately for a payment run (payment document of the financial accounting).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Proof of payments (creditors): With this module, a proof of the open items paid with this payment run can be created for the vendors to be selected for a payment document automatically created in financial accounting. ### Instruction: Name this module. ### Response: The name of this module is Proof of payments (creditors)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Proof of payments (creditors) serve? ### Response: The purpose of the module Proof of payments (creditors) is the following: With this module, a proof of the open items paid with this payment run can be created for the vendors to be selected for a payment document automatically created in financial accounting.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Payments - Financial accounting book: With this module, creditor payments to suppliers, employees, commission recipients or customers are selected from financial accounting and instructed to make payment. First, either by an automatic run or a manual selection , a payment proposal list is built up whose open items can be post-processed in the dialogue. For individual or several open items, the payment to be made can be edited, i.e. the discount amount as well as the payment amount (also as a partial amount) can be specified. The open items marked in the payment proposal list are then released for bank clearing (supported formats SEPA, DTAUS, MT101, DTAZV) or cheque printing, whereby the posting of the payment and the clearing takes place automatically in the financial accounting. The open items can be selected in several consecutive steps in order to pay by different payment methods (see also Conditional selection). Possible cash discount income is automatically determined and posted against the cash discount accounts defined in the tax keys. In the case of incoming invoices for fixed assets, any cash discount income is posted against the fixed asset account posted with the incoming invoice. ### Instruction: Which module is being described? ### Response: This module is Payments - Financial accounting book."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Payments - Financial accounting book serve? ### Response: The purpose of the module Payments - Financial accounting book is as follows: With this module, creditor payments to suppliers, employees, commission recipients or customers are selected from financial accounting and instructed to make payment. First, either by an automatic run or a manual selection , a payment proposal list is built up whose open items can be post-processed in the dialogue. For individual or several open items, the payment to be made can be edited, i.e. the discount amount as well as the payment amount (also as a partial amount) can be specified. The open items marked in the payment proposal list are then released for bank clearing (supported formats SEPA, DTAUS, MT101, DTAZV) or cheque printing, whereby the posting of the payment and the clearing takes place automatically in the financial accounting. The open items can be selected in several consecutive steps in order to pay by different payment methods (see also Conditional selection). Possible cash discount income is automatically determined and posted against the cash discount accounts defined in the tax keys. In the case of incoming invoices for fixed assets, any cash discount income is posted against the fixed asset account posted with the incoming invoice.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Payments (creditor) in international data exchange format MT101: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank data medium is created in the international data exchange format MT101. The creation of the bank data medium in the international data exchange format MT101 can also be called up/repeated separately for a payment run (payment document from financial accounting). MT101 orders can only be executed for those banks for which the BIC (e.g. COBADEFF506) and the sender BIC (e.g. COBADEFFXXX) have been entered in the master data. The amount in foreign currency is always taken first as the respective payment amount; if this is not defined as a payment amount, the payment amount posted to the financial accounting in local currency is transmitted to the bank. No currency conversion takes place. ### Instruction: What is the name of this module? ### Response: The name of this module is Payments (creditor) in international data exchange format MT101."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Payments (creditor) in international data exchange format MT101. ### Response: The module Payments (creditor) in international data exchange format MT101 is used for the following: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank data medium is created in the international data exchange format MT101. The creation of the bank data medium in the international data exchange format MT101 can also be called up/repeated separately for a payment run (payment document from financial accounting). MT101 orders can only be executed for those banks for which the BIC (e.g. COBADEFF506) and the sender BIC (e.g. COBADEFFXXX) have been entered in the master data. The amount in foreign currency is always taken first as the respective payment amount; if this is not defined as a payment amount, the payment amount posted to the financial accounting in local currency is transmitted to the bank. No currency conversion takes place.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Payments (creditor) in the European data exchange format SEPA: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank data medium is created in the European data exchange format SEPA. The creation of the bank data medium in the European data exchange format SEPA can also be called up/repeated separately for a payment run (payment document of the financial accounting). The European data exchange format SEPA is only possible for payments in € (EURO). In addition, a BIC and an IBAN must be entered in the system for the bank account from which payment is made (including the sender BIC) and for all bank accounts of the payee. ### Instruction: Which module is being described? ### Response: The name of this module is Payments (creditor) in the European data exchange format SEPA."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Payments (creditor) in the European data exchange format SEPA. ### Response: The purpose of the module Payments (creditor) in the European data exchange format SEPA is as follows: With this module, the open items selected from a payment proposal list are released for payment by creating a financial accounting payment document and (optionally) immediately afterwards the bank data medium is created in the European data exchange format SEPA. The creation of the bank data medium in the European data exchange format SEPA can also be called up/repeated separately for a payment run (payment document of the financial accounting). The European data exchange format SEPA is only possible for payments in € (EURO). In addition, a BIC and an IBAN must be entered in the system for the bank account from which payment is made (including the sender BIC) and for all bank accounts of the payee.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of performance measurement: The Performance Measurement App allows standardised programme procedures to be called up to measure the performance of an installed system. The resulting measurement results can then be used for comparison purposes. The following comparisons would be conceivable:Comparisons with other systems (benchmarking) Comparisons with older values on the same system Daily performance curves You can also use this app to change database parameters (e.g. those of the fetch policy (see below)) or to get the key figures of the database in the tab \"Statistics\". To do so, open this app, set the appropriate value and start any other app. After the called functionality is finished you can examine the results in this app. ### Instruction: What is the name of the module being described? ### Response: The name of this module is performance measurement."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module performance measurement. ### Response: The module performance measurement is used for the following: The Performance Measurement App allows standardised programme procedures to be called up to measure the performance of an installed system. The resulting measurement results can then be used for comparison purposes. The following comparisons would be conceivable:Comparisons with other systems (benchmarking) Comparisons with older values on the same system Daily performance curves You can also use this app to change database parameters (e.g. those of the fetch policy (see below)) or to get the key figures of the database in the tab \"Statistics\". To do so, open this app, set the appropriate value and start any other app. After the called functionality is finished you can examine the results in this app.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of People: This module is used for the care of the persons. A person is described by their different names, date of birth, address, etc. This data represents the basic information that is transferred to the respective roles (contact person, employee, consultant, customer, etc.). More specific data is maintained in the roles of a person. Linking the roles to a person ensures that no redundant data is created. ### Instruction: Which module is being described? ### Response: The name of this module is People."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module People serve? ### Response: The module People is used for the following: This module is used for the care of the persons. A person is described by their different names, date of birth, address, etc. This data represents the basic information that is transferred to the respective roles (contact person, employee, consultant, customer, etc.). More specific data is maintained in the roles of a person. Linking the roles to a person ensures that no redundant data is created.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Persons Duplicate cleansing: This window is used to clean up duplicates. Toolbar Symbol Description Save person Update display Fields Field Description Duplicate person Person duplicate(s) Master data : Duplicate person / persons Duplicate - : : Name Name of the person : : First name First name of the person : : Intermediate name Intermediate name of the person : : Birthday Person's birthday : : Mr/Woman Form of address / gender of the person : : Language Mother tongue of the person : : Title Title of the person : : Status* see Status field in the editing window Address - : : Address : : Street Street name of the person's street address : : Address suffix : : Country Country of the person's street address : : POSTCODE Postcode of the person's street address : : Place Place of the person's street address : : Remark : : Communication : Castors : : Duplicate company / companies duplicate Listing of the roles of each person Buttons button Description Swap the selected duplicate with the current person Master data - : / / The picture appears if the master data data field does not differ from the duplicate data field, otherwise the arrow is displayed as a prompt to check whether the information from the duplicate (right field) has been transferred to the master data (left field). Once this button has been pressed, the image in the button changes to a grey because only after saving with the memory button the transfer to the master data takes place. Action - back The window is closed. ### Instruction: What is the name of the module being described? ### Response: This module is called Persons Duplicate cleansing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Persons Duplicate cleansing? ### Response: The purpose of the module Persons Duplicate cleansing is the following: This window is used to clean up duplicates. Toolbar Symbol Description Save person Update display Fields Field Description Duplicate person Person duplicate(s) Master data : Duplicate person / persons Duplicate - : : Name Name of the person : : First name First name of the person : : Intermediate name Intermediate name of the person : : Birthday Person's birthday : : Mr/Woman Form of address / gender of the person : : Language Mother tongue of the person : : Title Title of the person : : Status* see Status field in the editing window Address - : : Address : : Street Street name of the person's street address : : Address suffix : : Country Country of the person's street address : : POSTCODE Postcode of the person's street address : : Place Place of the person's street address : : Remark : : Communication : Castors : : Duplicate company / companies duplicate Listing of the roles of each person Buttons button Description Swap the selected duplicate with the current person Master data - : / / The picture appears if the master data data field does not differ from the duplicate data field, otherwise the arrow is displayed as a prompt to check whether the information from the duplicate (right field) has been transferred to the master data (left field). Once this button has been pressed, the image in the button changes to a grey because only after saving with the memory button the transfer to the master data takes place. Action - back The window is closed."
    },
    {
        "input": "",
        "output": "### Context: This is the description of People Duplicate Lists: When duplicates are matched, the name is split up using spaces and line breaks and searched for these in the person master using wildcards. The check is carried out in the input mask before saving if the automatic check at save is set in the options. ### Instruction: Name this module. ### Response: This module is called People Duplicate Lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module People Duplicate Lists used for? ### Response: The purpose of the module People Duplicate Lists is as follows: When duplicates are matched, the name is split up using spaces and line breaks and searched for these in the person master using wildcards. The check is carried out in the input mask before saving if the automatic check at save is set in the options.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of List of persons names: This window is used to list the names and titles of persons. For this purpose, the titles, first names, surnames and intermediate names of all persons are collected and displayed in a list of names. The aim of this application is to be able to check names for their correct spelling. Toolbar Symbol Description Rebuild the list of names Search fields Field Description List of names Filter - : : Personal name/title Enter a (partial) name or title. The result is a list of names/titles. If you select an entry in the list, the persons who carry this name or title will be listed below it. : Names Listing of search results : People Listing of the persons selected by name Buttons button Description Action - back The window is closed. ### Instruction: How is this module called? ### Response: This module is named List of persons names."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module List of persons names. ### Response: The module List of persons names can be described as follows: This window is used to list the names and titles of persons. For this purpose, the titles, first names, surnames and intermediate names of all persons are collected and displayed in a list of names. The aim of this application is to be able to check names for their correct spelling. Toolbar Symbol Description Rebuild the list of names Search fields Field Description List of names Filter - : : Personal name/title Enter a (partial) name or title. The result is a list of names/titles. If you select an entry in the list, the persons who carry this name or title will be listed below it. : Names Listing of search results : People Listing of the persons selected by name Buttons button Description Action - back The window is closed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Invoice receipt book: The invoice receipt book serves to list incoming invoices and/or incoming credit notes. It also enables the posting to the financial accounting. The selection is mainly done by selecting the states that an incoming invoice and/or incoming credit note can pass through within their business process. The status \"Released\" is preset, i.e. the incoming invoices/credit notes are listed which are about to be transferred to financial accounting. The documents are listed sorted by pagination number. If the client's incoming invoices and credit notes are divided into individual domains, then the ones from the registered domain are displayed first, but you can switch to other domains or display the invoices or credit notes from all domains. ### Instruction: What is the name of the module being described? ### Response: The module being described is Invoice receipt book."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Invoice receipt book for me. ### Response: The module Invoice receipt book is used for the following: The invoice receipt book serves to list incoming invoices and/or incoming credit notes. It also enables the posting to the financial accounting. The selection is mainly done by selecting the states that an incoming invoice and/or incoming credit note can pass through within their business process. The status \"Released\" is preset, i.e. the incoming invoices/credit notes are listed which are about to be transferred to financial accounting. The documents are listed sorted by pagination number. If the client's incoming invoices and credit notes are divided into individual domains, then the ones from the registered domain are displayed first, but you can switch to other domains or display the invoices or credit notes from all domains.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Buttons with plus symbol: This documentation refers to the functions of the following buttons: Symbol Function Create a new requisition Extend requirement coverage request Create new stock order Extend warehouse order Create a new order Extend order These buttons appear at different places in ClassiX®, but always have the same function and behaviour. The functionality of these \"plus\" buttons is explained in general terms and illustrated using the example of the requirement request. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Buttons with plus symbol."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Buttons with plus symbol? ### Response: The purpose of the module Buttons with plus symbol is the following: This documentation refers to the functions of the following buttons: Symbol Function Create a new requisition Extend requirement coverage request Create new stock order Extend warehouse order Create a new order Extend order These buttons appear at different places in ClassiX®, but always have the same function and behaviour. The functionality of these \"plus\" buttons is explained in general terms and illustrated using the example of the requirement request.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Brochures: All printed matter of the publishers is managed with this. ### Instruction: Tell me the name of this module. ### Response: This module is Brochures."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Brochures. ### Response: The module Brochures serves the purpose of the following: All printed matter of the publishers is managed with this.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Totals, balance list Down payments to suppliers: This module is used to call up the summary, balance list for suppliers' down payment accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Totals, balance list Down payments to suppliers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Totals, balance list Down payments to suppliers serve? ### Response: The module Totals, balance list Down payments to suppliers serves the purpose of the following: This module is used to call up the summary, balance list for suppliers' down payment accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period up to the specified accrual period or optionally up to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Totals, balance list Payments on account Customers: This module is used to call up the summary, balance list for customers' down payment accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period to the specified accrual period or optionally to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances. ### Instruction: What is the name of this module? ### Response: This module is called Totals, balance list Payments on account Customers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Totals, balance list Payments on account Customers? ### Response: The module Totals, balance list Payments on account Customers can be described as follows: This module is used to call up the summary, balance list for customers' down payment accounts. The debit and credit values are displayed for the selected posting period (the so-called period values), cumulated from the beginning of the fiscal year belonging to the posting period to the specified accrual period or optionally to the end of the corresponding fiscal year. Totals of debit, credit and balance values are output across all accounts and additionally separated into debit and credit balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Presentation Manager: This window provides various setting options for customising the icons and cursors. Furthermore, the description texts for the icons are maintained here, which are stored in the system file imageMap.json. These are then integrated in the browser as alternative texts. ### Instruction: How is this module called? ### Response: The name of this module is Presentation Manager."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Presentation Manager for me. ### Response: The purpose of the module Presentation Manager is the following: This window provides various setting options for customising the icons and cursors. Furthermore, the description texts for the icons are maintained here, which are stored in the system file imageMap.json. These are then integrated in the browser as alternative texts.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Print Preview: The ClassiX® print preview displays either \"intelligent\" hard copies of screen windows or internal(document) documents (such as production orders) in a print preview. In the print preview, you can navigate through all existing pages, the size is freely scalable. The print preview can then be forwarded directly to a printer. ### Instruction: Which module is being described? ### Response: This module is Print Preview."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Print Preview used for? ### Response: The module Print Preview can be described as follows: The ClassiX® print preview displays either \"intelligent\" hard copies of screen windows or internal(document) documents (such as production orders) in a print preview. In the print preview, you can navigate through all existing pages, the size is freely scalable. The print preview can then be forwarded directly to a printer.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Calculation scheme: Especially in trading companies, a lot of work is done with supplier price lists. In order not to have to import all parts that a supplier has in his regularly sent price list into the database, there is the external trading goods database.Conditions \"net\" (are taken over in orders) In addition to the price list, calculation schemes for determining the supplier's own purchase price from the sales price stated in the price list are agreed with the supplier. For example, the price list may contain a sales price of x, and a sales price of 25% has been agreed for the determination of the purchase price. This -25% is therefore part of the calculation schema and is marked as \"net\" when the condition is created.Conditions \"list price related\" (are not taken over in orders) If customs duties are added, which have to be taken into account for the determination of the cost price in the order, but which may not be transferred to the order, these surcharges can be marked as \"list price related\" and can also be recorded in this calculation scheme.List price-related conditions are transferred to the order created from an order. Net-related conditions are not. They are only responsible for the calculation of the own cost price in the order. ### Instruction: Tell me the name of this module. ### Response: This module is Calculation scheme."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Calculation scheme? ### Response: The module Calculation scheme serves the purpose of the following: Especially in trading companies, a lot of work is done with supplier price lists. In order not to have to import all parts that a supplier has in his regularly sent price list into the database, there is the external trading goods database.Conditions \"net\" (are taken over in orders) In addition to the price list, calculation schemes for determining the supplier's own purchase price from the sales price stated in the price list are agreed with the supplier. For example, the price list may contain a sales price of x, and a sales price of 25% has been agreed for the determination of the purchase price. This -25% is therefore part of the calculation schema and is marked as \"net\" when the condition is created.Conditions \"list price related\" (are not taken over in orders) If customs duties are added, which have to be taken into account for the determination of the cost price in the order, but which may not be transferred to the order, these surcharges can be marked as \"list price related\" and can also be recorded in this calculation scheme.List price-related conditions are transferred to the order created from an order. Net-related conditions are not. They are only responsible for the calculation of the own cost price in the order.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Complex price or discount and surcharge: Prices Create/edit Important notes Complex price Complex discount/supplement Test prices Price history/validity list Copy buffer. ### Instruction: How is this module called? ### Response: This module is called Complex price or discount and surcharge."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Complex price or discount and surcharge serve? ### Response: The module Complex price or discount and surcharge can be described as follows: Prices Create/edit Important notes Complex price Complex discount/supplement Test prices Price history/validity list Copy buffer."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Price table: This module is used to maintain conditional price or discount/surcharge tables. Note: The strictest or stricter condition of two or more must always be at the top, as the table is worked through from top to bottom and the first hit is taken as the answer!. ### Instruction: Which module is being described? ### Response: This module is called Price table."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Price table used for? ### Response: The module Price table can be described as follows: This module is used to maintain conditional price or discount/surcharge tables. Note: The strictest or stricter condition of two or more must always be at the top, as the table is worked through from top to bottom and the first hit is taken as the answer!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Price processing: Purchasing: The price change module is basically used to automatically increase or decrease prices for a group of supplier agreements of ordered articles. It is possible to determine the quantity of parts to be changed, set the rules and values of the price change, test the changes and finally make the price change in four steps. Data security is guaranteed by an error log. Additionally, this module can also be used to get an overview of prices. For comparison purposes, the respective standard purchase price can be displayed. ### Instruction: Which module is being described? ### Response: The name of this module is Price processing: Purchasing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Price processing: Purchasing for me. ### Response: The purpose of the module Price processing: Purchasing is as follows: The price change module is basically used to automatically increase or decrease prices for a group of supplier agreements of ordered articles. It is possible to determine the quantity of parts to be changed, set the rules and values of the price change, test the changes and finally make the price change in four steps. Data security is guaranteed by an error log. Additionally, this module can also be used to get an overview of prices. For comparison purposes, the respective standard purchase price can be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Price processing: Sale: The price change module is basically used to automatically increase or decrease the price of a group of sales items. It is possible to determine in four steps the quantity of parts to be changed, set the rules and values of the price change, test the changes and finally make the price change. Data security is guaranteed by an error log. Additionally, this module can also be used to get an overview of prices. In addition to the standard sales prices, you can also display any existing price lists or price groups. ### Instruction: Tell me the name of this module. ### Response: This module is Price processing: Sale."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Price processing: Sale for me. ### Response: The purpose of the module Price processing: Sale is the following: The price change module is basically used to automatically increase or decrease the price of a group of sales items. It is possible to determine in four steps the quantity of parts to be changed, set the rules and values of the price change, test the changes and finally make the price change. Data security is guaranteed by an error log. Additionally, this module can also be used to get an overview of prices. In addition to the standard sales prices, you can also display any existing price lists or price groups.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Print mask: The functionality of this module ranges from the printing of receipts to the creation of serial e-mails and archiving files. ### Instruction: What is the name of the module being described? ### Response: This module is called Print mask."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Print mask for me. ### Response: The module Print mask can be described as follows: The functionality of this module ranges from the printing of receipts to the creation of serial e-mails and archiving files.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Printers: This module enables you to manage printers for this machine. These can be accessed via the Windows driver or directly via an IP or the printer queue. There are imports of the existing Windows printers and printers from a server via a web service interface. ### Instruction: How is this module called? ### Response: This module is named Printers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Printers serve? ### Response: The purpose of the module Printers is the following: This module enables you to manage printers for this machine. These can be accessed via the Windows driver or directly via an IP or the printer queue. There are imports of the existing Windows printers and printers from a server via a web service interface.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Overview of the documentation for printing: Several help pages deal with printing. This page was created as an overview page to help you find the help you need quickly. This page is not clearly assigned to AppsWarehouse®, CyberEnterprise® or InstantView® but rather offers an overview of all available topics concerning printing. ### Instruction: What is the name of this module? ### Response: The name of this module is Overview of the documentation for printing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Overview of the documentation for printing for me. ### Response: The purpose of the module Overview of the documentation for printing is the following: Several help pages deal with printing. This page was created as an overview page to help you find the help you need quickly. This page is not clearly assigned to AppsWarehouse®, CyberEnterprise® or InstantView® but rather offers an overview of all available topics concerning printing.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Type plates: Create type plates for selected order items. ### Instruction: Which module is being described? ### Response: The name of this module is Type plates."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Type plates. ### Response: The purpose of the module Type plates is the following: Create type plates for selected order items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Project Generator: You can generate a new project with this program. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Project Generator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Project Generator serve? ### Response: The purpose of the module Project Generator is as follows: You can generate a new project with this program.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Project Network Plan: With this module resources can be roughly planned in advance of offers or orders. These can be capacitive resources such as work areas, work groups, workstations, machines or even material resources such as parts. In addition to the direct assignment (scheduling) of a document (quotation, internal or external order) to a project network, a network can also generally only be linked to a higher-level cost object or a cost centre. In the latter case, for example, if you want to schedule cost centre-related basic loads. The scheduling can be done in the form of interlinked and nested milestones, whereby each individual milestone can be scheduled with regard to different dates. To speed up scheduling, pre-defined resource plans can be used, in which any resources in any quantity can be saved as patterns for frequently recurring scheduling tasks. Such project networks can be assigned either to quotations, orders, internal orders or cost objects (sales projects). ### Instruction: Tell me the name of this module. ### Response: This module is Project Network Plan."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Project Network Plan serve? ### Response: The module Project Network Plan serves the purpose of the following: With this module resources can be roughly planned in advance of offers or orders. These can be capacitive resources such as work areas, work groups, workstations, machines or even material resources such as parts. In addition to the direct assignment (scheduling) of a document (quotation, internal or external order) to a project network, a network can also generally only be linked to a higher-level cost object or a cost centre. In the latter case, for example, if you want to schedule cost centre-related basic loads. The scheduling can be done in the form of interlinked and nested milestones, whereby each individual milestone can be scheduled with regard to different dates. To speed up scheduling, pre-defined resource plans can be used, in which any resources in any quantity can be saved as patterns for frequently recurring scheduling tasks. Such project networks can be assigned either to quotations, orders, internal orders or cost objects (sales projects).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Preliminary requirements - description: Advance requirements are used to cover real requirements that are generated at a later date. This is useful for parts with long replenishment lead times (planned delivery time or in-house production time). For this reason, preliminary requirements make no sense for e.g. level 0 parts within a sales order. You can create the corresponding order item directly and do not have to take the diversion via advance requirements. Therefore, preliminary requirements should only be created for MRP sub-items of a production BOM that has not yet been exploded and technically released as a whole, if the time between technical release and the required procurement date is shorter than the expected delivery time. However, the same can also apply to sub-items kept in stock, which have a very low minimum stock level, show high consumption and also have a relatively long delivery time. There you can use the advance requirements to reserve a certain number of parts in the warehouse before the actual disposition of the finally exploded parts list. The system only makes sense if the planned part is actually scheduled at a later point in time, i.e. can be offset. It therefore makes no sense to create an advance requirement for part X, whereby this part always occurs as a component of the higher-level and stock-keeping part Z, and this part Z is also ultimately planned. It makes just as little sense to create an advance requirement for a part that only appears in parts lists as a constructive (fictitious) item and is ultimately never manufactured and is therefore not planned. Advance requirements documents can be created in the course of planning. When creating a preliminary requirement, it is specified for which order and on which date how much goods are expected to be needed. A preliminary requirements document can contain several items. Only one - not completed, openly running - preliminary requirement can be triggered per order for each part. A scheduled advance requirement item (with a staging date) is posted in the MRP account as a requirement trigger (\"future issue\") and therefore leads to an increase in requirements for the corresponding part. The \"aim\" of the document is to reserve or procure the preplanned quantity in advance. Later, the respective advance requirement item is replaced by a \"real\" requirement trigger in the MRP account; this can be an order item or a part requirement item. ### Instruction: How is this module called? ### Response: The module being described is Preliminary requirements - description."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Preliminary requirements - description for me. ### Response: The purpose of the module Preliminary requirements - description is as follows: Advance requirements are used to cover real requirements that are generated at a later date. This is useful for parts with long replenishment lead times (planned delivery time or in-house production time). For this reason, preliminary requirements make no sense for e.g. level 0 parts within a sales order. You can create the corresponding order item directly and do not have to take the diversion via advance requirements. Therefore, preliminary requirements should only be created for MRP sub-items of a production BOM that has not yet been exploded and technically released as a whole, if the time between technical release and the required procurement date is shorter than the expected delivery time. However, the same can also apply to sub-items kept in stock, which have a very low minimum stock level, show high consumption and also have a relatively long delivery time. There you can use the advance requirements to reserve a certain number of parts in the warehouse before the actual disposition of the finally exploded parts list. The system only makes sense if the planned part is actually scheduled at a later point in time, i.e. can be offset. It therefore makes no sense to create an advance requirement for part X, whereby this part always occurs as a component of the higher-level and stock-keeping part Z, and this part Z is also ultimately planned. It makes just as little sense to create an advance requirement for a part that only appears in parts lists as a constructive (fictitious) item and is ultimately never manufactured and is therefore not planned. Advance requirements documents can be created in the course of planning. When creating a preliminary requirement, it is specified for which order and on which date how much goods are expected to be needed. A preliminary requirements document can contain several items. Only one - not completed, openly running - preliminary requirement can be triggered per order for each part. A scheduled advance requirement item (with a staging date) is posted in the MRP account as a requirement trigger (\"future issue\") and therefore leads to an increase in requirements for the corresponding part. The \"aim\" of the document is to reserve or procure the preplanned quantity in advance. Later, the respective advance requirement item is replaced by a \"real\" requirement trigger in the MRP account; this can be an order item or a part requirement item.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Attributes - Processes: 2.1 Preset attribute A preset attribute allows a dynamic data field to be given a descriptive name, further explanatory data or a default setting. Example: A carpet seller with a ClassiX® software wants to describe his carpets by different characteristics. For example, all carpets should be described by their price. So he adds a characteristic to all master data, in which he can then specify the price. If individual carpets are to be described by their colour (no free input, only colours from a colour table should be available), he can do this by means of an attribute, which for example describes a data field of type 'String'. This attribute is then provided with a table with the different colours. Attention: Attribute values are only supported in the formulas up to a maximum of 100 characters! 2.2 Formula attributes As the name suggests, formula attributes are used to fill a data field with a formula, or with the value that the formula calculates. Constants can be entered directly into the formula while the variable values are slot attributes. Example: The carpet seller now wants to describe his carpets also by size, whereby the carpets have the characteristic that all carpets have the same width (4m) and differ only in length. Here the carpet seller benefits from the formula attributes. So he creates an attribute with the formula '4m * length'. The length is again a preset attribute, whereby the value or the result of the formula attribute changes automatically when the value is changed. 2.3 Conditional attributes Conditional attributes can contain a table that describes an \"if - then\" relationship. Example: The carpets of the carpet seller are to have their own price per colour. We now create a conditional attribute and fill the table with the data we need for the price calculation. (e.g.: red -> 10 € ; blue -> 20 € ; yellow -> 30€ ) In addition, we set our just created attribute in dependence of the attribute for the colour.(see example Preset attribute) If the attribute for the colour is changed, the corresponding value of the condition table is now automatically returned. ### Instruction: What is the name of this module? ### Response: This module is called Attributes - Processes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Attributes - Processes used for? ### Response: The purpose of the module Attributes - Processes is the following: 2.1 Preset attribute A preset attribute allows a dynamic data field to be given a descriptive name, further explanatory data or a default setting. Example: A carpet seller with a ClassiX® software wants to describe his carpets by different characteristics. For example, all carpets should be described by their price. So he adds a characteristic to all master data, in which he can then specify the price. If individual carpets are to be described by their colour (no free input, only colours from a colour table should be available), he can do this by means of an attribute, which for example describes a data field of type 'String'. This attribute is then provided with a table with the different colours. Attention: Attribute values are only supported in the formulas up to a maximum of 100 characters! 2.2 Formula attributes As the name suggests, formula attributes are used to fill a data field with a formula, or with the value that the formula calculates. Constants can be entered directly into the formula while the variable values are slot attributes. Example: The carpet seller now wants to describe his carpets also by size, whereby the carpets have the characteristic that all carpets have the same width (4m) and differ only in length. Here the carpet seller benefits from the formula attributes. So he creates an attribute with the formula '4m * length'. The length is again a preset attribute, whereby the value or the result of the formula attribute changes automatically when the value is changed. 2.3 Conditional attributes Conditional attributes can contain a table that describes an \"if - then\" relationship. Example: The carpets of the carpet seller are to have their own price per colour. We now create a conditional attribute and fill the table with the data we need for the price calculation. (e.g.: red -> 10 € ; blue -> 20 € ; yellow -> 30€ ) In addition, we set our just created attribute in dependence of the attribute for the colour.(see example Preset attribute) If the attribute for the colour is changed, the corresponding value of the condition table is now automatically returned.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts preliminary calculation - processes: Parts pre-calculation is used to calculate prices, weight and replacement time of production parts based on all required components (parts). For this purpose, both the bill of materials and the work plan of the production part are exploded. For the explosion of superior and variant parts, it is necessary to define characteristics before the explosion. The processing masks offer this possibility. The exploded resources can either be displayed clearly in a tree view or in a list with all their costs, overheads and lead times. ### Instruction: How is this module called? ### Response: This module is named Parts preliminary calculation - processes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Parts preliminary calculation - processes for me. ### Response: The purpose of the module Parts preliminary calculation - processes is the following: Parts pre-calculation is used to calculate prices, weight and replacement time of production parts based on all required components (parts). For this purpose, both the bill of materials and the work plan of the production part are exploded. For the explosion of superior and variant parts, it is necessary to define characteristics before the explosion. The processing masks offer this possibility. The exploded resources can either be displayed clearly in a tree view or in a list with all their costs, overheads and lead times.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Business processes - Sales - Transaction processing: CRM (Customer Relationship Management) supports communication in the customer process with reliable figures, data and facts. The aim is to build long-term profitable customer relationships so that more sales are generated and the value of the company is increased. To ensure this, every exchange of information with the customer must be fully traceable. The CyberEnterprise® supports the CRM not only with suitable master information about customers and/or contact persons, but also with transaction processing and all other pre-formatted business documents (quotation, order, invoice, etc.). An evaluation of a customer relationship can be made via KPI monitors. Transaction processing offers the possibility to merge all communication channels of a customer. In most cases these are telephone, fax, e-mail or notes. These transaction documents are generated manually and can be stored in differently organised transaction folders. Transaction documents are assigned to different business processes and can have several defined statuses, which are controlled manually or automatically. Thus all discrete interactions with the customer can be viewed and monitored in order to optimally evaluate the information about a customer. Employees with direct customer contact are thus provided with all the relevant customer information they need, for example, when servicing or acquiring new customers. In addition to the activity documents, all pre-formatted business documents (quotation, order, invoice, etc.) are also considered as activities and are stored and posted in the activity folders of a customer or other business objects (partner, user, part, etc.). Subfolders for period, status, etc. are also automatically created. (see also transaction description). ### Instruction: Name this module. ### Response: This module is named Business processes - Sales - Transaction processing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Business processes - Sales - Transaction processing for me. ### Response: The module Business processes - Sales - Transaction processing is used for the following: CRM (Customer Relationship Management) supports communication in the customer process with reliable figures, data and facts. The aim is to build long-term profitable customer relationships so that more sales are generated and the value of the company is increased. To ensure this, every exchange of information with the customer must be fully traceable. The CyberEnterprise® supports the CRM not only with suitable master information about customers and/or contact persons, but also with transaction processing and all other pre-formatted business documents (quotation, order, invoice, etc.). An evaluation of a customer relationship can be made via KPI monitors. Transaction processing offers the possibility to merge all communication channels of a customer. In most cases these are telephone, fax, e-mail or notes. These transaction documents are generated manually and can be stored in differently organised transaction folders. Transaction documents are assigned to different business processes and can have several defined statuses, which are controlled manually or automatically. Thus all discrete interactions with the customer can be viewed and monitored in order to optimally evaluate the information about a customer. Employees with direct customer contact are thus provided with all the relevant customer information they need, for example, when servicing or acquiring new customers. In addition to the activity documents, all pre-formatted business documents (quotation, order, invoice, etc.) are also considered as activities and are stored and posted in the activity folders of a customer or other business objects (partner, user, part, etc.). Subfolders for period, status, etc. are also automatically created. (see also transaction description)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Suppressed errors: Batch run refers to database operations in which data is automatically processed in the background or as a night run without the user being able to interactively influence it. Therefore, no information messages, queries or error messages appear. ### Instruction: What is the name of the module being described? ### Response: This module is Suppressed errors."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Suppressed errors used for? ### Response: The purpose of the module Suppressed errors is the following: Batch run refers to database operations in which data is automatically processed in the background or as a night run without the user being able to interactively influence it. Therefore, no information messages, queries or error messages appear.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Variant routings and parts lists: A variant bill of material and a variant routing are characterised by the fact that they consist of conditional items, which are defined by formulas depending on attributes. Only when a bill of material is exploded are these other items exploded to \"real\" bill of material items and the master bill of material becomes a production bill of material. Thus only the master data can contain upperen. The attributes that are significantly involved in the specification are mainly taken from the preceding document of the order item as well as the other higher order items. In this way, similarly constructed parts can use one and the same bill of material although they are not identically constructed. Example {img type=\"fileId\" fileId=\"330\" thumb=\"box\" width=\"100%\"}In this example, variant control is carried out using the attributes DICKE and SORTE_METALL.Without the variant parts list, you would have to create at least two parts lists, as the raw sheet metal differs depending on the type of installation. (And two parts of course, if there were no variant parts). However, ClassiX® uses the upper option, as the example shows. In this case there are two variants, which are dependent on the attribute THICK. Depending on the attribute, the part is then used for 3.0mm or 5.0mm. The main advantage here is the maintenance of the parts lists. Since similar parts lists are combined, the processing effort is minimised, although the creation may be more complex/difficult. ### Instruction: Which module is being described? ### Response: This module is Variant routings and parts lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Variant routings and parts lists serve? ### Response: The module Variant routings and parts lists is used for the following: A variant bill of material and a variant routing are characterised by the fact that they consist of conditional items, which are defined by formulas depending on attributes. Only when a bill of material is exploded are these other items exploded to \"real\" bill of material items and the master bill of material becomes a production bill of material. Thus only the master data can contain upperen. The attributes that are significantly involved in the specification are mainly taken from the preceding document of the order item as well as the other higher order items. In this way, similarly constructed parts can use one and the same bill of material although they are not identically constructed. Example {img type=\"fileId\" fileId=\"330\" thumb=\"box\" width=\"100%\"}In this example, variant control is carried out using the attributes DICKE and SORTE_METALL.Without the variant parts list, you would have to create at least two parts lists, as the raw sheet metal differs depending on the type of installation. (And two parts of course, if there were no variant parts). However, ClassiX® uses the upper option, as the example shows. In this case there are two variants, which are dependent on the attribute THICK. Depending on the attribute, the part is then used for 3.0mm or 5.0mm. The main advantage here is the maintenance of the parts lists. Since similar parts lists are combined, the processing effort is minimised, although the creation may be more complex/difficult.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Activity folder: This module is used to maintain manually created task subfolders of tasks. In contrast to these subfolders, which can be freely described by means of a text or an assignment to a business object, the subfolders of tasks created by the system are those which are created by means of transaction descriptions. ### Instruction: Tell me the name of this module. ### Response: This module is Activity folder."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Activity folder. ### Response: The module Activity folder is used for the following: This module is used to maintain manually created task subfolders of tasks. In contrast to these subfolders, which can be freely described by means of a text or an assignment to a business object, the subfolders of tasks created by the system are those which are created by means of transaction descriptions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Own services: The in-house service is a partial roll and contains the relevant production data. This module is used to maintain own services. ### Instruction: How is this module called? ### Response: This module is called Own services."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Own services? ### Response: The module Own services is used for the following: The in-house service is a partial roll and contains the relevant production data. This module is used to maintain own services.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Production part: The production part is a part roll and contains the relevant production data. This module is used to maintain production parts. A new production part can be created in two ways: From the input window of the parts master via menu item New button in the editing / list window of the production part If the production part is called up from the input window of the part master, the system first checks whether a roll of this type already exists and displays it if necessary. Otherwise a new production part is created and connected to the part master (only after saving). On the tab 'Production data' the data from the part master are taken over, which must be supplemented by the missing points. With the second option, a new part master record is created for the production part when saving, which you should maintain afterwards. A production part can be defined as a normal assembly (part has a bill of material and routing), factory assembly (part has no bill of material, only a routing), MRP assembly (the production part has its own MRP bill of material and is only defined from a logistics point of view) or engineering assembly (the part is not \"seen\" from a logistics point of view). ### Instruction: How is this module called? ### Response: The module being described is Production part."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Production part used for? ### Response: The module Production part serves the purpose of the following: The production part is a part roll and contains the relevant production data. This module is used to maintain production parts. A new production part can be created in two ways: From the input window of the parts master via menu item New button in the editing / list window of the production part If the production part is called up from the input window of the part master, the system first checks whether a roll of this type already exists and displays it if necessary. Otherwise a new production part is created and connected to the part master (only after saving). On the tab 'Production data' the data from the part master are taken over, which must be supplemented by the missing points. With the second option, a new part master record is created for the production part when saving, which you should maintain afterwards. A production part can be defined as a normal assembly (part has a bill of material and routing), factory assembly (part has no bill of material, only a routing), MRP assembly (the production part has its own MRP bill of material and is only defined from a logistics point of view) or engineering assembly (the part is not \"seen\" from a logistics point of view).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Process profiling: This app controls the profiling of processes, i.e. of any InstantView® code that can be executed. The profiling allows the following to be examined where time remains in detail which code is executed for an operation which messages are triggered and which messages trigger them. ### Instruction: How is this module called? ### Response: This module is called Process profiling."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Process profiling used for? ### Response: The purpose of the module Process profiling is as follows: This app controls the profiling of processes, i.e. of any InstantView® code that can be executed. The profiling allows the following to be examined where time remains in detail which code is executed for an operation which messages are triggered and which messages trigger them."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Profiling - Cluster analysis: Example of an XML export Notes The log of a profiling run can be clustered using a tool. For this purpose Profiling.bat has to be started (in //iv/main/Inst/Profiling). Prerequisite is an installed Java 1.4. The tool asks for the file name with the profiling log and then starts the analysis. At the end the run is confirmed with a message. The result is stored in an HTML file, which can be further processed with Excel, for example. ### Instruction: How is this module called? ### Response: This module is Profiling - Cluster analysis."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Profiling - Cluster analysis serve? ### Response: The purpose of the module Profiling - Cluster analysis is as follows: Example of an XML export Notes The log of a profiling run can be clustered using a tool. For this purpose Profiling.bat has to be started (in //iv/main/Inst/Profiling). Prerequisite is an installed Java 1.4. The tool asks for the file name with the profiling log and then starts the analysis. At the end the run is confirmed with a message. The result is stored in an HTML file, which can be further processed with Excel, for example.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Individual reservation: At the time of an initial, rough planning of a project, the required resources (parts, workstations, machines, work groups or work areas) can be reserved here. Each of these target reservations is assigned to a project node (milestone) and a statistics group. The actual data arising in the course of order processing are then in turn compared to these target values in the statistics evaluation via the assignment to the project node and the statistics group. ### Instruction: Tell me the name of this module. ### Response: The module being described is Individual reservation."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Individual reservation for me. ### Response: The module Individual reservation can be described as follows: At the time of an initial, rough planning of a project, the required resources (parts, workstations, machines, work groups or work areas) can be reserved here. Each of these target reservations is assigned to a project node (milestone) and a statistics group. The actual data arising in the course of order processing are then in turn compared to these target values in the statistics evaluation via the assignment to the project node and the statistics group.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Project costs according to article groups: This module is used to list the costs of a project summarised by item groups. For each article group the target 0 costs (costs from the project planning), the target 1 costs (costs from recorded offers), the target 2 costs (costs from recorded orders) and the actual costs incurred are displayed. This evaluation thus aims in particular to show the development of costs - separately for each item group. ### Instruction: Which module is being described? ### Response: The name of this module is Project costs according to article groups."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Project costs according to article groups. ### Response: The purpose of the module Project costs according to article groups is as follows: This module is used to list the costs of a project summarised by item groups. For each article group the target 0 costs (costs from the project planning), the target 1 costs (costs from recorded offers), the target 2 costs (costs from recorded orders) and the actual costs incurred are displayed. This evaluation thus aims in particular to show the development of costs - separately for each item group.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Project App Generator: This app can be used to generate a new project app. The special feature of a project app is that it can be started independently, whereas other apps are seen as part of a project (a so-called app suite). ### Instruction: Which module is being described? ### Response: This module is called Project App Generator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Project App Generator. ### Response: The purpose of the module Project App Generator is the following: This app can be used to generate a new project app. The special feature of a project app is that it can be started independently, whereas other apps are seen as part of a project (a so-called app suite).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Project Info: In addition to order/sales planning (SOFs) and short quotations (budget quotations), project information is one of the modules of the sales department. The sales department reports an upcoming project via a project info. Subsequently, a SOF can be submitted for the project info or a budget offer can be created. This is done by the field service, which is supported by the ClassiX® Juno system. Project information entered in Juno is automatically transferred to the main database of the ClassiX® ERP system. If the project information results in a business, the project information can be converted into a project (cost unit), through which the following offers or orders are processed. The aim of project information as a precursor to projects (cost objects) is therefore to separate the notification of (imminent) projects by the field service (sales) and the creation of cost objects by the office service. ### Instruction: Which module is being described? ### Response: This module is called Project Info."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Project Info serve? ### Response: The module Project Info serves the purpose of the following: In addition to order/sales planning (SOFs) and short quotations (budget quotations), project information is one of the modules of the sales department. The sales department reports an upcoming project via a project info. Subsequently, a SOF can be submitted for the project info or a budget offer can be created. This is done by the field service, which is supported by the ClassiX® Juno system. Project information entered in Juno is automatically transferred to the main database of the ClassiX® ERP system. If the project information results in a business, the project information can be converted into a project (cost unit), through which the following offers or orders are processed. The aim of project information as a precursor to projects (cost objects) is therefore to separate the notification of (imminent) projects by the field service (sales) and the creation of cost objects by the office service.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Construction contract: This module is used to maintain production orders. The items of a production order determine with quantity and date all the parts that are to be produced in the company itself. In general, production orders with their positions are automatically generated from the parts request. Thereby only one production order (a collective order) is generated from a parts request (with the exception of latecomers), whose positions then define the parts to be produced. (After releasing a parts request, you automatically branch to the processing mask of the generated production orders).New production order items can also be opened manually (i.e. production order items without a predecessor), in which case the input option for assignment to a cost centre opens automatically.A work plan must always be defined for each individual production order item. This is generally generated production-specific from the master routing(Explode routing). In the same step the respective start and end times of each work sequence are determined by means of backward scheduling, taking into account the controlled throughput times. The automatically determined end dates as well as the lead times can be manually adjusted for each individual work sequence. ### Instruction: How is this module called? ### Response: This module is named Construction contract."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Construction contract? ### Response: The module Construction contract serves the purpose of the following: This module is used to maintain production orders. The items of a production order determine with quantity and date all the parts that are to be produced in the company itself. In general, production orders with their positions are automatically generated from the parts request. Thereby only one production order (a collective order) is generated from a parts request (with the exception of latecomers), whose positions then define the parts to be produced. (After releasing a parts request, you automatically branch to the processing mask of the generated production orders).New production order items can also be opened manually (i.e. production order items without a predecessor), in which case the input option for assignment to a cost centre opens automatically.A work plan must always be defined for each individual production order item. This is generally generated production-specific from the master routing(Explode routing). In the same step the respective start and end times of each work sequence are determined by means of backward scheduling, taking into account the controlled throughput times. The automatically determined end dates as well as the lead times can be manually adjusted for each individual work sequence.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Project research: Through project research, ClassiX® offers its users the possibility to get an overview of completed projects. The scope of functions ranges from general project data to the parts and serial numbers installed in the plant. ### Instruction: What is the name of the module being described? ### Response: This module is called Project research."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Project research for me. ### Response: The module Project research is used for the following: Through project research, ClassiX® offers its users the possibility to get an overview of completed projects. The scope of functions ranges from general project data to the parts and serial numbers installed in the plant.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Provided parts list entry: A parts-to-be-provided list consists of individual parts-to-be-provided. This module is used to record these parts to be provided, which must be provided to the supplier when ordering a part. The reference quantity is always related to 1 unit of the order part. So if 3 metres are entered as the quantity in the part to be provided, 3 metres always applies per unit of the ordered part. So if 3 parts are ordered, the quantity provided is 9 metres. It is not dependent on the standard order quantity!. ### Instruction: What is the name of the module being described? ### Response: This module is called Provided parts list entry."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Provided parts list entry serve? ### Response: The purpose of the module Provided parts list entry is the following: A parts-to-be-provided list consists of individual parts-to-be-provided. This module is used to record these parts to be provided, which must be provided to the supplier when ordering a part. The reference quantity is always related to 1 unit of the order part. So if 3 metres are entered as the quantity in the part to be provided, 3 metres always applies per unit of the ordered part. So if 3 parts are ordered, the quantity provided is 9 metres. It is not dependent on the standard order quantity!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Purchasing statistics groups: The purchasing statistics groups take over the functions of the initial account assignment to cost elements/g/L accounts. This is made possible by the fact that they are assigned to the purchasing roles or their parts by means of the classification term \"parts classification\" (ITEM_CLASSIFICATION). ### Instruction: Tell me the name of this module. ### Response: The module being described is Purchasing statistics groups."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Purchasing statistics groups? ### Response: The purpose of the module Purchasing statistics groups is the following: The purchasing statistics groups take over the functions of the initial account assignment to cost elements/g/L accounts. This is made possible by the fact that they are assigned to the purchasing roles or their parts by means of the classification term \"parts classification\" (ITEM_CLASSIFICATION).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Release incoming invoice: The incoming invoice for order items that have reached the company without a goods receipt document can be released. To do this, you must select the order items (only those that have not yet been delivered or released are displayed) and press the \"OK\" button. ### Instruction: How is this module called? ### Response: The name of this module is Release incoming invoice."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Release incoming invoice? ### Response: The module Release incoming invoice can be described as follows: The incoming invoice for order items that have reached the company without a goods receipt document can be released. To do this, you must select the order items (only those that have not yet been delivered or released are displayed) and press the \"OK\" button.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Complaint voucher: It happens that goods are taken from the warehouse for a customer's needs, but only at this point is it determined that the goods are defective. Now, these goods can no longer be assigned to a particular goods receipt, but it must still be possible to return them to the supplier who most probably delivered this part. This is the function of the complaint document. This can be created directly for a stock removal or optionally also for a quality assurance document that has a stock removal as its predecessor. If the goods are expected back from the supplier, this can be activated with the checkbox \"Goods are expected back\", this complaint behaves like an order. The quantity is displayed in the dispatch account until the complete delivery. It may also be the case that the goods have been ready for some time at the customer and only then the customer discovers that the goods are defective and sends them back. In this case, there is the possibility to search for the original goods withdrawal document on the complaint document using the order number. A link to a goods withdrawal document is always advisable, as this is the only way to ensure that the material flow and cost distribution is 100% correct and remains traceable for later. Since a withdrawal document is not always available, for example in the case of Kanban or manual warehouse parts without warehouse management, it is also possible to attach the complaint document directly to an order header so that the flow of goods can be assigned at least to one order or cost object. The return loop is also fully integrated for this document, i.e. if a goods receipt is not perfect according to this complaint document, it is immediately sent back via a return document. The difference between the return document and the complaint document is The complaint document always refers to a goods removal The return document must refer to a goods receipt as a predecessor. The return document can therefore only be used if the disposition process of the part is not yet completed due to a QA or missing goods putaway or staging. If this process has already been completed, there is still the possibility to send the goods back via the complaint document. Business Process If no quality assurance document has been created for the removal from storage, the quantity made available is deducted from the parts requisition item/order item that may have been placed before the goods are removed. It can now be removed again via the staging list. If the goods receipt now arrives for an item that has already been made available in the meantime by another withdrawal, the status of the goods receipt changes to \"goods putaway\" and must be put away. If the item has not yet been removed again, the goods receipt goes to the status \"Ready\". In the case of partial quantities (requirement has already been partially covered), the goods receipt first goes to the status \"staging\", but after staging its partial quantity it changes to the status \"putaway\" so that the remaining quantity can be put away. The cost object is then credited by the goods receipt. If the complaint document was not expected back, the crediting of the cost unit can take place via an incoming credit note. ### Instruction: Which module is being described? ### Response: This module is Complaint voucher."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Complaint voucher for me. ### Response: The purpose of the module Complaint voucher is as follows: It happens that goods are taken from the warehouse for a customer's needs, but only at this point is it determined that the goods are defective. Now, these goods can no longer be assigned to a particular goods receipt, but it must still be possible to return them to the supplier who most probably delivered this part. This is the function of the complaint document. This can be created directly for a stock removal or optionally also for a quality assurance document that has a stock removal as its predecessor. If the goods are expected back from the supplier, this can be activated with the checkbox \"Goods are expected back\", this complaint behaves like an order. The quantity is displayed in the dispatch account until the complete delivery. It may also be the case that the goods have been ready for some time at the customer and only then the customer discovers that the goods are defective and sends them back. In this case, there is the possibility to search for the original goods withdrawal document on the complaint document using the order number. A link to a goods withdrawal document is always advisable, as this is the only way to ensure that the material flow and cost distribution is 100% correct and remains traceable for later. Since a withdrawal document is not always available, for example in the case of Kanban or manual warehouse parts without warehouse management, it is also possible to attach the complaint document directly to an order header so that the flow of goods can be assigned at least to one order or cost object. The return loop is also fully integrated for this document, i.e. if a goods receipt is not perfect according to this complaint document, it is immediately sent back via a return document. The difference between the return document and the complaint document is The complaint document always refers to a goods removal The return document must refer to a goods receipt as a predecessor. The return document can therefore only be used if the disposition process of the part is not yet completed due to a QA or missing goods putaway or staging. If this process has already been completed, there is still the possibility to send the goods back via the complaint document. Business Process If no quality assurance document has been created for the removal from storage, the quantity made available is deducted from the parts requisition item/order item that may have been placed before the goods are removed. It can now be removed again via the staging list. If the goods receipt now arrives for an item that has already been made available in the meantime by another withdrawal, the status of the goods receipt changes to \"goods putaway\" and must be put away. If the item has not yet been removed again, the goods receipt goes to the status \"Ready\". In the case of partial quantities (requirement has already been partially covered), the goods receipt first goes to the status \"staging\", but after staging its partial quantity it changes to the status \"putaway\" so that the remaining quantity can be put away. The cost object is then credited by the goods receipt. If the complaint document was not expected back, the crediting of the cost unit can take place via an incoming credit note.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order reminder: This module is used to control the dunning process. The suppliers can be reminded if they have either not confirmed the desired delivery date or if the goods have not arrived on the confirmed delivery date. Instructions for printing order reminders can be found here. ### Instruction: How is this module called? ### Response: This module is called Order reminder."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Order reminder serve? ### Response: The module Order reminder is used for the following: This module is used to control the dunning process. The suppliers can be reminded if they have either not confirmed the desired delivery date or if the goods have not arrived on the confirmed delivery date. Instructions for printing order reminders can be found here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order request: Purchase requisitions are needed to determine the price of one or more items. It can also be used to request proof of origin from the respective supplier. The requests for the respective information can be created individually or together. Purchase requisitions can be generated from the Approved Requisitions window and the Automatic Purchase Requisitions window or entered manually. A price comparison between individual items can only be carried out for generated requests that have been requested from several suppliers. ### Instruction: What is the name of this module? ### Response: This module is Order request."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Order request? ### Response: The module Order request is used for the following: Purchase requisitions are needed to determine the price of one or more items. It can also be used to request proof of origin from the respective supplier. The requests for the respective information can be created individually or together. Purchase requisitions can be generated from the Approved Requisitions window and the Automatic Purchase Requisitions window or entered manually. A price comparison between individual items can only be carried out for generated requests that have been requested from several suppliers.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order article: An order item manages all information relevant for purchasing. ### Instruction: What is the name of this module? ### Response: This module is called Order article."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Order article used for? ### Response: The module Order article can be described as follows: An order item manages all information relevant for purchasing.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order: When creating an order, great care must be taken to ensure that it is also created cleanly. This means, among other things, that an order of the type OWNER'S REQUIREMENT also absolutely needs a cost centre so that the type is completely \"pronounced\" and the corresponding costs can also be assigned accordingly.Attention own requirements! Goods that are ordered as own requirements do not end up in the warehouse or in customer provision! It is only to be used for real own requirements (office supplies, swivel chairs)! With the type CUSTOMER REQUIREMENT it is also essential to specify a predecessor, i.e. a cost unit, so that the costs are also allocated there accordingly. An order is only completely created, i.e. it gets the status triggered, if these conditions have been satisfied. If these conditions are not met, the order can neither be processed in subsequent documents nor printed. ### Instruction: What is the name of this module? ### Response: The module being described is Order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Order used for? ### Response: The purpose of the module Order is the following: When creating an order, great care must be taken to ensure that it is also created cleanly. This means, among other things, that an order of the type OWNER'S REQUIREMENT also absolutely needs a cost centre so that the type is completely \"pronounced\" and the corresponding costs can also be assigned accordingly.Attention own requirements! Goods that are ordered as own requirements do not end up in the warehouse or in customer provision! It is only to be used for real own requirements (office supplies, swivel chairs)! With the type CUSTOMER REQUIREMENT it is also essential to specify a predecessor, i.e. a cost unit, so that the costs are also allocated there accordingly. An order is only completely created, i.e. it gets the status triggered, if these conditions have been satisfied. If these conditions are not met, the order can neither be processed in subsequent documents nor printed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Orders to be signed: The user is shown his orders to be signed. The lists are displayed separately for 1st and 2nd signature. Functionality List window. ### Instruction: What is the name of the module being described? ### Response: This module is Orders to be signed."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Orders to be signed for me. ### Response: The module Orders to be signed can be described as follows: The user is shown his orders to be signed. The lists are displayed separately for 1st and 2nd signature. Functionality List window."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order proposal Kanban semi-finished product: Parts that are marked as Kanban semi-finished products can help to replenish the warehouse manually. All current requirements of a Kanban semi-finished product are listed in the order proposal list after further processing (stock parts) of the part request.Kanban semi-finished parts are parts that are made from larger raw material. For example, a holder plate that is stamped from a large raw material sheet.This sheet metal plate is not stocked because the remaining surface dimensions in the warehouse cannot be accurately calculated by punching out certain shapes. The remaining quantity of sheet metal plates is estimated for each requirement and either reordered via the order proposal list or simply rejected. All parts requisition items run in Kanban semi-finished products end up in an order proposal list with the status \"order proposal\" until either an independent warehouse order is triggered directly from it, or the items are rejected via a button.The order proposal list shows all requirements of the semi-finished product across all orders. Only from the overall context across all orders is it reliably possible to make an estimate as to whether a raw material is better ordered or still sufficiently available. Therefore, the list is created without restrictive search fields. It must always be kept clean.Regardless of whether rejected or ordered, the parts request item is then posted to the status \"Provisioned: Stock\" is posted. By means of a date (decline.date = rejected or approved.date = used as template for warehouse order), statistics can subsequently be built up for evaluation purposes.The goods, if they are ordered from the list and provided via a goods receipt, are put away like a Kanban part, namely without a putaway document. With the provision of the goods receipt, the goods receipt is put away.The warehouse stock is only determined once a year by an inventory and remains unchanged throughout the year.The Kanban semi-finished parts do not appear in the Kanban list of production, their replenishment time is determined as for JIT parts and scheduled in the Gozinto.The decision whether a raw material is ordered in the order proposal list or not does not change the lead time of the Kanban semi-finished product.From here they can either be rejected or an independent order can be created for them to replenish their stock.Then the part request items are set to the status \"Ready: Stock\" and no longer appear in the order proposal list. ### Instruction: Which module is being described? ### Response: This module is named Order proposal Kanban semi-finished product."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Order proposal Kanban semi-finished product used for? ### Response: The purpose of the module Order proposal Kanban semi-finished product is as follows: Parts that are marked as Kanban semi-finished products can help to replenish the warehouse manually. All current requirements of a Kanban semi-finished product are listed in the order proposal list after further processing (stock parts) of the part request.Kanban semi-finished parts are parts that are made from larger raw material. For example, a holder plate that is stamped from a large raw material sheet.This sheet metal plate is not stocked because the remaining surface dimensions in the warehouse cannot be accurately calculated by punching out certain shapes. The remaining quantity of sheet metal plates is estimated for each requirement and either reordered via the order proposal list or simply rejected. All parts requisition items run in Kanban semi-finished products end up in an order proposal list with the status \"order proposal\" until either an independent warehouse order is triggered directly from it, or the items are rejected via a button.The order proposal list shows all requirements of the semi-finished product across all orders. Only from the overall context across all orders is it reliably possible to make an estimate as to whether a raw material is better ordered or still sufficiently available. Therefore, the list is created without restrictive search fields. It must always be kept clean.Regardless of whether rejected or ordered, the parts request item is then posted to the status \"Provisioned: Stock\" is posted. By means of a date (decline.date = rejected or approved.date = used as template for warehouse order), statistics can subsequently be built up for evaluation purposes.The goods, if they are ordered from the list and provided via a goods receipt, are put away like a Kanban part, namely without a putaway document. With the provision of the goods receipt, the goods receipt is put away.The warehouse stock is only determined once a year by an inventory and remains unchanged throughout the year.The Kanban semi-finished parts do not appear in the Kanban list of production, their replenishment time is determined as for JIT parts and scheduled in the Gozinto.The decision whether a raw material is ordered in the order proposal list or not does not change the lead time of the Kanban semi-finished product.From here they can either be rejected or an independent order can be created for them to replenish their stock.Then the part request items are set to the status \"Ready: Stock\" and no longer appear in the order proposal list.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Requirement request: The purchasing department is prompted by the requisitions to trigger orders. Every employee in the company can create requirement coverage requests. A distinction is made between four types:Own consumptionInvestmentOrder requirementsStorage needsProject needsPersonal use (consumables or capital goods) must be approved by a supervisor. Order and warehouse requirements are automatically approved if the \"Approval\" checkbox is not selected.Attention! Goods ordered for a cost centre via \"own requirements\" are NOT put into storage after the goods receipt has been made available! It can also NOT be subsequently linked to an order!The quantity of goods provided by the incoming goods department does not increase the stock, but is intended for goods consumed by the corresponding cost centre (office supplies such as pens, printer paper, swivel chairs...)! Thus the procurement process of the goods is finished after the provision of the goods receipt!In order to have a requisition approved by a superior or to forward it directly to the purchasing department, it must be posted. The posting cannot take place automatically, as otherwise the approver/purchaser would receive the requirement coverage request before it has been checked by the processor.It is also important to note that requirement coverage requests of the type internal requirements can only be posted if a cost centre has been specified there for which the internal requirements are requested. A requirement coverage request of the type customer requirement must have a predecessor, that is, a cost object, in order to describe it completely.Another special feature must be taken into account in any case: quantities ordered for own use, i.e. for a specific cost centre, are not displayed on the warehouse account in the total \"In Goods Receipt\" or \"In QA\" after a goods receipt, as this ordered quantity is not intended for general \"dispositive\" consumption but only for the specified cost centre!. ### Instruction: Which module is being described? ### Response: This module is Requirement request."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Requirement request for me. ### Response: The module Requirement request serves the purpose of the following: The purchasing department is prompted by the requisitions to trigger orders. Every employee in the company can create requirement coverage requests. A distinction is made between four types:Own consumptionInvestmentOrder requirementsStorage needsProject needsPersonal use (consumables or capital goods) must be approved by a supervisor. Order and warehouse requirements are automatically approved if the \"Approval\" checkbox is not selected.Attention! Goods ordered for a cost centre via \"own requirements\" are NOT put into storage after the goods receipt has been made available! It can also NOT be subsequently linked to an order!The quantity of goods provided by the incoming goods department does not increase the stock, but is intended for goods consumed by the corresponding cost centre (office supplies such as pens, printer paper, swivel chairs...)! Thus the procurement process of the goods is finished after the provision of the goods receipt!In order to have a requisition approved by a superior or to forward it directly to the purchasing department, it must be posted. The posting cannot take place automatically, as otherwise the approver/purchaser would receive the requirement coverage request before it has been checked by the processor.It is also important to note that requirement coverage requests of the type internal requirements can only be posted if a cost centre has been specified there for which the internal requirements are requested. A requirement coverage request of the type customer requirement must have a predecessor, that is, a cost object, in order to describe it completely.Another special feature must be taken into account in any case: quantities ordered for own use, i.e. for a specific cost centre, are not displayed on the warehouse account in the total \"In Goods Receipt\" or \"In QA\" after a goods receipt, as this ordered quantity is not intended for general \"dispositive\" consumption but only for the specified cost centre!."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Approved requisition: A distinction is made between four types of requisition request: Consumables (own use) Capital goods (own consumption) Customer requirements (e.g. orders) Storage needs Personal use (consumables or capital goods) must be approved by a supervisor. Customer and warehouse requirements are automatically approved if the \"Approval\" checkbox is not selected. The approved requisitions are automatically distributed to the individual purchasing staff members, since each purchase order item has been assigned to a purchasing area (\"Purchasing area\" field in the purchase order item window) and the purchasing areas have been assigned to the purchasing staff members(structure PURCHASING_GROUPS \"Purchasing areas\"). ### Instruction: How is this module called? ### Response: This module is named Approved requisition."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Approved requisition. ### Response: The module Approved requisition can be described as follows: A distinction is made between four types of requisition request: Consumables (own use) Capital goods (own consumption) Customer requirements (e.g. orders) Storage needs Personal use (consumables or capital goods) must be approved by a supervisor. Customer and warehouse requirements are automatically approved if the \"Approval\" checkbox is not selected. The approved requisitions are automatically distributed to the individual purchasing staff members, since each purchase order item has been assigned to a purchasing area (\"Purchasing area\" field in the purchase order item window) and the purchasing areas have been assigned to the purchasing staff members(structure PURCHASING_GROUPS \"Purchasing areas\").."
    },
    {
        "input": "",
        "output": "### Context: This is the description of External services: All information relevant to the purchase of services is stored in the external service. ### Instruction: Name this module. ### Response: The module being described is External services."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module External services for me. ### Response: The module External services can be described as follows: All information relevant to the purchase of services is stored in the external service.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order set: An order set enables you to order individual parts at a group/total price. In the order, the price of the order set is distributed proportionally to sub-items. The subitems are inserted into the order from the sales set in the order or directly from the order set.The order set only serves as a grouping aid, i.e. the incoming invoice and all other transactions (goods receipt, purchase order, putaway) only refer to the subparts. No transactions are linked to the order set.The order set is currently only available for the automatically generated orders for an order. Generated requisitions and/or orders from the requirements and stock list do not use order sets in the standard scope of functions. ### Instruction: Which module is being described? ### Response: The name of this module is Order set."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Order set for me. ### Response: The module Order set can be described as follows: An order set enables you to order individual parts at a group/total price. In the order, the price of the order set is distributed proportionally to sub-items. The subitems are inserted into the order from the sales set in the order or directly from the order set.The order set only serves as a grouping aid, i.e. the incoming invoice and all other transactions (goods receipt, purchase order, putaway) only refer to the subparts. No transactions are linked to the order set.The order set is currently only available for the automatically generated orders for an order. Generated requisitions and/or orders from the requirements and stock list do not use order sets in the standard scope of functions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Incoming credit notes: Since the A/P credit memo entry and processing is very similar to the A/P invoice, you will find a detailed description within the A/P invoice. General: Incoming invoice credit notes are recorded and released in an almost identical way to incoming invoices. Thus, the masks for the entry look almost identical, but are still two different ones. However, the masks can be distinguished by the title and by the picture next to the number. The differences to the invoices: The first difference is, of course, that the values, even if they are shown as positive, are recorded negatively in the financial accounts. In the same way as for incoming invoices, \"normal\" and \"free\" items can also be entered for credit notes. The difference, however, is the previous check. Thus, normal items of a credit note can only be entered if the previous order item has the status \"partially invoiced\" or \"invoiced\". These \"normal\" items should be recorded if the credit note is intended to cancel all or part of the invoice or quantity invoiced. If the full invoice quantity is credited, the order item is again in the status \"not invoiced\". The other case is that a rebate/discount is subsequently credited to the invoiced quantity. In this case a credit note is recorded, but this should not have any effect on the calculation status of the order item. This corresponds to the free item, as is already the case with incoming invoices. The following aspects have an influence on the release of a position. Items that do not meet all controls must be checked manually and then released manually. A position must be checked if ... ... the position should be examined independently of any problems. ... the value deviation is too large. ... different header conditions on order and credit note were determined. ... it is a free credit item ... the total quantity of all credit notes relating to an order item is greater than the quantity invoiced. ... the total quantity of all credit notes relating to an order item differs from the quantity invoiced. ... it is a free credit item. Incoming credit notes for complaints Incoming credit notes for complaints can be entered via free positions. The complaint document must be selected as the predecessor here. ### Instruction: Name this module. ### Response: The module being described is Incoming credit notes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Incoming credit notes? ### Response: The module Incoming credit notes serves the purpose of the following: Since the A/P credit memo entry and processing is very similar to the A/P invoice, you will find a detailed description within the A/P invoice. General: Incoming invoice credit notes are recorded and released in an almost identical way to incoming invoices. Thus, the masks for the entry look almost identical, but are still two different ones. However, the masks can be distinguished by the title and by the picture next to the number. The differences to the invoices: The first difference is, of course, that the values, even if they are shown as positive, are recorded negatively in the financial accounts. In the same way as for incoming invoices, \"normal\" and \"free\" items can also be entered for credit notes. The difference, however, is the previous check. Thus, normal items of a credit note can only be entered if the previous order item has the status \"partially invoiced\" or \"invoiced\". These \"normal\" items should be recorded if the credit note is intended to cancel all or part of the invoice or quantity invoiced. If the full invoice quantity is credited, the order item is again in the status \"not invoiced\". The other case is that a rebate/discount is subsequently credited to the invoiced quantity. In this case a credit note is recorded, but this should not have any effect on the calculation status of the order item. This corresponds to the free item, as is already the case with incoming invoices. The following aspects have an influence on the release of a position. Items that do not meet all controls must be checked manually and then released manually. A position must be checked if ... ... the position should be examined independently of any problems. ... the value deviation is too large. ... different header conditions on order and credit note were determined. ... it is a free credit item ... the total quantity of all credit notes relating to an order item is greater than the quantity invoiced. ... the total quantity of all credit notes relating to an order item differs from the quantity invoiced. ... it is a free credit item. Incoming credit notes for complaints Incoming credit notes for complaints can be entered via free positions. The complaint document must be selected as the predecessor here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Incoming invoice: General overview of the workflow of incoming invoices General procedure for processing incoming invoices Reasons for inspection Account assignment VAT invoice Determining the invoice quantity Recording of a penalty (contractual penalty) Incoming invoice capture via scanned documents General information The main task of this module is the recording of the incoming invoices of the vendors and forms the basis of the overall task, the processing of the incoming invoices. This results in further subtasks such as checking the invoice, making the initial account assignment and posting in the financial accounting. ClassiX® supports this process by an ergonomic, semi-automatic capture of the incoming invoice. By means of an automated check, which presents the invoices to be checked directly to the respective employees for checking, the time delay caused by transport and communication between the departments/employees involved is minimised. Due to the assignment of the incoming invoice via the document history to the demand triggers, the initial account assignment is also carried out automatically. the posting to the financial accounting is carried out via the invoice receipt book. ### Instruction: Name this module. ### Response: This module is called Incoming invoice."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Incoming invoice. ### Response: The module Incoming invoice can be described as follows: General overview of the workflow of incoming invoices General procedure for processing incoming invoices Reasons for inspection Account assignment VAT invoice Determining the invoice quantity Recording of a penalty (contractual penalty) Incoming invoice capture via scanned documents General information The main task of this module is the recording of the incoming invoices of the vendors and forms the basis of the overall task, the processing of the incoming invoices. This results in further subtasks such as checking the invoice, making the initial account assignment and posting in the financial accounting. ClassiX® supports this process by an ergonomic, semi-automatic capture of the incoming invoice. By means of an automated check, which presents the invoices to be checked directly to the respective employees for checking, the time delay caused by transport and communication between the departments/employees involved is minimised. Due to the assignment of the incoming invoice via the document history to the demand triggers, the initial account assignment is also carried out automatically. the posting to the financial accounting is carried out via the invoice receipt book.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Receipt invoice and receipt credit items: Incoming invoice items can be entered manually or transferred from purchase orders. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Receipt invoice and receipt credit items."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Receipt invoice and receipt credit items. ### Response: The purpose of the module Receipt invoice and receipt credit items is as follows: Incoming invoice items can be entered manually or transferred from purchase orders.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Incoming invoice status: The list window of incoming invoice items serves as an important tool for the auditors of incoming invoices and credit notes in their work. In addition, it can be used as a statistic. ### Instruction: What is the name of this module? ### Response: This module is named Incoming invoice status."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Incoming invoice status serve? ### Response: The module Incoming invoice status can be described as follows: The list window of incoming invoice items serves as an important tool for the auditors of incoming invoices and credit notes in their work. In addition, it can be used as a statistic.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Automatic order requests: You can automatically create purchase requisitions for the selected approved requisitions. ### Instruction: Name this module. ### Response: This module is called Automatic order requests."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Automatic order requests. ### Response: The purpose of the module Automatic order requests is as follows: You can automatically create purchase requisitions for the selected approved requisitions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order request reminder: Suppliers can be reminded if they have either not responded to the requested price request or have not submitted the requested supplier declaration. ### Instruction: What is the name of the module being described? ### Response: This module is Order request reminder."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Order request reminder used for? ### Response: The module Order request reminder can be described as follows: Suppliers can be reminded if they have either not responded to the requested price request or have not submitted the requested supplier declaration.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order request item: Order enquiries are needed to determine the price of one or more articles. It is also possible to request proofs of origin. Purchase requisitions can be generated from the Approved Requisitions window and the Automatic Requisitions window or entered manually. A price comparison between individual articles can only be carried out for generated requests for quotation that have been requested from several suppliers. When generating an order or the extension of an order you will receive security prompts. The exact description of the functions is in a separate section. ### Instruction: Name this module. ### Response: This module is Order request item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Order request item? ### Response: The module Order request item can be described as follows: Order enquiries are needed to determine the price of one or more articles. It is also possible to request proofs of origin. Purchase requisitions can be generated from the Approved Requisitions window and the Automatic Requisitions window or entered manually. A price comparison between individual articles can only be carried out for generated requests for quotation that have been requested from several suppliers. When generating an order or the extension of an order you will receive security prompts. The exact description of the functions is in a separate section.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order group: Order items can be combined into price groups. This is done automatically by the system when using order sets, but can also be done manually in the order. You can put together groups from different items in the order. Each item can only be used in one group. A price is defined for the group and the price for the sub-items is adjusted proportionally so that the sum of these is equal to the group price. If all items are removed from a group, the group is also deleted. ### Instruction: What is the name of this module? ### Response: The name of this module is Order group."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Order group for me. ### Response: The module Order group serves the purpose of the following: Order items can be combined into price groups. This is done automatically by the system when using order sets, but can also be done manually in the order. You can put together groups from different items in the order. Each item can only be used in one group. A price is defined for the group and the price for the sub-items is adjusted proportionally so that the sum of these is equal to the group price. If all items are removed from a group, the group is also deleted.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order item: General Framework order (blanket order) Subsequent connection BA <--> BE Order type: Subsequent connection order item -> delivery schedule line (requestor customer requirement) Determination of prices Calculation of the price conditions Adopt order item price as a supplier-specific price Order text field Order number. ### Instruction: Which module is being described? ### Response: This module is named Order item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Order item? ### Response: The module Order item serves the purpose of the following: General Framework order (blanket order) Subsequent connection BA <--> BE Order type: Subsequent connection order item -> delivery schedule line (requestor customer requirement) Determination of prices Calculation of the price conditions Adopt order item price as a supplier-specific price Order text field Order number."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Requirement request item: From the MRP viewpoint, a requirement coverage item represents a planned receipt (\"requirements coverage\"). If requirements are ordered, the requirement request item is replaced by another MRP receipt document: Order item (e.g. in the Approved Requirement Request module). Attention- Transfer of attributes from order item: If a requirement request for an order part with in-house supplies is created either directly from an order or as level 0 in the part request, all order item attributes are transferred to the requirement request. Usually only those attributes are taken over which are available in the attribute bar of the variant part. ### Instruction: Name this module. ### Response: The module being described is Requirement request item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Requirement request item? ### Response: The module Requirement request item can be described as follows: From the MRP viewpoint, a requirement coverage item represents a planned receipt (\"requirements coverage\"). If requirements are ordered, the requirement request item is replaced by another MRP receipt document: Order item (e.g. in the Approved Requirement Request module). Attention- Transfer of attributes from order item: If a requirement request for an order part with in-house supplies is created either directly from an order or as level 0 in the part request, all order item attributes are transferred to the requirement request. Usually only those attributes are taken over which are available in the attribute bar of the variant part.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Merchandise: Merchandise parts are parts in an externally built database composed of price lists from different suppliers. Price lists from suppliers can therefore be read into a separate database. In order to be able to access these parts in one's own database, there is the extra mask \"Merchandise\", which enables access to the external database here in the master data, as well as when inserting positions in offers/orders.A trading good is a part with a purchasing and sales role. It would also be possible to create a part in the part master and then create the respective roles individually. With the help of this application it is possible to process the part master, the purchasing data and (the first) sales role simultaneously in a fast entry. It is still possible to switch to the respective role at any time to make more detailed changes. Parts created here can also be edited in the parts master. ### Instruction: Which module is being described? ### Response: The name of this module is Merchandise."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Merchandise? ### Response: The purpose of the module Merchandise is the following: Merchandise parts are parts in an externally built database composed of price lists from different suppliers. Price lists from suppliers can therefore be read into a separate database. In order to be able to access these parts in one's own database, there is the extra mask \"Merchandise\", which enables access to the external database here in the master data, as well as when inserting positions in offers/orders.A trading good is a part with a purchasing and sales role. It would also be possible to create a part in the part master and then create the respective roles individually. With the help of this application it is possible to process the part master, the purchasing data and (the first) sales role simultaneously in a fast entry. It is still possible to switch to the respective role at any time to make more detailed changes. Parts created here can also be edited in the parts master.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Anti Terror Screening Protocols: Each import of the EU, US, UK, CH and UN sanctions lists, each individual search, each mass comparison with data from an ERP system or with Outlook contacts (direct comparison with Outlook contacts not available in cloud version) is saved as an anti-terror screening log with the corresponding results. Each log is archived with user, date and time, the search criteria and the results found and can be viewed at any time. ### Instruction: Tell me the name of this module. ### Response: This module is called Anti Terror Screening Protocols."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Anti Terror Screening Protocols? ### Response: The purpose of the module Anti Terror Screening Protocols is the following: Each import of the EU, US, UK, CH and UN sanctions lists, each individual search, each mass comparison with data from an ERP system or with Outlook contacts (direct comparison with Outlook contacts not available in cloud version) is saved as an anti-terror screening log with the corresponding results. Each log is archived with user, date and time, the search criteria and the results found and can be viewed at any time.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Mass matching of persons organisations companies with sanctions lists: In order to meet the requirements of anti-terrorism and the sanctions guidelines, a company's own business partners (persons/companies/one-time addresses) must be compared with the sanctioned persons, companies or organisations contained in the sanctions lists. With this app, a mass comparison can be carried out on the one hand with the personal and company data from the company's own host database (e.g. the leading ERP system), and on the other hand directly with the contacts stored in Outlook (not available in the cloud version). ### Instruction: Name this module. ### Response: This module is Mass matching of persons organisations companies with sanctions lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Mass matching of persons organisations companies with sanctions lists used for? ### Response: The module Mass matching of persons organisations companies with sanctions lists serves the purpose of the following: In order to meet the requirements of anti-terrorism and the sanctions guidelines, a company's own business partners (persons/companies/one-time addresses) must be compared with the sanctioned persons, companies or organisations contained in the sanctions lists. With this app, a mass comparison can be carried out on the one hand with the personal and company data from the company's own host database (e.g. the leading ERP system), and on the other hand directly with the contacts stored in Outlook (not available in the cloud version).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sanctions lists Monitor: This app is used to process \"hits\" once they have been found, i.e. to add the persons/companies/one-time addresses from one's own database or one's own Outlook contacts (not available in the cloud version) to either the whitelist or the blacklist during a comparison with regard to the information in the sanctions lists.If persons/companies/one-time addresses are added to a whitelist or a blacklist, they are automatically matched again after an import/update of the sanctions lists. If the information of the assigned persons/companies in the sanctions lists changes due to the import/update, entries from the whitelist or blacklist are automatically transferred to the checklist to be checked. Entries in the checklist must then be checked again. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Sanctions lists Monitor."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Sanctions lists Monitor for me. ### Response: The module Sanctions lists Monitor serves the purpose of the following: This app is used to process \"hits\" once they have been found, i.e. to add the persons/companies/one-time addresses from one's own database or one's own Outlook contacts (not available in the cloud version) to either the whitelist or the blacklist during a comparison with regard to the information in the sanctions lists.If persons/companies/one-time addresses are added to a whitelist or a blacklist, they are automatically matched again after an import/update of the sanctions lists. If the information of the assigned persons/companies in the sanctions lists changes due to the import/update, entries from the whitelist or blacklist are automatically transferred to the checklist to be checked. Entries in the checklist must then be checked again.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Individual search in sanctions lists: In principle, one's own business partners should be regularly checked for possible sanctions by means of a mass comparison with the sanctioned persons, companies and organisations. However, before a new business relationship is established, this app is used to check new contacts for possible sanctions before they are entered into the leading system. This is - as a first step - purely a name check. Even if the search results in many possible hits, the number of possible matches can be reduced by a further, manual matching of the address (if known).It is important to carry out research on the new, possible business partner. The apps for listing sanctioned persons and sanctioned companies or organisations also serve this purpose.Such individual searches can also be logged, one therefore fulfils the due diligence obligation with regard to the observance of sanctions by the various countries. ### Instruction: What is the name of this module? ### Response: This module is Individual search in sanctions lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Individual search in sanctions lists for me. ### Response: The module Individual search in sanctions lists serves the purpose of the following: In principle, one's own business partners should be regularly checked for possible sanctions by means of a mass comparison with the sanctioned persons, companies and organisations. However, before a new business relationship is established, this app is used to check new contacts for possible sanctions before they are entered into the leading system. This is - as a first step - purely a name check. Even if the search results in many possible hits, the number of possible matches can be reduced by a further, manual matching of the address (if known).It is important to carry out research on the new, possible business partner. The apps for listing sanctioned persons and sanctioned companies or organisations also serve this purpose.Such individual searches can also be logged, one therefore fulfils the due diligence obligation with regard to the observance of sanctions by the various countries.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Import and compare sanctions lists: With this module, anti-terrorism or other sanctions lists can be imported into the Pythia database or updated. The standard version includes the comparison with the sanctions lists of the European Union EU and the United Nations UN. In addition to the import/update of the sanctions lists, a comparison is automatically made with the persons/companies/one-time addresses that are listed in a whitelist or blacklist. If the information of a person/company from a sanctions list changes, which is assigned to a person/company/one-time address from these lists, then this assigned person/company/one-time address from either the whitelist or the blacklist is transferred to the checklist for renewed verification. After an import of a sanctions list a mass comparison with the person/company/one-time address of the host database and the contacts from Outlook should take place immediately afterwards. ### Instruction: What is the name of this module? ### Response: The name of this module is Import and compare sanctions lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Import and compare sanctions lists. ### Response: The module Import and compare sanctions lists serves the purpose of the following: With this module, anti-terrorism or other sanctions lists can be imported into the Pythia database or updated. The standard version includes the comparison with the sanctions lists of the European Union EU and the United Nations UN. In addition to the import/update of the sanctions lists, a comparison is automatically made with the persons/companies/one-time addresses that are listed in a whitelist or blacklist. If the information of a person/company from a sanctions list changes, which is assigned to a person/company/one-time address from these lists, then this assigned person/company/one-time address from either the whitelist or the blacklist is transferred to the checklist for renewed verification. After an import of a sanctions list a mass comparison with the person/company/one-time address of the host database and the contacts from Outlook should take place immediately afterwards.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Alert | Quality assurance: The alert test checks whether 'alert' messages from changed window objects are sent correctly. For this purpose all window objects are created in the window and as soon as the user (the tester) changes the content somewhere, a corresponding message should appear in the large text field at the bottom. ### Instruction: How is this module called? ### Response: The name of this module is Alert | Quality assurance."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Alert | Quality assurance used for? ### Response: The module Alert | Quality assurance serves the purpose of the following: The alert test checks whether 'alert' messages from changed window objects are sent correctly. For this purpose all window objects are created in the window and as soon as the user (the tester) changes the content somewhere, a corresponding message should appear in the large text field at the bottom.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Quality assurance - Arithmetic: This test serves to test the arithmetic functions. On the left side in the first column you can enter any value for each datatype. The same way above in the first row. At the top left there are buttons for all four basic arithmetic operations, one click executes the desired operation. However, please note that some units or values may cause errors (e.g. division by zero). With the button 'sample data' randomly generated numbers can be filled in all fields. This test checks the automatic conversion of units. In the window you can see the function to be tested in one line on the left, a corresponding formula in the middle and the result on the right. The test automatically compares the calculated result with the expected value. ### Instruction: Which module is being described? ### Response: The module being described is Quality assurance - Arithmetic."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Quality assurance - Arithmetic for me. ### Response: The purpose of the module Quality assurance - Arithmetic is as follows: This test serves to test the arithmetic functions. On the left side in the first column you can enter any value for each datatype. The same way above in the first row. At the top left there are buttons for all four basic arithmetic operations, one click executes the desired operation. However, please note that some units or values may cause errors (e.g. division by zero). With the button 'sample data' randomly generated numbers can be filled in all fields. This test checks the automatic conversion of units. In the window you can see the function to be tested in one line on the left, a corresponding formula in the middle and the result on the right. The test automatically compares the calculated result with the expected value.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of File Object (CX_ASCII_FILE): This test checks the correct handling of ASCII files. For this purpose a file is created and filled with sample data. Then the file is read out again and the read content is displayed. The test run is started automatically after the call and can be repeated as often as required via the 'Start' menu. // 1. create vector with test data // Write test data into a file with fix record format (tstfix.dat) // 2nd build index file (tstfix.idx) // Write test data into file with variable record format (tstvar.dat) // 4th build index file (tstvar.idx) // 5. read file in fix format (with translation table) and compare with test data vector // 6th Seek some records // 7. read file in variable format (with translation table) and compare with test data vector // 8th Seek some records. ### Instruction: Tell me the name of this module. ### Response: The module being described is File Object (CX_ASCII_FILE)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module File Object (CX_ASCII_FILE) for me. ### Response: The purpose of the module File Object (CX_ASCII_FILE) is the following: This test checks the correct handling of ASCII files. For this purpose a file is created and filled with sample data. Then the file is read out again and the read content is displayed. The test run is started automatically after the call and can be repeated as often as required via the 'Start' menu. // 1. create vector with test data // Write test data into a file with fix record format (tstfix.dat) // 2nd build index file (tstfix.idx) // Write test data into file with variable record format (tstvar.dat) // 4th build index file (tstvar.idx) // 5. read file in fix format (with translation table) and compare with test data vector // 6th Seek some records // 7. read file in variable format (with translation table) and compare with test data vector // 8th Seek some records."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Buttons: This test checks the display of the different button types. The first thing that appears is a normal button. Below this is a non-selectable button and one that reveals a tooltip. The next two buttons demonstrate the use of images. The first one contains only one image and the second one changes its appearance by swapping two images with one click. ### Instruction: How is this module called? ### Response: The module being described is English:Buttons."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Buttons for me. ### Response: The purpose of the module English:Buttons is as follows: This test checks the display of the different button types. The first thing that appears is a normal button. Below this is a non-selectable button and one that reveals a tooltip. The next two buttons demonstrate the use of images. The first one contains only one image and the second one changes its appearance by swapping two images with one click.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:COM map: ..... ### Instruction: Tell me the name of this module. ### Response: This module is English:COM map."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module English:COM map serve? ### Response: The module English:COM map can be described as follows: ......"
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional table (CX_CONDITIONED_BAG): This module checks all functions for conditional object tables. In the upper area you can see the current table with the conditions. Here you can add and remove as many conditions as you like. Adding is done by entering appropriate values in the fields and pressing the button. The first field is the operator for an integer, the second field contains the number for comparison. The third field contains the operator for a string comparison, the fourth field contains the comparison string. The two conditions are automatically linked with 'and'. The fifth field contains a CX_VALUE as result, which is returned if the whole condition is fulfilled. The middle area shows the objects that are currently in the plugspace. Here you can add and remove any objects. Only the data fields 'int' and 'str' have to be set, because they are used for comparison with the conditions. In the lower area, various methods of the class can now be checked by simply pressing the corresponding buttons. The respective result is displayed in the list between the buttons, or can also result in an error message. The checkboxes below can be used to control which flags should be set. The exact effect of these can be found in the documentation for CX_CONDITIONED_BAG. The 'BindMessage' check box controls whether a message is defined for error handling or not. ### Instruction: Name this module. ### Response: This module is called Conditional table (CX_CONDITIONED_BAG)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Conditional table (CX_CONDITIONED_BAG) serve? ### Response: The purpose of the module Conditional table (CX_CONDITIONED_BAG) is the following: This module checks all functions for conditional object tables. In the upper area you can see the current table with the conditions. Here you can add and remove as many conditions as you like. Adding is done by entering appropriate values in the fields and pressing the button. The first field is the operator for an integer, the second field contains the number for comparison. The third field contains the operator for a string comparison, the fourth field contains the comparison string. The two conditions are automatically linked with 'and'. The fifth field contains a CX_VALUE as result, which is returned if the whole condition is fulfilled. The middle area shows the objects that are currently in the plugspace. Here you can add and remove any objects. Only the data fields 'int' and 'str' have to be set, because they are used for comparison with the conditions. In the lower area, various methods of the class can now be checked by simply pressing the corresponding buttons. The respective result is displayed in the list between the buttons, or can also result in an error message. The checkboxes below can be used to control which flags should be set. The exact effect of these can be found in the documentation for CX_CONDITIONED_BAG. The 'BindMessage' check box controls whether a message is defined for error handling or not.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Wrapper object (CX_COND_WRAPPER): With the upper two buttons the normal wrapper can be checked again for correct function (both with transient and persistent objects). On the left the 3 buttons below test the conditioned wrapper under different conditions. The button 'Edit CondWrapper' opens a window, with which you can test the recursion detection of the conditioned wrapper. The button 'Test' always works with the topmost object in the list. With the arrows you can move the objects in the list back and forth. The lowest object 'Alpha' contains a recursion and should cause an error message during the test. ### Instruction: What is the name of this module? ### Response: This module is Wrapper object (CX_COND_WRAPPER)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Wrapper object (CX_COND_WRAPPER). ### Response: The module Wrapper object (CX_COND_WRAPPER) can be described as follows: With the upper two buttons the normal wrapper can be checked again for correct function (both with transient and persistent objects). On the left the 3 buttons below test the conditioned wrapper under different conditions. The button 'Edit CondWrapper' opens a window, with which you can test the recursion detection of the conditioned wrapper. The button 'Test' always works with the topmost object in the list. With the arrows you can move the objects in the list back and forth. The lowest object 'Alpha' contains a recursion and should cause an error message during the test.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Current date object (CX_DATE): This module tests operations with a date. The first tab 'Information' offers the possibility to enter a date. In the fields below you can see various information about this date. You can also modify the date using the drop down box. The second tab 'Text' displays various textual information, also in several languages, for the specified date. With the third tab 'Modification' the date can be changed by explicitly setting the day, month or year and by adding days, weeks, months or years. The fourth tab 'Further processing' demonstrates further operations with the date. For example, the Easter Sunday of the current year or the date of the next or previous day of a particular week can be displayed. ### Instruction: What is the name of the module being described? ### Response: The module being described is Current date object (CX_DATE)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Current date object (CX_DATE)? ### Response: The module Current date object (CX_DATE) can be described as follows: This module tests operations with a date. The first tab 'Information' offers the possibility to enter a date. In the fields below you can see various information about this date. You can also modify the date using the drop down box. The second tab 'Text' displays various textual information, also in several languages, for the specified date. With the third tab 'Modification' the date can be changed by explicitly setting the day, month or year and by adding days, weeks, months or years. The fourth tab 'Further processing' demonstrates further operations with the date. For example, the Easter Sunday of the current year or the date of the next or previous day of a particular week can be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Deadlock retry: The deadlock retry mechanism has the following properties: if a deadlock occurs within a transaction, the transaction will the environment parameters are restored (stack data, variables) (see also the test Resuming after err_deadlock) and an attempt is made to carry out the transaction again If the environment variable CX_DEADLOCKRETRY= is set, the output of the deadlock mechanism is stored in the specified file. ### Instruction: Name this module. ### Response: This module is named English:Deadlock retry."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Deadlock retry for me. ### Response: The purpose of the module English:Deadlock retry is as follows: The deadlock retry mechanism has the following properties: if a deadlock occurs within a transaction, the transaction will the environment parameters are restored (stack data, variables) (see also the test Resuming after err_deadlock) and an attempt is made to carry out the transaction again If the environment variable CX_DEADLOCKRETRY= is set, the output of the deadlock mechanism is stored in the specified file.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Dictionaries | Quality assurance: All functions of the dictionaries are tested, which can be tested interactively: CX_DICTIONARY, CX_DICTIONARY_CI, CX_INDEX, CX_INDEX_CI This test can be started manually and automatically. More detailed documentation can be found in the online documentation \"Sketch of a test department\" under Dictionary Test. ### Instruction: How is this module called? ### Response: The name of this module is Dictionaries | Quality assurance."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Dictionaries | Quality assurance for me. ### Response: The module Dictionaries | Quality assurance can be described as follows: All functions of the dictionaries are tested, which can be tested interactively: CX_DICTIONARY, CX_DICTIONARY_CI, CX_INDEX, CX_INDEX_CI This test can be started manually and automatically. More detailed documentation can be found in the online documentation \"Sketch of a test department\" under Dictionary Test.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Drag and Drop: With this you can test drag & drop between various widgets. After calling it up, you can create a sample data structure via the 'File' menu. With the right mouse button and 'Show structure' these example data can be filled into the individual window objects. Now you can drag single elements of this data in and between the windows. With the button at the bottom right you can control the handling of Drag & Drop with Throws. ### Instruction: Which module is being described? ### Response: This module is Drag and Drop."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Drag and Drop used for? ### Response: The module Drag and Drop is used for the following: With this you can test drag & drop between various widgets. After calling it up, you can create a sample data structure via the 'File' menu. With the right mouse button and 'Show structure' these example data can be filled into the individual window objects. Now you can drag single elements of this data in and between the windows. With the button at the bottom right you can control the handling of Drag & Drop with Throws.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Drawing: ... ### Instruction: Which module is being described? ### Response: This module is called Drawing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Drawing? ### Response: The module Drawing serves the purpose of the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Character sets: This demonstrates the representation of various character sets using the alphabet and the numbers 0-9. ### Instruction: What is the name of this module? ### Response: This module is named Character sets."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Character sets used for? ### Response: The module Character sets can be described as follows: This demonstrates the representation of various character sets using the alphabet and the numbers 0-9.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Formula Object (CX_FORMULA): This is used to check the formula calculation for transient/persistent objects for correct function. At the bottom of the window there are two buttons. The button 'Test' lets you run through some formulas quickly one after the other and compares the calculated results with the expected values. The button 'Random Test' lets you endlessly run through a few randomly selected formulas and compares the values. The three text fields show the formula to be calculated at the top, the internal formula format in the middle and the calculated result at the bottom. Under the menu item 'Test', 'Test Export' defines some formula examples with which the multilingual capability can be tested. If one selects an example here and then activates another language with the menu 'Language', units etc. should also change the language. With button 'start', formulas are evaluated and the result is checked. To prove not only the correctnes of formula evaluation but also the stability of the algorithms involved, formulas are evaluated in random order. Menu 'Test Export' shows the representation of formulas with language dependent terms, i.e. enumeration constants and constant with dimensions like 'pieces'. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Formula Object (CX_FORMULA)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Formula Object (CX_FORMULA) for me. ### Response: The purpose of the module Formula Object (CX_FORMULA) is the following: This is used to check the formula calculation for transient/persistent objects for correct function. At the bottom of the window there are two buttons. The button 'Test' lets you run through some formulas quickly one after the other and compares the calculated results with the expected values. The button 'Random Test' lets you endlessly run through a few randomly selected formulas and compares the values. The three text fields show the formula to be calculated at the top, the internal formula format in the middle and the calculated result at the bottom. Under the menu item 'Test', 'Test Export' defines some formula examples with which the multilingual capability can be tested. If one selects an example here and then activates another language with the menu 'Language', units etc. should also change the language. With button 'start', formulas are evaluated and the result is checked. To prove not only the correctnes of formula evaluation but also the stability of the algorithms involved, formulas are evaluated in random order. Menu 'Test Export' shows the representation of formulas with language dependent terms, i.e. enumeration constants and constant with dimensions like 'pieces'.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Garbage collection of transient objects: This test creates a transient object and then calls a function that produces stack data. Depending on which button was pressed, the function runs through up to 100,000 times. After the run, the 'Check' button can be used to check if the object is still present. If there is no error message, the object is still present and has not been erroneously removed from the garbage collection. ### Instruction: Which module is being described? ### Response: This module is named Garbage collection of transient objects."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Garbage collection of transient objects. ### Response: The purpose of the module Garbage collection of transient objects is the following: This test creates a transient object and then calls a function that produces stack data. Depending on which button was pressed, the function runs through up to 100,000 times. After the run, the 'Check' button can be used to check if the object is still present. If there is no error message, the object is still present and has not been erroneously removed from the garbage collection.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Group: The widget type group is tested. ### Instruction: Tell me the name of this module. ### Response: The module being described is Group."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Group used for? ### Response: The purpose of the module Group is the following: The widget type group is tested.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Variant parts (CX_ITEM_PATTERN): This test is intended to check the resolution of a variant part into its subparts. Each time the window is opened, a variant part is created with a list of characteristics with the characteristics POWER_MOTOR, NUMBER OF ROTATION and DIAMETER. Also 2 lower parts with different characteristics. For testing, a CX_ALLOCATION_TXN is created with an AttributeSet, which is plugged to the resolution. Here you can make the desired test settings and with a click on \"Test resolution\" you can check if the correct subpart is found by the function \"Item()\" called in the test. The determined part is then marked in the upper list. You could now manually check whether a characteristic is expected in the plug space even if this characteristic is preset in the characteristic bar of the variant part and the type is not set to \"Without value specification\". The result is: It is still expected. (An error message appears stating that DemandVariables may only be called with a registered message). ### Instruction: What is the name of this module? ### Response: This module is named Variant parts (CX_ITEM_PATTERN)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Variant parts (CX_ITEM_PATTERN) serve? ### Response: The purpose of the module Variant parts (CX_ITEM_PATTERN) is as follows: This test is intended to check the resolution of a variant part into its subparts. Each time the window is opened, a variant part is created with a list of characteristics with the characteristics POWER_MOTOR, NUMBER OF ROTATION and DIAMETER. Also 2 lower parts with different characteristics. For testing, a CX_ALLOCATION_TXN is created with an AttributeSet, which is plugged to the resolution. Here you can make the desired test settings and with a click on \"Test resolution\" you can check if the correct subpart is found by the function \"Item()\" called in the test. The determined part is then marked in the upper list. You could now manually check whether a characteristic is expected in the plug space even if this characteristic is preset in the characteristic bar of the variant part and the type is not set to \"Without value specification\". The result is: It is still expected. (An error message appears stating that DemandVariables may only be called with a registered message)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Link and Unlink: Link and Unlink replace the SetReference function. In this module the two functions are tested. ### Instruction: What is the name of this module? ### Response: This module is Link and Unlink."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Link and Unlink for me. ### Response: The purpose of the module Link and Unlink is the following: Link and Unlink replace the SetReference function. In this module the two functions are tested.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:ObjectListView (MegaList): This test is again about lists. With the menu 'Edit' the window can be filled with a number of records. With 'Extend Collection' you can extend the collection as you like. After filling, you can now edit the records by double-clicking on them, sort the list by clicking on the corresponding attributes (with Ctrl+click on an attribute you can set this as a second sorting criterion) or delete selected records by right-clicking on the context menu. ### Instruction: What is the name of the module being described? ### Response: This module is called English:ObjectListView (MegaList)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:ObjectListView (MegaList) for me. ### Response: The purpose of the module English:ObjectListView (MegaList) is the following: This test is again about lists. With the menu 'Edit' the window can be filled with a number of records. With 'Extend Collection' you can extend the collection as you like. After filling, you can now edit the records by double-clicking on them, sort the list by clicking on the corresponding attributes (with Ctrl+click on an attribute you can set this as a second sorting criterion) or delete selected records by right-clicking on the context menu.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:ObjectListView AUTO_POSITION: For playing there is a ListView with the flag AUTO_POSITION and some entries of different width. By scrolling and enlarging and reducing the window you can see how and when a ListView with the flag AUTO_POSITION adjusts the column widths. ### Instruction: What is the name of the module being described? ### Response: This module is called English:ObjectListView AUTO_POSITION."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module English:ObjectListView AUTO_POSITION? ### Response: The module English:ObjectListView AUTO_POSITION can be described as follows: For playing there is a ListView with the flag AUTO_POSITION and some entries of different width. By scrolling and enlarging and reducing the window you can see how and when a ListView with the flag AUTO_POSITION adjusts the column widths.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of ObjectListView Exceptions &amp; Transactions: Test ListView with exceptions. ### Instruction: Name this module. ### Response: This module is ObjectListView Exceptions &amp; Transactions."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module ObjectListView Exceptions &amp; Transactions. ### Response: The module ObjectListView Exceptions &amp; Transactions is used for the following: Test ListView with exceptions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:ObjectListView::OboxEdit: Test of OboxEdit with ObjectListView. ### Instruction: Which module is being described? ### Response: The name of this module is English:ObjectListView::OboxEdit."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:ObjectListView::OboxEdit used for? ### Response: The module English:ObjectListView::OboxEdit is used for the following: Test of OboxEdit with ObjectListView."
    },
    {
        "input": "",
        "output": "### Context: This is the description of ObjectListView::OboxUp and Down: The entries in the ListView can be moved with the arrow buttons. Moving is done by OboxUp or OboxDown, afterwards the underlying collection is updated via AdjustCollection. In the lower part of the window the list is displayed again. So differences between the ListView and the Collection can be recognized immediately. The window has two notebook flaps: ListView and List. On the first tab is a ListView, on the second an OList. ### Instruction: What is the name of the module being described? ### Response: The module being described is ObjectListView::OboxUp and Down."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module ObjectListView::OboxUp and Down for me. ### Response: The module ObjectListView::OboxUp and Down is used for the following: The entries in the ListView can be moved with the arrow buttons. Moving is done by OboxUp or OboxDown, afterwards the underlying collection is updated via AdjustCollection. In the lower part of the window the list is displayed again. So differences between the ListView and the Collection can be recognized immediately. The window has two notebook flaps: ListView and List. On the first tab is a ListView, on the second an OList.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of ObjectListView::OboxUp and Down 2: The entries in the ListView can be moved with the arrow buttons. Moving is done by OboxUp or OboxDown, afterwards the collection behind is updated via DrainWindow. In the lower part of the window the list is displayed again. So differences between the ListView and the collection can be recognized immediately. The window has two notebook flaps: ListView and List. On the first tab is a ListView, on the second an OList. ### Instruction: What is the name of the module being described? ### Response: This module is named ObjectListView::OboxUp and Down 2."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module ObjectListView::OboxUp and Down 2 serve? ### Response: The purpose of the module ObjectListView::OboxUp and Down 2 is the following: The entries in the ListView can be moved with the arrow buttons. Moving is done by OboxUp or OboxDown, afterwards the collection behind is updated via DrainWindow. In the lower part of the window the list is displayed again. So differences between the ListView and the collection can be recognized immediately. The window has two notebook flaps: ListView and List. On the first tab is a ListView, on the second an OList.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:ObjectListView::SetFormat: Test of SetFormat with ObjectListView. ### Instruction: How is this module called? ### Response: The name of this module is English:ObjectListView::SetFormat."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module English:ObjectListView::SetFormat serve? ### Response: The module English:ObjectListView::SetFormat serves the purpose of the following: Test of SetFormat with ObjectListView."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:ObjectListView::Sort: The ListView can simultaneously display objects of type CX_PERSON and CX_LEGAL_PERSON. Common to both is the data field \"name\", which is displayed in the first column. The second column displays various data fields, which can still be used for sorting: Either with a click on the column header, or by 1 SetSort. There are two different objects displayed in the same list. They have one field in common and one field is different. This is why SetFormat has two different formats for column 1. ### Instruction: What is the name of this module? ### Response: This module is named English:ObjectListView::Sort."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module English:ObjectListView::Sort serve? ### Response: The module English:ObjectListView::Sort is used for the following: The ListView can simultaneously display objects of type CX_PERSON and CX_LEGAL_PERSON. Common to both is the data field \"name\", which is displayed in the first column. The second column displays various data fields, which can still be used for sorting: Either with a click on the column header, or by 1 SetSort. There are two different objects displayed in the same list. They have one field in common and one field is different. This is why SetFormat has two different formats for column 1.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of ObjectListView::XML export: Here the XML export into a file can be tested. Three data sets are prepared. A click on \"Export\" opens a dialog where an XML file for the output has to be entered. Then the list is exported via XML export. ### Instruction: Tell me the name of this module. ### Response: This module is called ObjectListView::XML export."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module ObjectListView::XML export. ### Response: The module ObjectListView::XML export is used for the following: Here the XML export into a file can be tested. Three data sets are prepared. A click on \"Export\" opens a dialog where an XML file for the output has to be entered. Then the list is exported via XML export.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Messages, garbage collection, module reloading: This routine tests the following functions and tries to detect errors: Message Passing Sent and received messages are counted and the counters are compared. CURRENT / NON_CURRENT for the modules is monitored and it is tested whether the messages received from window objects arrive according to the parent-child hierarchy. Garbage Collection Each module tests an invariant value for immutability - i.e. protection against garbage collection - while all modules intentionally produce a lot of stack data. Reload modules There are three different implementations for the Beta module, but they all respond to the messages sent by the main programme. From time to time, the current version for module beta is replaced by one of the others in random order. The test runs endlessly, so it is intended for a longer runtime. As soon as an error is detected, an error message appears. At the same time, a log file is created in the directory where the ClassiX® application was started. This allows to follow the test procedure and possible errors are recorded. // This module performs all actions in random order, thus we may detect errors // that occur under certain conditions only. // These actions are: // sending message ALFA, BETA, or GAMMA // sending message CLOSE_WINx with (x = A, B, C) // reloading module Beta with different implementations (1 - 3) // // Actions and errors are written into file MSGTEST.LOG // // // This test routine covers the following basic functionality: // // - Corrent Message Passing // Sended and received messages are counted and checked. // Window objects check arrival of messages according to parent-child-hierachy. // CURRENT / NON_CURRENT received by any module are tested to arrive in proper sequence // // - Garbage Collection // To detect possible errors in garbage collection, invariant values are repeatedly checked and // all modules produce deliberately lots of garbage. // // - Reloading of Modules // Module Beta is frequently reloaded, chosing arbitrarily among there are 3 different implementations. //. ### Instruction: Tell me the name of this module. ### Response: The module being described is English:Messages, garbage collection, module reloading."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Messages, garbage collection, module reloading for me. ### Response: The module English:Messages, garbage collection, module reloading serves the purpose of the following: This routine tests the following functions and tries to detect errors: Message Passing Sent and received messages are counted and the counters are compared. CURRENT / NON_CURRENT for the modules is monitored and it is tested whether the messages received from window objects arrive according to the parent-child hierarchy. Garbage Collection Each module tests an invariant value for immutability - i.e. protection against garbage collection - while all modules intentionally produce a lot of stack data. Reload modules There are three different implementations for the Beta module, but they all respond to the messages sent by the main programme. From time to time, the current version for module beta is replaced by one of the others in random order. The test runs endlessly, so it is intended for a longer runtime. As soon as an error is detected, an error message appears. At the same time, a log file is created in the directory where the ClassiX® application was started. This allows to follow the test procedure and possible errors are recorded. // This module performs all actions in random order, thus we may detect errors // that occur under certain conditions only. // These actions are: // sending message ALFA, BETA, or GAMMA // sending message CLOSE_WINx with (x = A, B, C) // reloading module Beta with different implementations (1 - 3) // // Actions and errors are written into file MSGTEST.LOG // // // This test routine covers the following basic functionality: // // - Corrent Message Passing // Sended and received messages are counted and checked. // Window objects check arrival of messages according to parent-child-hierachy. // CURRENT / NON_CURRENT received by any module are tested to arrive in proper sequence // // - Garbage Collection // To detect possible errors in garbage collection, invariant values are repeatedly checked and // all modules produce deliberately lots of garbage. // // - Reloading of Modules // Module Beta is frequently reloaded, chosing arbitrarily among there are 3 different implementations. //."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Multilingual OLE Box: This test shows the embedding of MS-Word. With a double click on the text field Word is started and you can now create any text with Word. After closing Word, the text is transferred to the text field. The buttons are self-explanatory. With picture-down and picture-up you can switch between the different languages and also enter a separate text for each language. ### Instruction: What is the name of the module being described? ### Response: This module is Multilingual OLE Box."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Multilingual OLE Box. ### Response: The module Multilingual OLE Box can be described as follows: This test shows the embedding of MS-Word. With a double click on the text field Word is started and you can now create any text with Word. After closing Word, the text is transferred to the text field. The buttons are self-explanatory. With picture-down and picture-up you can switch between the different languages and also enter a separate text for each language.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of OLE-Control Test Container: Test of an OLE Widget container. ### Instruction: Tell me the name of this module. ### Response: The name of this module is OLE-Control Test Container."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module OLE-Control Test Container used for? ### Response: The module OLE-Control Test Container can be described as follows: Test of an OLE Widget container."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Queries with Pattern Matching: With this module queries with pattern matching (i.e. queries with '~') can be checked. For other queries see also Queries and Index Management or Queries with ? operator The button 'Autotest' creates 3 persons in the database and then tries to find them. The prerequisite for this is a database in which no CX_PERSON objects are present in order to compare the number of objects found with the expected result. For this purpose the button \"Delete persons objects\" must be pressed first. A freely selectable query can also be entered in the 'Query string' text field at the top right and executed with the 'Start' button. In the queries up to three variables can be used over %s, which are then replaced with the content from the parameter fields (from right to left). The result of this manual query is displayed in the list box. ### Instruction: What is the name of this module? ### Response: The name of this module is Queries with Pattern Matching."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Queries with Pattern Matching serve? ### Response: The purpose of the module Queries with Pattern Matching is as follows: With this module queries with pattern matching (i.e. queries with '~') can be checked. For other queries see also Queries and Index Management or Queries with ? operator The button 'Autotest' creates 3 persons in the database and then tries to find them. The prerequisite for this is a database in which no CX_PERSON objects are present in order to compare the number of objects found with the expected result. For this purpose the button \"Delete persons objects\" must be pressed first. A freely selectable query can also be entered in the 'Query string' text field at the top right and executed with the 'Start' button. In the queries up to three variables can be used over %s, which are then replaced with the content from the parameter fields (from right to left). The result of this manual query is displayed in the list box.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Periodic date object (CX_PERIODIC_DATE): This is used to check a recurring date. The first rider concerns only one specific day. At the top of the window you can select which day of each month and a number of subsequent days the periodic date contains. Below this you have to enter a sample period. Now the corresponding dates appear in the list. At the bottom you can test if a certain date is included in the periodic date. The next tab works in the same way, except that you can enter specific weekdays instead of the day of a month. The third tab checks periodic data composed of day and month. Here you can again enter the day of a month, but also the month itself and a number of subsequent days. ### Instruction: How is this module called? ### Response: The module being described is Periodic date object (CX_PERIODIC_DATE)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Periodic date object (CX_PERIODIC_DATE) used for? ### Response: The module Periodic date object (CX_PERIODIC_DATE) can be described as follows: This is used to check a recurring date. The first rider concerns only one specific day. At the top of the window you can select which day of each month and a number of subsequent days the periodic date contains. Below this you have to enter a sample period. Now the corresponding dates appear in the list. At the bottom you can test if a certain date is included in the periodic date. The next tab works in the same way, except that you can enter specific weekdays instead of the day of a month. The third tab checks periodic data composed of day and month. Here you can again enter the day of a month, but also the month itself and a number of subsequent days.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Telephone object (CX_PHONE): This module tests the formatting according to the set locales. If a telephone number is entered above (with or without area code, or just an extension number e.g. '-33'), the text fields should show appropriately formatted telephone numbers. ### Instruction: What is the name of the module being described? ### Response: This module is called Telephone object (CX_PHONE)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Telephone object (CX_PHONE)? ### Response: The module Telephone object (CX_PHONE) is used for the following: This module tests the formatting according to the set locales. If a telephone number is entered above (with or without area code, or just an extension number e.g. '-33'), the text fields should show appropriately formatted telephone numbers.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Image processing: This test tries to find errors in the processing of images. After starting, the user is prompted to specify an image file. This image is then displayed in 3 different modes, once the original, then dynamically positioned and stretched. A click on the button 'Original Image' asks the user to select an image file again. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Image processing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Image processing. ### Response: The purpose of the module Image processing is the following: This test tries to find errors in the processing of images. After starting, the user is prompted to specify an image file. This image is then displayed in 3 different modes, once the original, then dynamically positioned and stretched. A click on the button 'Original Image' asks the user to select an image file again.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Letterbox object (CX_PO_BOX_ADDRESS): This little test allows you to convert any string into a letterbox number. In the upper field you can enter a string consisting of letters and numbers, which will be converted accordingly by removing all letters. The lower field should contain the pure number of the box, while the upper field should be preceded by the term 'letterbox' in the selected language. ### Instruction: How is this module called? ### Response: The name of this module is Letterbox object (CX_PO_BOX_ADDRESS)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Letterbox object (CX_PO_BOX_ADDRESS) used for? ### Response: The module Letterbox object (CX_PO_BOX_ADDRESS) can be described as follows: This little test allows you to convert any string into a letterbox number. In the upper field you can enter a string consisting of letters and numbers, which will be converted accordingly by removing all letters. The lower field should contain the pure number of the box, while the upper field should be preceded by the term 'letterbox' in the selected language.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Test Print: This is used to test the printing. There are tabs for lists, trees, OLE & text and input fields. In each case a few sample data can be generated and then previewed or printed. With the button 'Print with ...' you can select the printer and with 'Print with settings' you can access the printer options. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Test Print."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Test Print? ### Response: The module Test Print can be described as follows: This is used to test the printing. There are tabs for lists, trees, OLE & text and input fields. In each case a few sample data can be generated and then previewed or printed. With the button 'Print with ...' you can select the printer and with 'Print with settings' you can access the printer options.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Queries and index management: This module tests everything that has to do with queries and indexes for correct function. A sample database with various personal data is used for this. Normal queries can be tested with the input mask, where you can search the database according to any criteria. Just enter a search value in a field and press Enter. You can also edit the database by simply selecting a record, making the changes at the top of the screen and then clicking the 'save' button. Under the menu item 'Test' there are various instructions for creating and removing an index of certain parts of the database. Here you can also create and remove an index with Retrieve and test the explicit tracking with Call(BreakLink) and Call(MakeLink). Finally, this menu also contains functions with PrePostUpdate. The menu item 'more Queries...' opens a new window, which allows queries with retrieve and index update with the PrePostUpdate function UniqueIDIndexMaint(). The buttons 'A', 'B' etc. contain ready-made queries with which the PrePostUpdate function can be tested. Under the item 'Manager...' you will find the Query Manager, which can display all cached queries in detail. With 'Query Functions' you can create an overview of all query functions and the 'Index Manager' is the last point to manage all created indexes. ### Instruction: Tell me the name of this module. ### Response: This module is called Queries and index management."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Queries and index management used for? ### Response: The module Queries and index management serves the purpose of the following: This module tests everything that has to do with queries and indexes for correct function. A sample database with various personal data is used for this. Normal queries can be tested with the input mask, where you can search the database according to any criteria. Just enter a search value in a field and press Enter. You can also edit the database by simply selecting a record, making the changes at the top of the screen and then clicking the 'save' button. Under the menu item 'Test' there are various instructions for creating and removing an index of certain parts of the database. Here you can also create and remove an index with Retrieve and test the explicit tracking with Call(BreakLink) and Call(MakeLink). Finally, this menu also contains functions with PrePostUpdate. The menu item 'more Queries...' opens a new window, which allows queries with retrieve and index update with the PrePostUpdate function UniqueIDIndexMaint(). The buttons 'A', 'B' etc. contain ready-made queries with which the PrePostUpdate function can be tested. Under the item 'Manager...' you will find the Query Manager, which can display all cached queries in detail. With 'Query Functions' you can create an overview of all query functions and the 'Index Manager' is the last point to manage all created indexes.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Queries with ? operator: This module tests queries with the ? operator. Queries can be entered in the edit field and executed with Enter. The result is then displayed at the bottom of the list. In addition, an auto test is also possible, which can be started with the corresponding button. But before that you should try 'Mr. Proper' so that the Auto-Test finds a clean database. Test module generates 2 persons (alpha, beta) and checks if the ? operator works correctly by making some queries and checking the number of returned objects with the target. The autotest assumes that there are no CX_PERSONS stored in the database. ### Instruction: What is the name of this module? ### Response: This module is named Queries with ? operator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Queries with ? operator for me. ### Response: The purpose of the module Queries with ? operator is the following: This module tests queries with the ? operator. Queries can be entered in the edit field and executed with Enter. The result is then displayed at the bottom of the list. In addition, an auto test is also possible, which can be started with the corresponding button. But before that you should try 'Mr. Proper' so that the Auto-Test finds a clean database. Test module generates 2 persons (alpha, beta) and checks if the ? operator works correctly by making some queries and checking the number of returned objects with the target. The autotest assumes that there are no CX_PERSONS stored in the database.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conversion tables object (CX_RATE_TABLE): With rate tables you can test the automatic conversion between self-defined units. At the top of the window is a list containing the Current Units Conversion Table. The units can be edited by double-clicking on them or they can be created or deleted with the buttons 'Add Unit' and 'Remove Unit'. In the lower part of the window you can now convert between the units. To convert directly from one unit to another the button 'UnitConvert' is available. However, this button also requires the existence of a direct conversion rule for the units in question, otherwise the result is zero. To convert, enter the number and unit of the initial value into the field 'x'. In the field 'y' the target unit. To convert click the button. To convert over the whole table with several rules, use the button 'UnitCrossConvert'. Otherwise you proceed exactly as above. If UnitCrossConvert is not able to perform the conversion successfully (due to missing rules in the table), a display of the way the function has taken over the rules of the table appears in the window 'Trace'. To use the arithmetic functions (the buttons '+' '-' '*' '/') the table must first be registered in the system with the button 'Register table'. Now you can enter any values and units in the fields 'x' and 'y' and calculate. To make changes to the table again or just to convert it you have to log off the table with the button 'Log off table'. The field 'Rest' shows both the remainder of the conversion process and the remainder of the arithmetic functions. With the button 'ConvertIntoSmallest' a vector with the values and units from the fields 'x' and 'y' is created and it is tried to break everything down to the smallest possible unit of the table. The result then appears in the corresponding field, if no way is found the function returns zero. The menu item 'Autotest' starts a run through various conversion and calculation operations. The results are displayed in the 'Trace' window. Under the menu 'Examples' various sample numbers can be entered into the operand fields. ### Instruction: Name this module. ### Response: The module being described is Conversion tables object (CX_RATE_TABLE)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Conversion tables object (CX_RATE_TABLE) used for? ### Response: The purpose of the module Conversion tables object (CX_RATE_TABLE) is as follows: With rate tables you can test the automatic conversion between self-defined units. At the top of the window is a list containing the Current Units Conversion Table. The units can be edited by double-clicking on them or they can be created or deleted with the buttons 'Add Unit' and 'Remove Unit'. In the lower part of the window you can now convert between the units. To convert directly from one unit to another the button 'UnitConvert' is available. However, this button also requires the existence of a direct conversion rule for the units in question, otherwise the result is zero. To convert, enter the number and unit of the initial value into the field 'x'. In the field 'y' the target unit. To convert click the button. To convert over the whole table with several rules, use the button 'UnitCrossConvert'. Otherwise you proceed exactly as above. If UnitCrossConvert is not able to perform the conversion successfully (due to missing rules in the table), a display of the way the function has taken over the rules of the table appears in the window 'Trace'. To use the arithmetic functions (the buttons '+' '-' '*' '/') the table must first be registered in the system with the button 'Register table'. Now you can enter any values and units in the fields 'x' and 'y' and calculate. To make changes to the table again or just to convert it you have to log off the table with the button 'Log off table'. The field 'Rest' shows both the remainder of the conversion process and the remainder of the arithmetic functions. With the button 'ConvertIntoSmallest' a vector with the values and units from the fields 'x' and 'y' is created and it is tried to break everything down to the smallest possible unit of the table. The result then appears in the corresponding field, if no way is found the function returns zero. The menu item 'Autotest' starts a run through various conversion and calculation operations. The results are displayed in the 'Trace' window. Under the menu 'Examples' various sample numbers can be entered into the operand fields.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Reference-based pointer slot: This test checks the mechanism by which transient objects may point to persistent objects via dynamic data fields. This test runs on its own and if no error message appears, it can be considered successful. ### Instruction: Tell me the name of this module. ### Response: This module is called Reference-based pointer slot."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Reference-based pointer slot? ### Response: The purpose of the module Reference-based pointer slot is as follows: This test checks the mechanism by which transient objects may point to persistent objects via dynamic data fields. This test runs on its own and if no error message appears, it can be considered successful.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Quality assurance - Reload: This test checks the reloading of inherited modules. The number of reloads and the delay between them can be set. ### Instruction: How is this module called? ### Response: This module is called Quality assurance - Reload."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Quality assurance - Reload serve? ### Response: The module Quality assurance - Reload is used for the following: This test checks the reloading of inherited modules. The number of reloads and the delay between them can be set.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Resuming after err_deadlock: The deadlock retry mechanism has the following properties: if a deadlock occurs within a transaction, the transaction will the environment parameters are restored (stack data, variables) and an attempt is made to execute the transaction again (see also the Test Deadlock retry) If the environment variable CX_DEADLOCKRETRY= is set, the output of the deadlock mechanism is stored in the specified file. ### Instruction: What is the name of this module? ### Response: The module being described is English:Resuming after err_deadlock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:Resuming after err_deadlock used for? ### Response: The module English:Resuming after err_deadlock can be described as follows: The deadlock retry mechanism has the following properties: if a deadlock occurs within a transaction, the transaction will the environment parameters are restored (stack data, variables) and an attempt is made to execute the transaction again (see also the Test Deadlock retry) If the environment variable CX_DEADLOCKRETRY= is set, the output of the deadlock mechanism is stored in the specified file.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Rounding: This test checks the methods 'Round' and 'RoundAutomatically'. For the first one you have to enter arbitrary values into the fields 'Value' (if possible with decimal places) and into the fields 'Precision' the desired number of decimal places. A click on the button 'Round (Normal)' should now show the results. For Round Automatically you proceed in the same way, except that you can leave the 'Precision' fields empty, because RoundAutomatically itself recognizes from the type or unit how many decimal places are necessary. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Rounding."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Rounding? ### Response: The purpose of the module Rounding is as follows: This test checks the methods 'Round' and 'RoundAutomatically'. For the first one you have to enter arbitrary values into the fields 'Value' (if possible with decimal places) and into the fields 'Precision' the desired number of decimal places. A click on the button 'Round (Normal)' should now show the results. For Round Automatically you proceed in the same way, except that you can leave the 'Precision' fields empty, because RoundAutomatically itself recognizes from the type or unit how many decimal places are necessary.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Quality assurance - Access rights: The test opens five windows. The title of each window gives an indication of the permissions set when FillWindow is called. With \"Read only\", for example, it should not be possible to enter text in the fields. With \"No access\" the fields should not be visible at all. In the first window, different authorisations can also be set manually. The window contains the following buttons for this purpose: \"readwrite\": Allow reading and writing of objects. \" readonly: Allow reading of objects only. \"no access\": Do not allow any access to objects. \"no access to name\": Generally allow reading and writing of objects, but block access to data field 'name'. \"no access to age (obj)\": Generally allow reading and writing of objects, but block access to data field 'Age()'. But only for the CX_PERSON object used in the test (test for CX_OBJECT_SECURITY). \"save\": Saves the object in its current state, provided the permissions allow it. \"close all\": Closes the five windows. ### Instruction: What is the name of the module being described? ### Response: This module is named Quality assurance - Access rights."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Quality assurance - Access rights? ### Response: The module Quality assurance - Access rights serves the purpose of the following: The test opens five windows. The title of each window gives an indication of the permissions set when FillWindow is called. With \"Read only\", for example, it should not be possible to enter text in the fields. With \"No access\" the fields should not be visible at all. In the first window, different authorisations can also be set manually. The window contains the following buttons for this purpose: \"readwrite\": Allow reading and writing of objects. \" readonly: Allow reading of objects only. \"no access\": Do not allow any access to objects. \"no access to name\": Generally allow reading and writing of objects, but block access to data field 'name'. \"no access to age (obj)\": Generally allow reading and writing of objects, but block access to data field 'Age()'. But only for the CX_PERSON object used in the test (test for CX_OBJECT_SECURITY). \"save\": Saves the object in its current state, provided the permissions allow it. \"close all\": Closes the five windows.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Location-specific data: This module is not a test in the actual sense, but it only shows whether the locales settings are correctly created and/or read in. You can browse through the list of countries, display objects for each country and various country-specific information such as public holidays, telephone area codes, country codes etc. ### Instruction: How is this module called? ### Response: This module is named Location-specific data."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Location-specific data used for? ### Response: The purpose of the module Location-specific data is as follows: This module is not a test in the actual sense, but it only shows whether the locales settings are correctly created and/or read in. You can browse through the list of countries, display objects for each country and various country-specific information such as public holidays, telephone area codes, country codes etc.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Integer, Numeric, Date, String, FString: In this test the simple input widgets are tested. ### Instruction: What is the name of the module being described? ### Response: The name of this module is English:Integer, Numeric, Date, String, FString."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module English:Integer, Numeric, Date, String, FString serve? ### Response: The purpose of the module English:Integer, Numeric, Date, String, FString is as follows: In this test the simple input widgets are tested.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Date periods object (CX_SPAN_DATE): This test checks functions for date periods. Any date can be entered in the middle field and then assigned to the upper or lower date period using the corresponding buttons. This way you can create 2 different periods. At the bottom you can see the results, e.g. if the two periods overlap or even include each other completely. ### Instruction: Tell me the name of this module. ### Response: The module being described is Date periods object (CX_SPAN_DATE)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Date periods object (CX_SPAN_DATE) serve? ### Response: The module Date periods object (CX_SPAN_DATE) can be described as follows: This test checks functions for date periods. Any date can be entered in the middle field and then assigned to the upper or lower date period using the corresponding buttons. This way you can create 2 different periods. At the bottom you can see the results, e.g. if the two periods overlap or even include each other completely.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Time span object (CX_SPAN_TIME): The time period works in the same way as the module for the date period (see above), except that you have to enter times here. ### Instruction: How is this module called? ### Response: This module is called Time span object (CX_SPAN_TIME)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Time span object (CX_SPAN_TIME) serve? ### Response: The purpose of the module Time span object (CX_SPAN_TIME) is as follows: The time period works in the same way as the module for the date period (see above), except that you have to enter times here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:SystemObject: The test for SystemObject tests all functions in SystemObject. After starting the module, a long log window is displayed. The normal test can be initiated with the menu item 'Start'. The results of the individual tests appear in the log window. Via the menu item 'Advanced' another window can be opened, which contains all tests that require user interaction. In the middle of the window you can see various combo boxes that have been filled with special functions. The buttons for the remaining tests are explained on the mask. ### Instruction: Which module is being described? ### Response: The name of this module is English:SystemObject."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module English:SystemObject? ### Response: The module English:SystemObject is used for the following: The test for SystemObject tests all functions in SystemObject. After starting the module, a long log window is displayed. The normal test can be initiated with the menu item 'Start'. The results of the individual tests appear in the log window. Via the menu item 'Advanced' another window can be opened, which contains all tests that require user interaction. In the middle of the window you can see various combo boxes that have been filled with special functions. The buttons for the remaining tests are explained on the mask.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Phone Manager Test: For testing: In the upper part all available devices are displayed. Make a call: Select the desired device, enter the phone number (as you want it dialled) and press Return or the button. Waiting for calls: Select the desired device and press the \"Start Watch\" button. Incoming calls are signalled by a message box. Perform actions with the call: Select the call from the list below. Using the buttons to the right of it, various actions can now be performed, depending on the status. A call that changes to the status PC_INVALID is automatically deleted from the list in this test module. Listening on one line for new calls and dialling on the same device is possible if the device supports it. To simulate hardware, an emulator can also be used, which can be found in \\\\admin3\\d\\arch\\dev\\tapi\\ms\\esp32.zip (Installation: The .TSP after c:\\windows\\system and register it in the Control Panel/telephone. A restart is not necessary. Before starting the ClassiX application the emulator has to be start, otherwise it is not available as a device). ### Instruction: Which module is being described? ### Response: The name of this module is English:Phone Manager Test."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Phone Manager Test for me. ### Response: The module English:Phone Manager Test serves the purpose of the following: For testing: In the upper part all available devices are displayed. Make a call: Select the desired device, enter the phone number (as you want it dialled) and press Return or the button. Waiting for calls: Select the desired device and press the \"Start Watch\" button. Incoming calls are signalled by a message box. Perform actions with the call: Select the call from the list below. Using the buttons to the right of it, various actions can now be performed, depending on the status. A call that changes to the status PC_INVALID is automatically deleted from the list in this test module. Listening on one line for new calls and dialling on the same device is possible if the device supports it. To simulate hardware, an emulator can also be used, which can be found in \\\\admin3\\d\\arch\\dev\\tapi\\ms\\esp32.zip (Installation: The .TSP after c:\\windows\\system and register it in the Control Panel/telephone. A restart is not necessary. Before starting the ClassiX application the emulator has to be start, otherwise it is not available as a device).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Comparison of dates: The time period works in the same way as the module for the date period (see above), except that you have to enter times here. ### Instruction: What is the name of this module? ### Response: This module is called Comparison of dates."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Comparison of dates used for? ### Response: The module Comparison of dates serves the purpose of the following: The time period works in the same way as the module for the date period (see above), except that you have to enter times here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Event object (CX_TIME): This test checks functions at a time. In the window at the top you can enter a time and after pressing 'Enter' the corresponding functions are displayed. In the fields 'SetHour', 'SetMinute', 'SetSecond' and 'SetHundredthSecond' the corresponding values can also be changed directly. ### Instruction: What is the name of this module? ### Response: The name of this module is Event object (CX_TIME)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Event object (CX_TIME). ### Response: The purpose of the module Event object (CX_TIME) is the following: This test checks functions at a time. In the window at the top you can enter a time and after pressing 'Enter' the corresponding functions are displayed. In the fields 'SetHour', 'SetMinute', 'SetSecond' and 'SetHundredthSecond' the corresponding values can also be changed directly.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Time Trigger (CX_TIMED_TRIGGER): For various time and date forms, the transmission of messages of a CX_TIMED_TRIGGER object can be test/checked. ### Instruction: What is the name of the module being described? ### Response: This module is called Time Trigger (CX_TIMED_TRIGGER)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Time Trigger (CX_TIMED_TRIGGER). ### Response: The purpose of the module Time Trigger (CX_TIMED_TRIGGER) is the following: For various time and date forms, the transmission of messages of a CX_TIMED_TRIGGER object can be test/checked.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conversions between temperatures: Not yet supported at present. Test of the conversion of a temperature into the different heat units. ### Instruction: Name this module. ### Response: The module being described is Conversions between temperatures."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Conversions between temperatures? ### Response: The module Conversions between temperatures can be described as follows: Not yet supported at present. Test of the conversion of a temperature into the different heat units.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional predecessor and successor documents: For class CX_TRANSACTION, the functions for determining preceding or subsequent documents are tested. ### Instruction: How is this module called? ### Response: This module is Conditional predecessor and successor documents."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Conditional predecessor and successor documents for me. ### Response: The module Conditional predecessor and successor documents is used for the following: For class CX_TRANSACTION, the functions for determining preceding or subsequent documents are tested.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Units Arithmetic: Automatic test of arithmetic units. ### Instruction: What is the name of the module being described? ### Response: This module is called Units Arithmetic."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Units Arithmetic. ### Response: The purpose of the module Units Arithmetic is as follows: Automatic test of arithmetic units.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Unittest C (plusplus): The Unittest C++ module provides a test environment that enables and monitors the execution of tests written in C++ in the ClassiX® DLLs and then generates a protocol. This module and further documentation about the tests is intended for use in the ClassiX basic development. ### Instruction: Which module is being described? ### Response: The module being described is English:Unittest C (plusplus)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module English:Unittest C (plusplus) serve? ### Response: The module English:Unittest C (plusplus) can be described as follows: The Unittest C++ module provides a test environment that enables and monitors the execution of tests written in C++ in the ClassiX® DLLs and then generates a protocol. This module and further documentation about the tests is intended for use in the ClassiX basic development.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Unittest InstantView: The Unittest InstantView® module provides a test environment that allows InstantView® tests to be carried out, monitored and a report generated. Among other things, this test environment can be called up manually from the QM project. The Unittest InstantView test modules created according to specific patterns are executed. ### Instruction: Tell me the name of this module. ### Response: The module being described is English:Unittest InstantView."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module English:Unittest InstantView used for? ### Response: The purpose of the module English:Unittest InstantView is as follows: The Unittest InstantView® module provides a test environment that allows InstantView® tests to be carried out, monitored and a report generated. Among other things, this test environment can be called up manually from the QM project. The Unittest InstantView test modules created according to specific patterns are executed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Operations with vectors: During this test, all functions that affect vectors are checked for correct operation. With the buttons the functions 'Revert', 'Join', 'Delete', 'Insert' and 'GetVector' can be checked. The result of each function is displayed at the bottom of the window. ### Instruction: How is this module called? ### Response: This module is named Operations with vectors."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Operations with vectors used for? ### Response: The module Operations with vectors serves the purpose of the following: During this test, all functions that affect vectors are checked for correct operation. With the buttons the functions 'Revert', 'Join', 'Delete', 'Insert' and 'GetVector' can be checked. The result of each function is displayed at the bottom of the window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Wrapper object (CX_OVERWRITING_REF): The test routine tries to detect errors when accessing the data of a \"wrapped\" object, for this purpose the found and expected value are compared. With menu 'Auto-Test' the following cases are tested: combination slot and specifier.slot (for the same slot) occurs in the same object Multiple wrapped objects Abstraction of certain functions like Unit() at the end of an access expression Splitting off a subscript [[n] at the end of an access expression Wrapper together with CX_SLOT_ATTRIBUTE::ValueMA() Forced overwrite with Put(..., OVERWRITE) Menu 'Overwrite Bits' 'wraps' an object 32 times and overwrites a different bit in two slots in each step. The option 'Show Overwriting Expressions' displays a window with the overwritten expressions. These tests are based on the following objects: {img type=\"fileId\" fileId=\"468\" thumb=\"box\" width=\"100%\"} container, wrapper, wrapped2 and wcontainer are InstantView® variables of the test module. ### Instruction: What is the name of this module? ### Response: This module is Wrapper object (CX_OVERWRITING_REF)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Wrapper object (CX_OVERWRITING_REF) used for? ### Response: The module Wrapper object (CX_OVERWRITING_REF) serves the purpose of the following: The test routine tries to detect errors when accessing the data of a \"wrapped\" object, for this purpose the found and expected value are compared. With menu 'Auto-Test' the following cases are tested: combination slot and specifier.slot (for the same slot) occurs in the same object Multiple wrapped objects Abstraction of certain functions like Unit() at the end of an access expression Splitting off a subscript [[n] at the end of an access expression Wrapper together with CX_SLOT_ATTRIBUTE::ValueMA() Forced overwrite with Put(..., OVERWRITE) Menu 'Overwrite Bits' 'wraps' an object 32 times and overwrites a different bit in two slots in each step. The option 'Show Overwriting Expressions' displays a window with the overwritten expressions. These tests are based on the following objects: {img type=\"fileId\" fileId=\"468\" thumb=\"box\" width=\"100%\"} container, wrapper, wrapped2 and wcontainer are InstantView® variables of the test module."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Test framework: This app (hereinafter also referred to as QM app ) is part of the CyberEnterprise quality management. Using Excel files with a specific structure, manual entries by users can be simulated and the results of these entries can be checked automatically. (In the classic evaluation system test framework Excel files are available in the directory ..\\Projects\\TestFrameworks\\Data\\). The format of these Excel files is as follows: #Flags #Comment #ExecuteString #CommandString #Variable Test access expressions Flags (capitalisation also permitted) Flags Description rem; comments a line from break; leads to the termination of the processing sleep; following lines are not executed until the next \"wakeup;\" flag. This is an easy way to comment out lines in a test framework. wakeup; the following lines are executed again. load; other test frameworks can be included, for example to create parts However, it is not intended to link several evaluations to each other, as no evaluation files are written and no errors are logged when the flag \"load\" is set. goto:line number:condition goto statement: The syntax looks like this: goto:19:var 3 < The first part \"goto\" defines the GoTo statement. Then follows the line number to which the jump is to be made and the last part (e.g. var 3 <, i.e. the value of a previously defined variable var should be less than 3) defines the condition under which the jump label is approached. Only if this condition returns TRUE the GOTO instruction is executed to avoid endless loops. idle(waiting time); The processing of the test framework is paused by the waiting time in ms. The system is idle during this waiting time. This allows the behaviour of the system when waiting for user input to be simulated. Comment: Here you can enter descriptive information about the line. ExecuteString (called column 1 below): The string specified here is placed on the stack as a string. The specifications made here are only used for the purpose of being able to execute the TEST_... or EXEC_... Message in a target module to be executed by Execute. If any TEST_... or EXEC_... is missing message is missing, the entries in this column do not lead to a result. (Note: All AppsWarehouse Apps \"understand\" a TEST_... or EXEC_ message, which only allows the command \"Execute\" to be executed in the respective App). CommandString (named column 2 below): The string specified here is executed directly in the QM App per Execute. Any string specified in column 1 is processed accordingly as a string stack entry. (Examples are listed below) Variable (named column 3 below): With the message QM_ROW_EXECUTED, a stack entry that exists there can be sent back to the QM app using the ExecuteString and its processing in the target module. This stack entry is then saved in the variable specified in this column. Test access expressions: Access expressions can be specified starting from this column. The variables previously defined in the QM App serve as starting points for the access expressions. These access expressions are used to determine the values via the variables, which are then compared with the values stored in the Excel file in the lines. If these values do not match, an error message is displayed. syntax: Access printout Example: purchaseOrder supplier.uniqueID The test file must not contain any blank lines! Therefore, please make sure to always write REM; in the first column(#Flags) of the desired empty lines. Then it will work without the last line not being executed. A few hints for use and examples: Let's assume we want to create a requirement request and use it to create an order. This is how you proceed in the following rough steps: Create empty requirement coverage request Save requirements request via Save button Write part number in requisition item (which opens automatically when the header is saved) and send SELECT message to part number field Change quantity and save position via Save button Book header document Return variable of the requirement request item to our QM App Create order via usual message The following problems need to be solved: How do I send a variable back to the QM App? How do I send my requirement request variable from the QM app to another app via the test message, which only has one execute parameter? ...and the solutions: SendMsg(QM_ROW_EXECUTED) in column 1, SendMsg(TEST_PURCHASE_REQUISITION_ITEM) in column 2 and the target variable in which we want to hold this position in the QM App, i.e. purchaseRequisitionItem in column 3. The QM app receives this response message and always stores it in the same temporary variable. Then the object is transferred from the temporary variable to the desired variable. The following execution sequence leads to the result, if, for example, the requirement coverage request item is to be drawn into the order as a predecessor: Column 1: Widget(EditWin, predecessors) SendMsg(PURCHASE_REQUISITION_ITEM_SELECTED, DIRECT) Column 2: purchaseRequisitionItem Swap SendMsg(TEST_PURCHASE_ORDER_ITEM) The swap places the variable purchaseRequisitionItem behind the string to be executed, resulting in the following statement: purchaseRequisitionItem \"Widget(EditWin, predecessors) SendMsg(PURCHASE_REQUISITION_ITEM_SELECTED, DIRECT)\" SendMsg(TEST_PURCHASE_REQUISITION_ITEM) When the test message is triggered, there are therefore 2 parameters on the stack: our requisition request position and on the TOP the string to be executed in the target app. At least one blank file and one fully functioning \"example\" test file is checked in at each branch. You can find these test files in the directory: \\AppsWH\\\\\\data\\QS To use the BREAK; and the REM; instruction the following hionweis: This instruction always refers exactly to the beginning of the corresponding line: That means, just as you comment out the line with REM; you terminate with BREAK; also exactly BEFORE executing this line! The line containing the BREAK; is therefore no longer executed. Another tip: Window test messages If a procedure is to be executed via EXEC message, which contains access to widgets written without the leading EditWin, e.g. GetObject(, predecessors), a local test message can be created according to the following scheme: First part: test message (TEST_ORDER), second part window name: (EDIT_WIN) = TEST_ORDER_EDIT_WIN Another test message is defined in the app that receives the test message: Msg(TEST_ORDER_EDIT_WIN) Then ONLY in the action list of the window (here EditWin) this message is intercepted and only supplemented by an Execute: TEST_ORDER_EDIT_WIN: Execute Now you can call procedures directly from the window by Execute without having to add EditWin (the context) in all procedures, which would sometimes even be wrong (if the procedure is called from different windows!). However, the call of the message must then look a little different: Column 1: \"SaveObject\" SendMsg(TEST_ORDER_EDIT_WIN) Column 2: SendMsg(TEST_ORDER) The string to be executed in the window test message must be placed in inverted commas again, otherwise it would already be executed by the first execute (TEST_ORDER). With inverted commas, it is treated as a string and (without inverted commas) loaded onto the stack. Since the SendMsg(TEST_ORDER_EDIT_WIN) statement is not in the stack, this statement is executed and sends the previously loaded string as the next execution command to the window test message. Since not every app needs such a message, and this message should not trigger the app under any circumstances (otherwise there would probably be a lot of duplicate test executions, because customer derivations of these apps might still be created) and there should only be one defined interface to an app, this message should be added according to this scheme if necessary. Common errors that occur when creating a test file: LAZY_CREATOR: If an item of a document is held in a variable in the test file and this variable is used in a column to evaluate a slot or similar, the error message \"Object not yet created\" appears, although this item has already been linked to the header document. As the entire test process is carried out in one main transaction throughout the entire test suite, this LazyCreator is not converted into a persistent object. This must be done in the test file via the OBJECT Manager: position header document GetManager(OBJECT) Call(Instantiate) -> Variable. It is very important that the result of the instantiate is saved back into the variable of the position. Otherwise the old variable pointer still points to the LAZY_CREATOR. Example: orderItem order GetManager(OBJECT) Call(Instantiate) -> orderItem If orderItem is used in a column, this variable must be named differently as long as it still contains the LazyCreator. Because as long as it still points to the LazyCreator, attempts in columns such as orderItem::sales.pricePer will fail with an error message in the QM App. ALSO: Rename variable orderItem to orderItemTmp first and save it to the variable orderItem only after the Instantiate. Then also the column can be evaluated reasonably. Calling several test frameworks Call from the QM App: - Multiple selection of files - Select a folder to run all tests in it Call with a batch file: The exact path of the desired files and folders is stored in variables and assembled into a large string. Extract of a sample file: The spaces in the file names must be replaced with \"***\": SET STRING_1=%CX_QS_PATH%\\Demo\\Test file***Sample name1***-***Demo.xls (Test file Sample name1 - Demo.xls) SET STRING_2=%CX_QS_PATH%\\Demo\\Testdatei***Mustername2***-***Demo.xls SET STRING_3=%CX_OS_PATH%\\Demo\\validity The individual character strings are combined into one and are separated by \"###\": SET CX_ALL_TESTS=%STRING_1click=\"javascript:toggle_dynamic_var(\"###\");\" title=\"Click to edit dynamic variable: ###\">No value assignedSTRING_2Novalue assignedSTRING_3% The call of the file which starts the tests with the variable CX_ALL_TESTS as the transfer parameter: call %CX_ROOTDIR%\\projects\\Start_Testframework.bat %CX_ALL_TESTS% General information: The selected files and folders are assembled into a string and used as transfer parameters for the calling batch file. In this file, the character string is saved as the environment variable \"CX_TESTFRAMEWORKS\". A new CyberEnterprise instance is opened, which reads the character string from the environment variable to call the first test. This test is removed from the string and when it is finished, the batch file is called again, with the new string as the transfer parameter. Thus the test frameworks run one after the other in a separate CyberEnterprise instance. If errors occur, error files are generated, but without the usual request to change to the test directory. ### Instruction: How is this module called? ### Response: This module is named Test framework."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Test framework serve? ### Response: The module Test framework is used for the following: This app (hereinafter also referred to as QM app ) is part of the CyberEnterprise quality management. Using Excel files with a specific structure, manual entries by users can be simulated and the results of these entries can be checked automatically. (In the classic evaluation system test framework Excel files are available in the directory ..\\Projects\\TestFrameworks\\Data\\). The format of these Excel files is as follows: #Flags #Comment #ExecuteString #CommandString #Variable Test access expressions Flags (capitalisation also permitted) Flags Description rem; comments a line from break; leads to the termination of the processing sleep; following lines are not executed until the next \"wakeup;\" flag. This is an easy way to comment out lines in a test framework. wakeup; the following lines are executed again. load; other test frameworks can be included, for example to create parts However, it is not intended to link several evaluations to each other, as no evaluation files are written and no errors are logged when the flag \"load\" is set. goto:line number:condition goto statement: The syntax looks like this: goto:19:var 3 < The first part \"goto\" defines the GoTo statement. Then follows the line number to which the jump is to be made and the last part (e.g. var 3 <, i.e. the value of a previously defined variable var should be less than 3) defines the condition under which the jump label is approached. Only if this condition returns TRUE the GOTO instruction is executed to avoid endless loops. idle(waiting time); The processing of the test framework is paused by the waiting time in ms. The system is idle during this waiting time. This allows the behaviour of the system when waiting for user input to be simulated. Comment: Here you can enter descriptive information about the line. ExecuteString (called column 1 below): The string specified here is placed on the stack as a string. The specifications made here are only used for the purpose of being able to execute the TEST_... or EXEC_... Message in a target module to be executed by Execute. If any TEST_... or EXEC_... is missing message is missing, the entries in this column do not lead to a result. (Note: All AppsWarehouse Apps \"understand\" a TEST_... or EXEC_ message, which only allows the command \"Execute\" to be executed in the respective App). CommandString (named column 2 below): The string specified here is executed directly in the QM App per Execute. Any string specified in column 1 is processed accordingly as a string stack entry. (Examples are listed below) Variable (named column 3 below): With the message QM_ROW_EXECUTED, a stack entry that exists there can be sent back to the QM app using the ExecuteString and its processing in the target module. This stack entry is then saved in the variable specified in this column. Test access expressions: Access expressions can be specified starting from this column. The variables previously defined in the QM App serve as starting points for the access expressions. These access expressions are used to determine the values via the variables, which are then compared with the values stored in the Excel file in the lines. If these values do not match, an error message is displayed. syntax: Access printout Example: purchaseOrder supplier.uniqueID The test file must not contain any blank lines! Therefore, please make sure to always write REM; in the first column(#Flags) of the desired empty lines. Then it will work without the last line not being executed. A few hints for use and examples: Let's assume we want to create a requirement request and use it to create an order. This is how you proceed in the following rough steps: Create empty requirement coverage request Save requirements request via Save button Write part number in requisition item (which opens automatically when the header is saved) and send SELECT message to part number field Change quantity and save position via Save button Book header document Return variable of the requirement request item to our QM App Create order via usual message The following problems need to be solved: How do I send a variable back to the QM App? How do I send my requirement request variable from the QM app to another app via the test message, which only has one execute parameter? ...and the solutions: SendMsg(QM_ROW_EXECUTED) in column 1, SendMsg(TEST_PURCHASE_REQUISITION_ITEM) in column 2 and the target variable in which we want to hold this position in the QM App, i.e. purchaseRequisitionItem in column 3. The QM app receives this response message and always stores it in the same temporary variable. Then the object is transferred from the temporary variable to the desired variable. The following execution sequence leads to the result, if, for example, the requirement coverage request item is to be drawn into the order as a predecessor: Column 1: Widget(EditWin, predecessors) SendMsg(PURCHASE_REQUISITION_ITEM_SELECTED, DIRECT) Column 2: purchaseRequisitionItem Swap SendMsg(TEST_PURCHASE_ORDER_ITEM) The swap places the variable purchaseRequisitionItem behind the string to be executed, resulting in the following statement: purchaseRequisitionItem \"Widget(EditWin, predecessors) SendMsg(PURCHASE_REQUISITION_ITEM_SELECTED, DIRECT)\" SendMsg(TEST_PURCHASE_REQUISITION_ITEM) When the test message is triggered, there are therefore 2 parameters on the stack: our requisition request position and on the TOP the string to be executed in the target app. At least one blank file and one fully functioning \"example\" test file is checked in at each branch. You can find these test files in the directory: \\AppsWH\\\\\\data\\QS To use the BREAK; and the REM; instruction the following hionweis: This instruction always refers exactly to the beginning of the corresponding line: That means, just as you comment out the line with REM; you terminate with BREAK; also exactly BEFORE executing this line! The line containing the BREAK; is therefore no longer executed. Another tip: Window test messages If a procedure is to be executed via EXEC message, which contains access to widgets written without the leading EditWin, e.g. GetObject(, predecessors), a local test message can be created according to the following scheme: First part: test message (TEST_ORDER), second part window name: (EDIT_WIN) = TEST_ORDER_EDIT_WIN Another test message is defined in the app that receives the test message: Msg(TEST_ORDER_EDIT_WIN) Then ONLY in the action list of the window (here EditWin) this message is intercepted and only supplemented by an Execute: TEST_ORDER_EDIT_WIN: Execute Now you can call procedures directly from the window by Execute without having to add EditWin (the context) in all procedures, which would sometimes even be wrong (if the procedure is called from different windows!). However, the call of the message must then look a little different: Column 1: \"SaveObject\" SendMsg(TEST_ORDER_EDIT_WIN) Column 2: SendMsg(TEST_ORDER) The string to be executed in the window test message must be placed in inverted commas again, otherwise it would already be executed by the first execute (TEST_ORDER). With inverted commas, it is treated as a string and (without inverted commas) loaded onto the stack. Since the SendMsg(TEST_ORDER_EDIT_WIN) statement is not in the stack, this statement is executed and sends the previously loaded string as the next execution command to the window test message. Since not every app needs such a message, and this message should not trigger the app under any circumstances (otherwise there would probably be a lot of duplicate test executions, because customer derivations of these apps might still be created) and there should only be one defined interface to an app, this message should be added according to this scheme if necessary. Common errors that occur when creating a test file: LAZY_CREATOR: If an item of a document is held in a variable in the test file and this variable is used in a column to evaluate a slot or similar, the error message \"Object not yet created\" appears, although this item has already been linked to the header document. As the entire test process is carried out in one main transaction throughout the entire test suite, this LazyCreator is not converted into a persistent object. This must be done in the test file via the OBJECT Manager: position header document GetManager(OBJECT) Call(Instantiate) -> Variable. It is very important that the result of the instantiate is saved back into the variable of the position. Otherwise the old variable pointer still points to the LAZY_CREATOR. Example: orderItem order GetManager(OBJECT) Call(Instantiate) -> orderItem If orderItem is used in a column, this variable must be named differently as long as it still contains the LazyCreator. Because as long as it still points to the LazyCreator, attempts in columns such as orderItem::sales.pricePer will fail with an error message in the QM App. ALSO: Rename variable orderItem to orderItemTmp first and save it to the variable orderItem only after the Instantiate. Then also the column can be evaluated reasonably. Calling several test frameworks Call from the QM App: - Multiple selection of files - Select a folder to run all tests in it Call with a batch file: The exact path of the desired files and folders is stored in variables and assembled into a large string. Extract of a sample file: The spaces in the file names must be replaced with \"***\": SET STRING_1=%CX_QS_PATH%\\Demo\\Test file***Sample name1***-***Demo.xls (Test file Sample name1 - Demo.xls) SET STRING_2=%CX_QS_PATH%\\Demo\\Testdatei***Mustername2***-***Demo.xls SET STRING_3=%CX_OS_PATH%\\Demo\\validity The individual character strings are combined into one and are separated by \"###\": SET CX_ALL_TESTS=%STRING_1click=\"javascript:toggle_dynamic_var(\"###\");\" title=\"Click to edit dynamic variable: ###\">No value assignedSTRING_2Novalue assignedSTRING_3% The call of the file which starts the tests with the variable CX_ALL_TESTS as the transfer parameter: call %CX_ROOTDIR%\\projects\\Start_Testframework.bat %CX_ALL_TESTS% General information: The selected files and folders are assembled into a string and used as transfer parameters for the calling batch file. In this file, the character string is saved as the environment variable \"CX_TESTFRAMEWORKS\". A new CyberEnterprise instance is opened, which reads the character string from the environment variable to call the first test. This test is removed from the string and when it is finished, the batch file is called again, with the new string as the transfer parameter. Thus the test frameworks run one after the other in a separate CyberEnterprise instance. If errors occur, error files are generated, but without the usual request to change to the test directory.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Quality assurance: Recording of the quality assurance documents. All goods receipt items which are subject to QA at the time of posting must be checked by the quality assurance department before they can be put into storage or made available for predecessors. QA required means that they had the QA mark on the part or on one of the requisition, purchase order or goods receipt documents at the specified time. The indicator is frozen during posting so that a subsequent change cannot trigger any errors in further processing. On the delivery schedule of an order for a QA part, the quantity still to be inspected is saved when the goods receipt is posted (inAssurance.quantity). This quantity is reduced by the inspected quantity when a subsequent QA document is posted. The goods receipt document itself therefore takes over the posting of the QA and goods receipt quantities. The storage account also shows this quantity still to be checked. ### Instruction: What is the name of this module? ### Response: The name of this module is Quality assurance."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Quality assurance used for? ### Response: The module Quality assurance can be described as follows: Recording of the quality assurance documents. All goods receipt items which are subject to QA at the time of posting must be checked by the quality assurance department before they can be put into storage or made available for predecessors. QA required means that they had the QA mark on the part or on one of the requisition, purchase order or goods receipt documents at the specified time. The indicator is frozen during posting so that a subsequent change cannot trigger any errors in further processing. On the delivery schedule of an order for a QA part, the quantity still to be inspected is saved when the goods receipt is posted (inAssurance.quantity). This quantity is reduced by the inspected quantity when a subsequent QA document is posted. The goods receipt document itself therefore takes over the posting of the QA and goods receipt quantities. The storage account also shows this quantity still to be checked.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Database query: This module is used to search for information. On the one hand, this can be done using the search terms categorised by object type, and on the other hand using general and more technical query functions. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Database query."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Database query for me. ### Response: The module Database query can be described as follows: This module is used to search for information. On the one hand, this can be done using the search terms categorised by object type, and on the other hand using general and more technical query functions.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Enquiry about characteristics: You can search objects by their attributes (e.g. all parts that are black). ### Instruction: Name this module. ### Response: The name of this module is Enquiry about characteristics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Enquiry about characteristics serve? ### Response: The module Enquiry about characteristics can be described as follows: You can search objects by their attributes (e.g. all parts that are black).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Data query assistant: The Data Query Wizard offers the possibility to quickly display data from the database. The basis for this is provided by data connectors, which also define the possible data fields for querying. A query can be saved permanently as a report. The Data Query Wizard guides you through the steps to create a query, which are executed as tabs in the wizard, only the first of which is mandatory: Select data connector Select columns Select population Select filtering Various examples of how to create a query are presented in a tutorial. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Data query assistant."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Data query assistant serve? ### Response: The purpose of the module Data query assistant is the following: The Data Query Wizard offers the possibility to quickly display data from the database. The basis for this is provided by data connectors, which also define the possible data fields for querying. A query can be saved permanently as a report. The Data Query Wizard guides you through the steps to create a query, which are executed as tabs in the wizard, only the first of which is mandatory: Select data connector Select columns Select population Select filtering Various examples of how to create a query are presented in a tutorial.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Goods receipt item: Items of the goods receipt slips. ### Instruction: How is this module called? ### Response: This module is named Goods receipt item."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Goods receipt item. ### Response: The module Goods receipt item serves the purpose of the following: Items of the goods receipt slips.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of GR documents in a business process status: The module can be called as a selection module or as a provision module: Selection window for the different states of the documents from the goods receipt business process (these are goods receipt items, quality assurance items and direct delivery items), see e.g. goods receipt from goods receipt - selection of goods receipt/quality assurance items with the status \"goods to be put away\". Provision module for incoming goods items. ### Instruction: How is this module called? ### Response: This module is called GR documents in a business process status."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module GR documents in a business process status serve? ### Response: The module GR documents in a business process status is used for the following: The module can be called as a selection module or as a provision module: Selection window for the different states of the documents from the goods receipt business process (these are goods receipt items, quality assurance items and direct delivery items), see e.g. goods receipt from goods receipt - selection of goods receipt/quality assurance items with the status \"goods to be put away\". Provision module for incoming goods items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Goods receipt: This module is used to record goods receipts and assign them to orders. The delivered goods can be recorded in the goods receipt. If the order is assigned, the delivered quantity is also noted on the order items. Instructions for printing goods receipts can be found here. ### Instruction: Which module is being described? ### Response: The name of this module is Goods receipt."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Goods receipt used for? ### Response: The module Goods receipt serves the purpose of the following: This module is used to record goods receipts and assign them to orders. The delivered goods can be recorded in the goods receipt. If the order is assigned, the delivered quantity is also noted on the order items. Instructions for printing goods receipts can be found here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Register storage aids: Simple recording of storage aids with a barcode scanner. ### Instruction: How is this module called? ### Response: The name of this module is Register storage aids."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Register storage aids for me. ### Response: The module Register storage aids can be described as follows: Simple recording of storage aids with a barcode scanner.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of ClassiX® network users: This module is used for communication with other ClassiX® users in the network. For this purpose, either messages can be sent or commands can be executed directly in the remote application. ### Instruction: Name this module. ### Response: The name of this module is ClassiX® network users."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module ClassiX® network users? ### Response: The module ClassiX® network users serves the purpose of the following: This module is used for communication with other ClassiX® users in the network. For this purpose, either messages can be sent or commands can be executed directly in the remote application.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of REP classes (entities): A root entry point (REP) is an entry point to the database marked with a name. Any object can be assigned to this entry point, usually list objects (collections) are made accessible via REPs. The basic entities of the CyberEnterprise® enterprise model, e.g. customers, parts, orders, invoices, etc., are kept in lists, each of which is assigned to an REP (defined in classix.odb ). Due to the navigation possibilities in the database, it is sufficient to search one or more objects (queries) once via such entry points, from which all further information can be read out of the database by navigation only. ### Instruction: What is the name of the module being described? ### Response: The module being described is REP classes (entities)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module REP classes (entities) serve? ### Response: The module REP classes (entities) is used for the following: A root entry point (REP) is an entry point to the database marked with a name. Any object can be assigned to this entry point, usually list objects (collections) are made accessible via REPs. The basic entities of the CyberEnterprise® enterprise model, e.g. customers, parts, orders, invoices, etc., are kept in lists, each of which is assigned to an REP (defined in classix.odb ). Due to the navigation possibilities in the database, it is sufficient to search one or more objects (queries) once via such entry points, from which all further information can be read out of the database by navigation only.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Reports (issue): From this window, you can print all reports belonging to a list or copy the contents of the list to the clipboard. New reports can also be created from this module. ### Instruction: What is the name of this module? ### Response: This module is named Reports (issue)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Reports (issue) used for? ### Response: The purpose of the module Reports (issue) is as follows: From this window, you can print all reports belonging to a list or copy the contents of the list to the clipboard. New reports can also be created from this module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Technical enquiry: Besides digital circulars (= notification) and work orders (= processing), enquiries (= planning) are the third pillar for the execution of tasks. Requests can be made by external partners (customers, suppliers, etc.) or internal partners (employees) and assigned to an internal or external contact person. Enquiries can refer to an industrial plant, a cost object, a sales order or a cost centre. Requests can be nested as deeply as desired, i.e. they can be grouped into topics or request nodes, which are themselves assigned to higher-level topics or request nodes. A request is described as a text (by means of short and long text), any documents can be assigned (associated) to it. If an enquiry is to be processed, a work order, service call, quotation or order can be created from the enquiry and hourly records can be made with reference to the enquiry. ### Instruction: What is the name of the module being described? ### Response: This module is named Technical enquiry."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Technical enquiry for me. ### Response: The module Technical enquiry can be described as follows: Besides digital circulars (= notification) and work orders (= processing), enquiries (= planning) are the third pillar for the execution of tasks. Requests can be made by external partners (customers, suppliers, etc.) or internal partners (employees) and assigned to an internal or external contact person. Enquiries can refer to an industrial plant, a cost object, a sales order or a cost centre. Requests can be nested as deeply as desired, i.e. they can be grouped into topics or request nodes, which are themselves assigned to higher-level topics or request nodes. A request is described as a text (by means of short and long text), any documents can be assigned (associated) to it. If an enquiry is to be processed, a work order, service call, quotation or order can be created from the enquiry and hourly records can be made with reference to the enquiry.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Exploded (production) parts list: This module is used to process order-specific production parts lists. These are the bills of materials which are generated by the system by exploding master bills of materials, taking into account the characteristics and their values specified from a customer order, warehouse order or advance requirement. The term \"explosion\" refers to the selection of entries from, for example, variant parts list items or the calculation of quantities and/or characteristic values. As a special feature it should be noted that in the so-called tree view of the parts list, the calculated total quantity is displayed for each parts list entry, although only individual quantities are entered. If you change a quantity on any level in the parts list, all quantities on the levels below are automatically updated, i.e. multiplied out and the required total quantities are displayed. Normally, ClassiX® assumes that at least a \"rough\" variant bill of material is defined for each part in the system. This avoids having to define and enter a separate master bill of material for each special case in advance. Within the scope of technical processing and design, this order-specific exploded production bill of materials is then adapted or designed more precisely with regard to parts, characteristic values and quantities. The changes are then only valid for the respective order item. To quickly create new parts lists, it is possible to drag a part from the parts master into the production parts list structure using the mouse. This way only the quantity needs to be adjusted and if necessary the new item needs to be exploded (if it is an assembly - red gear symbol!). In principle, however, it is also possible to completely redefine the order-specific production parts list. Note: If, for example, within an order-specific production bill of materials - which was exploded or generated from a \"standard\" bill of materials - somewhere on a lower structural level, one part is exchanged for another part, then this production bill of materials no longer \"matches\" the original \"standard\" bill of materials. Basically, this is then also a completely new assembly, in general terms, all higher-level parts have been redefined as a result - although they still have their original part number in this production bill of materials. This procedure should therefore only be used in order to be able to quickly and pragmatically comply with any customer request for (simple) \"exotic\" parts (e.g. exchanging the screws for other screw heads). As the production parts lists are retained in the system, it is always possible to trace what has been installed where: However, the order itself must always be queried in the system. It is therefore recommended to make changes to production BOMs only for variant parts (the \"uniqueness\" of the BOM is anyway only ensured by the characteristic values defined in the order) and possibly to mark a characteristic of such parts with a version. Attention: Due to changes in the production bill of materials, it can happen that the routing of the parent part no longer matches the current production bill of materials. In order to be able to find out these items, there is an item\"Display number of entries (production bill of material/master bill of material)\" in the view options in the menu \"Edit\". If this option is set, information is displayed after each line in the production parts list tree: (x/x). The front x represents the number of parts list entries of the exploded production parts list below this entry. The back x represents the number of parts list entries of the master parts list of this entry. In this way, rough changes to the exploded production parts lists compared to the master parts lists can be detected. ### Instruction: Which module is being described? ### Response: The module being described is Exploded (production) parts list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Exploded (production) parts list serve? ### Response: The module Exploded (production) parts list can be described as follows: This module is used to process order-specific production parts lists. These are the bills of materials which are generated by the system by exploding master bills of materials, taking into account the characteristics and their values specified from a customer order, warehouse order or advance requirement. The term \"explosion\" refers to the selection of entries from, for example, variant parts list items or the calculation of quantities and/or characteristic values. As a special feature it should be noted that in the so-called tree view of the parts list, the calculated total quantity is displayed for each parts list entry, although only individual quantities are entered. If you change a quantity on any level in the parts list, all quantities on the levels below are automatically updated, i.e. multiplied out and the required total quantities are displayed. Normally, ClassiX® assumes that at least a \"rough\" variant bill of material is defined for each part in the system. This avoids having to define and enter a separate master bill of material for each special case in advance. Within the scope of technical processing and design, this order-specific exploded production bill of materials is then adapted or designed more precisely with regard to parts, characteristic values and quantities. The changes are then only valid for the respective order item. To quickly create new parts lists, it is possible to drag a part from the parts master into the production parts list structure using the mouse. This way only the quantity needs to be adjusted and if necessary the new item needs to be exploded (if it is an assembly - red gear symbol!). In principle, however, it is also possible to completely redefine the order-specific production parts list. Note: If, for example, within an order-specific production bill of materials - which was exploded or generated from a \"standard\" bill of materials - somewhere on a lower structural level, one part is exchanged for another part, then this production bill of materials no longer \"matches\" the original \"standard\" bill of materials. Basically, this is then also a completely new assembly, in general terms, all higher-level parts have been redefined as a result - although they still have their original part number in this production bill of materials. This procedure should therefore only be used in order to be able to quickly and pragmatically comply with any customer request for (simple) \"exotic\" parts (e.g. exchanging the screws for other screw heads). As the production parts lists are retained in the system, it is always possible to trace what has been installed where: However, the order itself must always be queried in the system. It is therefore recommended to make changes to production BOMs only for variant parts (the \"uniqueness\" of the BOM is anyway only ensured by the characteristic values defined in the order) and possibly to mark a characteristic of such parts with a version. Attention: Due to changes in the production bill of materials, it can happen that the routing of the parent part no longer matches the current production bill of materials. In order to be able to find out these items, there is an item\"Display number of entries (production bill of material/master bill of material)\" in the view options in the menu \"Edit\". If this option is set, information is displayed after each line in the production parts list tree: (x/x). The front x represents the number of parts list entries of the exploded production parts list below this entry. The back x represents the number of parts list entries of the master parts list of this entry. In this way, rough changes to the exploded production parts lists compared to the master parts lists can be detected.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Resolved (production) work plan: This module is used to process order-specific production work plans. These are the routings which are generated by the system by exploding master routings taking into account the characteristics and their values specified from a production order. The term \"exploding\" refers to the search for entries from, for example, variant routing items or the calculation of times and/or characteristic values. Normally, ClassiX® assumes that at least a \"rough\" variant work plan is defined for each part in the system. This avoids having to define and enter a separate master routing for each special case in advance. Within the scope of detailed control and planning, this order-specific production routing is then adapted or designed more precisely in terms of workstations and times. The changes are then only valid for this production order item. Basically, however, one is also able to completely redefine the order-specific production work plan. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Resolved (production) work plan."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Resolved (production) work plan serve? ### Response: The module Resolved (production) work plan is used for the following: This module is used to process order-specific production work plans. These are the routings which are generated by the system by exploding master routings taking into account the characteristics and their values specified from a production order. The term \"exploding\" refers to the search for entries from, for example, variant routing items or the calculation of times and/or characteristic values. Normally, ClassiX® assumes that at least a \"rough\" variant work plan is defined for each part in the system. This avoids having to define and enter a separate master routing for each special case in advance. Within the scope of detailed control and planning, this order-specific production routing is then adapted or designed more precisely in terms of workstations and times. The changes are then only valid for this production order item. Basically, however, one is also able to completely redefine the order-specific production work plan.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Resource Plan: Resource plans are predefined combinations of resources (parts, workstations, machines, workgroups or work areas) that are used in project networks to speed up planning. Resources can be put together as a sequence of individual and/or variant items. Single item Variant position A line item contains a resource that is required in the specified (constant or calculated) quantity. A variant item is a conditional list of basic headings. When the resource plan is exploded (if it is used in a project network), the (single) item whose condition is first fulfilled is used. ### Instruction: Which module is being described? ### Response: This module is called Resource Plan."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Resource Plan. ### Response: The module Resource Plan can be described as follows: Resource plans are predefined combinations of resources (parts, workstations, machines, workgroups or work areas) that are used in project networks to speed up planning. Resources can be put together as a sequence of individual and/or variant items. Single item Variant position A line item contains a resource that is required in the specified (constant or calculated) quantity. A variant item is a conditional list of basic headings. When the resource plan is exploded (if it is used in a project network), the (single) item whose condition is first fulfilled is used.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Restriction table: The value range of an attribute can be limited via the Constraint data field of the attributes. However, there are also cases in which the values of two or more attributes are mutually exclusive or restricted. These constraints can be defined via the restriction table. A restriction table is a conditional table. The results of the conditions are the values \"allowed\", \"warning\" or \"not allowed\". A combination of attribute values is invalid according to the restriction table if it returns \"Not allowed\" as a result. Therefore it is also valid if it does not return a result. Warning should be used for values that are still tolerable but the user should have the final decision. As a rule, only the combinations and warnings that are not permitted are stored in the restrictions table. However, if the number of permitted combinations is smaller than the number of non-permitted combinations, the permitted combinations can also be entered. In this case, the conditional table must then end with a non-permitted condition, which always applies (an empty condition for example). Restriction tables can be created for variant parts (via the characteristics bar) or sales item roles. Restriction tables for variant parts describe impossible combinations of characteristics. Restriction tables for sales article roles describe attribute combinations in which a sales article may not be sold. Restriction tables for variant parts are checked at the following events: Testing the creation of a gozintograph (warning message) Creation of a gozintograph (abort message) Preparation of a preliminary costing Sales release of an order item Posting an order (red -> green traffic light) if the order item has not yet been delivered Restriction tables for sales article rolls are checked in the following events: Sales release of an order item Posting an order (red -> green traffic light) if the order item has not yet been delivered. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Restriction table."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Restriction table for me. ### Response: The module Restriction table can be described as follows: The value range of an attribute can be limited via the Constraint data field of the attributes. However, there are also cases in which the values of two or more attributes are mutually exclusive or restricted. These constraints can be defined via the restriction table. A restriction table is a conditional table. The results of the conditions are the values \"allowed\", \"warning\" or \"not allowed\". A combination of attribute values is invalid according to the restriction table if it returns \"Not allowed\" as a result. Therefore it is also valid if it does not return a result. Warning should be used for values that are still tolerable but the user should have the final decision. As a rule, only the combinations and warnings that are not permitted are stored in the restrictions table. However, if the number of permitted combinations is smaller than the number of non-permitted combinations, the permitted combinations can also be entered. In this case, the conditional table must then end with a non-permitted condition, which always applies (an empty condition for example). Restriction tables can be created for variant parts (via the characteristics bar) or sales item roles. Restriction tables for variant parts describe impossible combinations of characteristics. Restriction tables for sales article roles describe attribute combinations in which a sales article may not be sold. Restriction tables for variant parts are checked at the following events: Testing the creation of a gozintograph (warning message) Creation of a gozintograph (abort message) Preparation of a preliminary costing Sales release of an order item Posting an order (red -> green traffic light) if the order item has not yet been delivered Restriction tables for sales article rolls are checked in the following events: Sales release of an order item Posting an order (red -> green traffic light) if the order item has not yet been delivered."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Route planning: In this window, addresses of companies and persons can be collected to create a route plan. It is possible to insert persons, employees, contact persons (the employer is taken), companies and all roles (customers, suppliers etc.) by \"drag and drop\" and via the toolbar. Toolbar Symbol Description The selected company is deleted from the list Delete all items in the list Select contact person Select customer Select operator Select interested party Select suppliers Select manufacturer Select representative Select forwarder select publisher Select employees Fields Field Description Objectives Listing of addresses Buttons button Description Objectives - : Insert Call up partner selection window Remove Remove selected list entry Action - Close The window is closed. : Create route The selected addresses are transferred to the route planning of Google Map. The route planning is limited by Google Map to 25 addresses. The selected addresses must contain at least the postcode, town or street, if not, the system displays an error message. ### Instruction: Tell me the name of this module. ### Response: This module is named Route planning."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Route planning for me. ### Response: The module Route planning can be described as follows: In this window, addresses of companies and persons can be collected to create a route plan. It is possible to insert persons, employees, contact persons (the employer is taken), companies and all roles (customers, suppliers etc.) by \"drag and drop\" and via the toolbar. Toolbar Symbol Description The selected company is deleted from the list Delete all items in the list Select contact person Select customer Select operator Select interested party Select suppliers Select manufacturer Select representative Select forwarder select publisher Select employees Fields Field Description Objectives Listing of addresses Buttons button Description Objectives - : Insert Call up partner selection window Remove Remove selected list entry Action - Close The window is closed. : Create route The selected addresses are transferred to the route planning of Google Map. The route planning is limited by Google Map to 25 addresses. The selected addresses must contain at least the postcode, town or street, if not, the system displays an error message.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Calculation of sales costs: In order to find out how much a set of parts would cost the company, or how much a customer order would bring in, without having to create an order or a quotation, there is the sales cost calculation module.Here it is possible to drag and drop sales roles such as sales sets into a list and mark them out. Once the quantity has been defined and set, the objects can be exploded, i.e. the attached parts can be determined in the first step. For each of these, an entry is created in a further list, which contains the part or the exploded subpart.In the next step, depending on the main procurement type (logistics indicator of the part), either the production or the order role is used to create an entry in the next list.Up to this point, all lists can also be supplemented manually by simply adding parts or order/production rolls.In the last step, the parts from the procurement roles in the penultimate list are then used for costing. These are then used to calculate the final value that these parts will cost.The parts of the first list, on the other hand, result in the sales price, or in the final sum the sales value. These final values can be read at the bottom of the list of characteristics.It is possible to drop order items into the sales parts list. All material characteristic settings and the quantity of the order item are transferred to the sales cost calculation item. The order item is linked to the sales cost calculation item as an association if the processing mode is persistent. It can now be found via the document history of the order item. It is also possible to duplicate or copy individual entries by dropping them from the copy buffer or document history. If an item with a sales set is copied in this way, all the lower parts of the set are also copied. ### Instruction: What is the name of this module? ### Response: This module is Calculation of sales costs."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Calculation of sales costs used for? ### Response: The purpose of the module Calculation of sales costs is as follows: In order to find out how much a set of parts would cost the company, or how much a customer order would bring in, without having to create an order or a quotation, there is the sales cost calculation module.Here it is possible to drag and drop sales roles such as sales sets into a list and mark them out. Once the quantity has been defined and set, the objects can be exploded, i.e. the attached parts can be determined in the first step. For each of these, an entry is created in a further list, which contains the part or the exploded subpart.In the next step, depending on the main procurement type (logistics indicator of the part), either the production or the order role is used to create an entry in the next list.Up to this point, all lists can also be supplemented manually by simply adding parts or order/production rolls.In the last step, the parts from the procurement roles in the penultimate list are then used for costing. These are then used to calculate the final value that these parts will cost.The parts of the first list, on the other hand, result in the sales price, or in the final sum the sales value. These final values can be read at the bottom of the list of characteristics.It is possible to drop order items into the sales parts list. All material characteristic settings and the quantity of the order item are transferred to the sales cost calculation item. The order item is linked to the sales cost calculation item as an association if the processing mode is persistent. It can now be found via the document history of the order item. It is also possible to duplicate or copy individual entries by dropping them from the copy buffer or document history. If an item with a sales set is copied in this way, all the lower parts of the set are also copied.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Goods for sale: Basis for sales merchandise modules. ### Instruction: How is this module called? ### Response: The name of this module is Goods for sale."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Goods for sale serve? ### Response: The purpose of the module Goods for sale is the following: Basis for sales merchandise modules."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sub-assembly set: The assembly set is a special form of a sales set, except that it is manufactured together with all its order sub-items in a production order, also known as an order bill of materials - a production bill of materials defined in the order. The resulting bill of materials is thus composed of all order items created in the order below the assembly set. The production bill of materials is practically already defined at order item level. In the parts master, the assembly set part has a production role without a bill of materials, but with a routing that contains the assembly only the assembly work of the individual components. Subassembly sets can also be used as purchased parts with own provision. If such a subassembly set is available in the order, one practically determines at the order level through sub-items which goods are to be provided for the order and in which quantities. With the technical release the disposition of the parts to be provided is initiated and the requirement request for the assembly set part is created. Conditional individual parts in sets Conditional individual parts can be included in sets. Characteristics can be assigned to these conditional individual parts, which later appear in the offer or order items. If no characteristics were entered for these conditional individual parts, the quotation or order item automatically takes the characteristics of the selected individual part from the parts master. If conditional items are present in an assembly set, the assembly set in the order is not exploded automatically, but must be exploded using the \"Generate plant components\" button after the attributes on the assembly set order item have been set according to customer specifications (e.g. mains voltage etc.), because this may be the basis for the conditional sub-items of the assembly set. Attention: If, after resolving the conditional assembly set items, the attributes on the assembly set item are changed, the resolved subpart of a conditional item does not change automatically! In this case the subitems must all be deleted and the assembly set must be exploded again! Characteristics of the lower parts When sub-parts are added to sets, all characteristics of the selected part are copied from the part master into the characteristics of the new sub-position of the set. These can now be set as desired and are then valid for all quotation/order items created from this set, if the characteristics have not been explicitly defined and thus overwritten. Calculation and quantity calculation for main and sub-items Type 4 (main part plus integrated individual parts) is the default setting and cannot be changed. However, the system distinguishes a total of five types (Types) of how subitems are assembled with the main item (see the \"Type\" field displayed on the first tab \"Offer/Order item\" if a main item has been loaded); this defines the pricing rules and quantity calculation. Description: (see order item). ### Instruction: How is this module called? ### Response: The module being described is Sub-assembly set."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Sub-assembly set? ### Response: The module Sub-assembly set serves the purpose of the following: The assembly set is a special form of a sales set, except that it is manufactured together with all its order sub-items in a production order, also known as an order bill of materials - a production bill of materials defined in the order. The resulting bill of materials is thus composed of all order items created in the order below the assembly set. The production bill of materials is practically already defined at order item level. In the parts master, the assembly set part has a production role without a bill of materials, but with a routing that contains the assembly only the assembly work of the individual components. Subassembly sets can also be used as purchased parts with own provision. If such a subassembly set is available in the order, one practically determines at the order level through sub-items which goods are to be provided for the order and in which quantities. With the technical release the disposition of the parts to be provided is initiated and the requirement request for the assembly set part is created. Conditional individual parts in sets Conditional individual parts can be included in sets. Characteristics can be assigned to these conditional individual parts, which later appear in the offer or order items. If no characteristics were entered for these conditional individual parts, the quotation or order item automatically takes the characteristics of the selected individual part from the parts master. If conditional items are present in an assembly set, the assembly set in the order is not exploded automatically, but must be exploded using the \"Generate plant components\" button after the attributes on the assembly set order item have been set according to customer specifications (e.g. mains voltage etc.), because this may be the basis for the conditional sub-items of the assembly set. Attention: If, after resolving the conditional assembly set items, the attributes on the assembly set item are changed, the resolved subpart of a conditional item does not change automatically! In this case the subitems must all be deleted and the assembly set must be exploded again! Characteristics of the lower parts When sub-parts are added to sets, all characteristics of the selected part are copied from the part master into the characteristics of the new sub-position of the set. These can now be set as desired and are then valid for all quotation/order items created from this set, if the characteristics have not been explicitly defined and thus overwritten. Calculation and quantity calculation for main and sub-items Type 4 (main part plus integrated individual parts) is the default setting and cannot be changed. However, the system distinguishes a total of five types (Types) of how subitems are assembled with the main item (see the \"Type\" field displayed on the first tab \"Offer/Order item\" if a main item has been loaded); this defines the pricing rules and quantity calculation. Description: (see order item)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Conditional sales parts list entry: Conditional individual parts in sets Conditional individual parts can be included in sets. Characteristics can be assigned to these conditional individual parts, which later appear in the offer or order items. If no characteristics were entered for these conditional individual parts, the quotation or order item automatically takes the characteristics of the selected individual part from the parts master. The first position whose condition is fulfilled is used when resolving the conditional items. Quantities Three different types can be defined for the quantity information: A value, a formula or a conditional table. Parts button Clicking on the parts button opens a sub-menu which offers the possibility to choose between sales parts, spare parts and services. ### Instruction: Name this module. ### Response: This module is called Conditional sales parts list entry."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Conditional sales parts list entry used for? ### Response: The module Conditional sales parts list entry is used for the following: Conditional individual parts in sets Conditional individual parts can be included in sets. Characteristics can be assigned to these conditional individual parts, which later appear in the offer or order items. If no characteristics were entered for these conditional individual parts, the quotation or order item automatically takes the characteristics of the selected individual part from the parts master. The first position whose condition is fulfilled is used when resolving the conditional items. Quantities Three different types can be defined for the quantity information: A value, a formula or a conditional table. Parts button Clicking on the parts button opens a sub-menu which offers the possibility to choose between sales parts, spare parts and services.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Articles for sale: The sales item is a role of the part that holds sales specific information, such as the sales price or the price agreements with customers. The sales item also has its own description, which is used for printing quotations and orders. ### Instruction: Name this module. ### Response: The module being described is Articles for sale."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Articles for sale. ### Response: The module Articles for sale is used for the following: The sales item is a role of the part that holds sales specific information, such as the sales price or the price agreements with customers. The sales item also has its own description, which is used for printing quotations and orders.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sales set: A sales set is a sales item that consists of a bundle of other sales items. In its simplest form, it is just a designation for a combination of other articles. Although a sales set is a part roll, it is the only part roll that does not need to be related to a part. For example, if the combination of the sales articles - the sales set itself - is stocked, it must be assigned to a part (consisting of the combined parts). For example, a spare parts set would be a sales set consisting of different spare parts. If the spare part sets are pre-packed and stored in the warehouse, then the spare part set has its own part number. The possible packaging (bag, sack, carton) of a sales set can be assigned to the part of the sales set as a parts list, accordingly the compilation of a set can be assigned to the part of the sales set as a routing. A special form of the sales set is the assembly set, whose individual parts are directly processed as a parts list.Conditional individual parts in sets Conditional individual parts can be included in sets. Characteristics can be assigned to these conditional individual parts, which later appear in the offer or order items. If no characteristics were entered for these conditional individual parts, the quotation or order item automatically takes the characteristics of the selected individual part from the parts master.Characteristics of the lower partsWhen sub-parts are added to sets, all characteristics of the selected part are copied from the part master into the characteristics of the new sub-position of the set. These can now be set as desired and are then valid for all quotation/order items created from this set, if the characteristics have not been explicitly defined and thus overwritten.Calculation and quantity calculation for main and sub-items Five types (types) are distinguished as to how sub-items are assembled with the main item (see the field \"Type\", which is displayed on the first tab \"Quotation/Order item\" if a main item has been loaded); besides the definition of pricing rules and quantity calculation, the control of the business processes disposition, delivery and invoicing are determined according to the type.Description: (see order item). ### Instruction: What is the name of the module being described? ### Response: The name of this module is Sales set."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Sales set? ### Response: The purpose of the module Sales set is the following: A sales set is a sales item that consists of a bundle of other sales items. In its simplest form, it is just a designation for a combination of other articles. Although a sales set is a part roll, it is the only part roll that does not need to be related to a part. For example, if the combination of the sales articles - the sales set itself - is stocked, it must be assigned to a part (consisting of the combined parts). For example, a spare parts set would be a sales set consisting of different spare parts. If the spare part sets are pre-packed and stored in the warehouse, then the spare part set has its own part number. The possible packaging (bag, sack, carton) of a sales set can be assigned to the part of the sales set as a parts list, accordingly the compilation of a set can be assigned to the part of the sales set as a routing. A special form of the sales set is the assembly set, whose individual parts are directly processed as a parts list.Conditional individual parts in sets Conditional individual parts can be included in sets. Characteristics can be assigned to these conditional individual parts, which later appear in the offer or order items. If no characteristics were entered for these conditional individual parts, the quotation or order item automatically takes the characteristics of the selected individual part from the parts master.Characteristics of the lower partsWhen sub-parts are added to sets, all characteristics of the selected part are copied from the part master into the characteristics of the new sub-position of the set. These can now be set as desired and are then valid for all quotation/order items created from this set, if the characteristics have not been explicitly defined and thus overwritten.Calculation and quantity calculation for main and sub-items Five types (types) are distinguished as to how sub-items are assembled with the main item (see the field \"Type\", which is displayed on the first tab \"Quotation/Order item\" if a main item has been loaded); besides the definition of pricing rules and quantity calculation, the control of the business processes disposition, delivery and invoicing are determined according to the type.Description: (see order item)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sales of sales items: This module is used to create statistics on sales items. For this purpose, all the items of sales orders are evaluated in which all forms of sales items - within level 0 - have been ordered.Only those order items whose order header is confirmed are included in the statistics. Unconfirmed orders are ignored in the statistics! In addition to sales order items, parts from intercompany orders are also taken into account, but only if parts and not parts roles have been called (see next section).To call up the statistics, you can differentiate between the part selection and the part role selection. With part selection, all the roles of the selected parts specified in the filter for part roles are included in the statistics. If only individual sub-roles of individual parts are selected, only these appear in the statistics.Note! These sales order statistics are intended purely as sales item quantity, value and contribution margin statistics, they are not billing turnover statistics that can be directly matched to the accrual periods in financial accounting . The period accrual in these sales item statistics is based only on the statistics period set on the respective order header. ### Instruction: Tell me the name of this module. ### Response: This module is named Sales of sales items."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Sales of sales items. ### Response: The purpose of the module Sales of sales items is the following: This module is used to create statistics on sales items. For this purpose, all the items of sales orders are evaluated in which all forms of sales items - within level 0 - have been ordered.Only those order items whose order header is confirmed are included in the statistics. Unconfirmed orders are ignored in the statistics! In addition to sales order items, parts from intercompany orders are also taken into account, but only if parts and not parts roles have been called (see next section).To call up the statistics, you can differentiate between the part selection and the part role selection. With part selection, all the roles of the selected parts specified in the filter for part roles are included in the statistics. If only individual sub-roles of individual parts are selected, only these appear in the statistics.Note! These sales order statistics are intended purely as sales item quantity, value and contribution margin statistics, they are not billing turnover statistics that can be directly matched to the accrual periods in financial accounting . The period accrual in these sales item statistics is based only on the statistics period set on the respective order header.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Release order item technically: With this module, sales order items are technically processed and released. A technical processing depends on the logistic identification of the part on the order item: If it is a production part, the order-specific production parts list can/should be generated for this part, if it is an order part, the requirement request can/should be made.A text article on an order item is first treated logistically like an order part for technical release, a requirement request can (not necessarily!) be made. It should be noted that text articles do not have a unique identification or a separate MRP account, so it is not possible to check whether the text article has already been passed on to the purchasing department as a requirement request. It is therefore recommended to always check the document history of text articles carefully: a corresponding warning will be issued. ### Instruction: What is the name of this module? ### Response: This module is Release order item technically."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Release order item technically? ### Response: The purpose of the module Release order item technically is as follows: With this module, sales order items are technically processed and released. A technical processing depends on the logistic identification of the part on the order item: If it is a production part, the order-specific production parts list can/should be generated for this part, if it is an order part, the requirement request can/should be made.A text article on an order item is first treated logistically like an order part for technical release, a requirement request can (not necessarily!) be made. It should be noted that text articles do not have a unique identification or a separate MRP account, so it is not possible to check whether the text article has already been passed on to the purchasing department as a requirement request. It is therefore recommended to always check the document history of text articles carefully: a corresponding warning will be issued.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Special sales section: Special sales parts are special sales rolls that describe a part that is sold to a customer outside the normal product range. These are parts which are normally only sold once. ### Instruction: What is the name of this module? ### Response: This module is Special sales section."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Special sales section for me. ### Response: The purpose of the module Special sales section is the following: Special sales parts are special sales rolls that describe a part that is sold to a customer outside the normal product range. These are parts which are normally only sold once.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of SAP Business One Interface Monitor: ... SAP® and SAP Business One® are trademarks or registered trademarks of SAP SE in Germany and other countries. ### Instruction: What is the name of this module? ### Response: This module is called SAP Business One Interface Monitor."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module SAP Business One Interface Monitor for me. ### Response: The purpose of the module SAP Business One Interface Monitor is as follows: ... SAP® and SAP Business One® are trademarks or registered trademarks of SAP SE in Germany and other countries.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Customer complaint statistics: This module is used to display statistics on the frequency of customer complaints. It shows which quantities of one or more parts have been complained about in an adjustable time period. The parts are selected by means of the part selection window, which opens after pressing the toolbar button opens, or simply dragged into the list with the mouse. Partial rolls are also accepted here. All customer complaints of the selected parts in the set period are displayed in summary form. A double click opens the stock movement window, which shows all complaints for the clicked period. ### Instruction: Tell me the name of this module. ### Response: The module being described is Customer complaint statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Customer complaint statistics? ### Response: The purpose of the module Customer complaint statistics is the following: This module is used to display statistics on the frequency of customer complaints. It shows which quantities of one or more parts have been complained about in an adjustable time period. The parts are selected by means of the part selection window, which opens after pressing the toolbar button opens, or simply dragged into the list with the mouse. Partial rolls are also accepted here. All customer complaints of the selected parts in the set period are displayed in summary form. A double click opens the stock movement window, which shows all complaints for the clicked period.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Complaint: Customer complaints are used to map returns from customers in the system. This can be a return of the goods initiated by the customer (complaint) or by the own company (recall action). The document can be linked to an order item, a part request item or a bill of material item. All controlling business process possibilities of the following further processing are indicated on the document. On the basis of the customer complaints created over a period of time, statistics can be created via the evaluation \"customer complaint statistics\", which under certain circumstances can reveal a generally necessary recall of frequently complained parts. ### Instruction: What is the name of this module? ### Response: The name of this module is Complaint."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Complaint serve? ### Response: The module Complaint is used for the following: Customer complaints are used to map returns from customers in the system. This can be a return of the goods initiated by the customer (complaint) or by the own company (recall action). The document can be linked to an order item, a part request item or a bill of material item. All controlling business process possibilities of the following further processing are indicated on the document. On the basis of the customer complaints created over a period of time, statistics can be created via the evaluation \"customer complaint statistics\", which under certain circumstances can reveal a generally necessary recall of frequently complained parts.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner error: ... ### Instruction: Which module is being described? ### Response: This module is Scanner error."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner error serve? ### Response: The module Scanner error serves the purpose of the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner dialog selection: ... ### Instruction: How is this module called? ### Response: This module is Scanner dialog selection."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner dialog selection? ### Response: The purpose of the module Scanner dialog selection is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Login: After switching on the mobile terminal, the login screen of HESTIA WMS appears. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Scanner Login."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner Login. ### Response: The module Scanner Login can be described as follows: After switching on the mobile terminal, the login screen of HESTIA WMS appears.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner main menu: The Processes menu appears after the employee has successfully logged on to HESTIA WMS or by \"scrolling\" with the arrow keys. The other three main menus are reached by scrolling to the left or right:. ### Instruction: Name this module. ### Response: This module is called Scanner main menu."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner main menu for me. ### Response: The module Scanner main menu serves the purpose of the following: The Processes menu appears after the employee has successfully logged on to HESTIA WMS or by \"scrolling\" with the arrow keys. The other three main menus are reached by scrolling to the left or right:."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Article Info: This function is used when the employee needs information about article stocks or when he wants to know in which storage locations the goods are reserved in which quantities by whom. ### Instruction: Tell me the name of this module. ### Response: This module is named Scanner Article Info."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Article Info? ### Response: The purpose of the module Scanner Article Info is as follows: This function is used when the employee needs information about article stocks or when he wants to know in which storage locations the goods are reserved in which quantities by whom.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner article stock: This function is used when the employee needs information about article stocks or when he wants to know in which storage bin(s) the goods are stored. In this case, the bin(s) of interest and the item isknown. ### Instruction: What is the name of the module being described? ### Response: The module being described is Scanner article stock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner article stock used for? ### Response: The module Scanner article stock can be described as follows: This function is used when the employee needs information about article stocks or when he wants to know in which storage bin(s) the goods are stored. In this case, the bin(s) of interest and the item isknown."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner stock level: This function is used when the employee needs information about the stock in a storage bin or when he wants to know which articles are in a storage bin. In this case, the item or items are of interest and the storage location is known. ### Instruction: Which module is being described? ### Response: This module is called Scanner stock level."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner stock level serve? ### Response: The module Scanner stock level can be described as follows: This function is used when the employee needs information about the stock in a storage bin or when he wants to know which articles are in a storage bin. In this case, the item or items are of interest and the storage location is known.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner storage location Info: This function is used when the employee needs information about stock in a storage bin or when he wants to know which articles in which quantities are reserved in a storage bin by whom. ### Instruction: What is the name of this module? ### Response: The name of this module is Scanner storage location Info."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner storage location Info serve? ### Response: The purpose of the module Scanner storage location Info is as follows: This function is used when the employee needs information about stock in a storage bin or when he wants to know which articles in which quantities are reserved in a storage bin by whom.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Reduce stock: After scanning the storage bin barcode and the article barcode, the employee has the possibility to select one of the displayed inventory records and then enter the difference quantity. Unlike the inventory count by storage bin, differences or changes of state recorded with this mask are posted directly in the host system. ### Instruction: Name this module. ### Response: This module is named Scanner Reduce stock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner Reduce stock used for? ### Response: The purpose of the module Scanner Reduce stock is the following: After scanning the storage bin barcode and the article barcode, the employee has the possibility to select one of the displayed inventory records and then enter the difference quantity. Unlike the inventory count by storage bin, differences or changes of state recorded with this mask are posted directly in the host system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Increase stock: After scanning the storage bin barcode and article barcode, the employee has the possibility to enter a difference quantity and/or the condition of a quantity of the article in the storage bin. Unlike the inventory count by storage bin, differences or changes of state recorded with this mask are posted directly in the host system. ### Instruction: What is the name of this module? ### Response: This module is Scanner Increase stock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner Increase stock. ### Response: The module Scanner Increase stock is used for the following: After scanning the storage bin barcode and article barcode, the employee has the possibility to enter a difference quantity and/or the condition of a quantity of the article in the storage bin. Unlike the inventory count by storage bin, differences or changes of state recorded with this mask are posted directly in the host system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Maintenance Adjust inventory: Under this menu item, all functions for adjusting stock, adding and deducting stock (defect/loss) and status changes (available, quarantine etc.) can be called up. ### Instruction: What is the name of this module? ### Response: This module is Scanner Maintenance Adjust inventory."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner Maintenance Adjust inventory for me. ### Response: The purpose of the module Scanner Maintenance Adjust inventory is as follows: Under this menu item, all functions for adjusting stock, adding and deducting stock (defect/loss) and status changes (available, quarantine etc.) can be called up.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner status change: To change the condition of an article or a partial quantity of an article in a storage bin (e.g. if a part becomes defective or is to be blocked etc.) the storage bin and article are scanned. The quantity with assigned status is displayed. By selecting the appropriate line, the next screen appears, which allows to select the new status in one line. At the end, the mask appears that allows to enter the quantity of the item that should change state.Changes of state are booked directly in the host system with the quantities entered. ### Instruction: What is the name of the module being described? ### Response: The module being described is Scanner status change."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner status change for me. ### Response: The module Scanner status change can be described as follows: To change the condition of an article or a partial quantity of an article in a storage bin (e.g. if a part becomes defective or is to be blocked etc.) the storage bin and article are scanned. The quantity with assigned status is displayed. By selecting the appropriate line, the next screen appears, which allows to select the new status in one line. At the end, the mask appears that allows to enter the quantity of the item that should change state.Changes of state are booked directly in the host system with the quantities entered.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Maintenance Transfer: Functions for the transfer of stock or parts thereof from one storage bin to another can be called up under this menu item. ### Instruction: How is this module called? ### Response: This module is called Scanner Maintenance Transfer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner Maintenance Transfer serve? ### Response: The purpose of the module Scanner Maintenance Transfer is as follows: Functions for the transfer of stock or parts thereof from one storage bin to another can be called up under this menu item.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Storage location selection of an article: ... ### Instruction: How is this module called? ### Response: The module being described is Scanner Storage location selection of an article."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner Storage location selection of an article used for? ### Response: The module Scanner Storage location selection of an article serves the purpose of the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Relocate all items or licence: Function to transfer entire storage aids. The goods contained therein are thereby implicitly moved as well. ### Instruction: Which module is being described? ### Response: The module being described is Scanner Relocate all items or licence."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Relocate all items or licence? ### Response: The module Scanner Relocate all items or licence can be described as follows: Function to transfer entire storage aids. The goods contained therein are thereby implicitly moved as well."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Move scanner parts: ... ### Instruction: What is the name of the module being described? ### Response: This module is named Move scanner parts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Move scanner parts serve? ### Response: The purpose of the module Move scanner parts is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner standard container: ... ### Instruction: Which module is being described? ### Response: The name of this module is Scanner standard container."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner standard container serve? ### Response: The purpose of the module Scanner standard container is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Maintenance Inventory: All functions related to the inventory of goods in the warehouse can be called up under this menu item. The inventories themselves are planned by the warehouse management in the Hestia Warehouse Monitor. ### Instruction: Tell me the name of this module. ### Response: The module being described is Scanner Maintenance Inventory."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner Maintenance Inventory used for? ### Response: The module Scanner Maintenance Inventory is used for the following: All functions related to the inventory of goods in the warehouse can be called up under this menu item. The inventories themselves are planned by the warehouse management in the Hestia Warehouse Monitor.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner set stock - inventory by storage bin: The entered quantities are not booked directly in the host system, differences are reconciled with the Domain Studio with the host system. ### Instruction: What is the name of the module being described? ### Response: This module is Scanner set stock - inventory by storage bin."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner set stock - inventory by storage bin. ### Response: The purpose of the module Scanner set stock - inventory by storage bin is as follows: The entered quantities are not booked directly in the host system, differences are reconciled with the Domain Studio with the host system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner inventory: ... ### Instruction: What is the name of this module? ### Response: This module is named Scanner inventory."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner inventory. ### Response: The module Scanner inventory is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Count scanner serial numbers: ... ### Instruction: How is this module called? ### Response: This module is named Count scanner serial numbers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Count scanner serial numbers for me. ### Response: The purpose of the module Count scanner serial numbers is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Enter scanner parameters: ... ### Instruction: Which module is being described? ### Response: This module is called Enter scanner parameters."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Enter scanner parameters? ### Response: The purpose of the module Enter scanner parameters is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner label: Printing of labels with optional indication of the quantity. ### Instruction: Tell me the name of this module. ### Response: This module is Scanner label."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner label for me. ### Response: The module Scanner label serves the purpose of the following: Printing of labels with optional indication of the quantity."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Document: Under this menu item, the function for printing delivery notes, invoices (both documents from the host system), can be called up. ### Instruction: Tell me the name of this module. ### Response: This module is named Scanner Document."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner Document used for? ### Response: The purpose of the module Scanner Document is the following: Under this menu item, the function for printing delivery notes, invoices (both documents from the host system), can be called up.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Print delivery note: ... ### Instruction: Tell me the name of this module. ### Response: This module is named Scanner Print delivery note."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Print delivery note? ### Response: The module Scanner Print delivery note is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Print delivery note from picking list: ... ### Instruction: Which module is being described? ### Response: This module is named Scanner Print delivery note from picking list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner Print delivery note from picking list serve? ### Response: The module Scanner Print delivery note from picking list is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Print invoice: ... ### Instruction: What is the name of this module? ### Response: The module being described is Scanner Print invoice."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Print invoice? ### Response: The purpose of the module Scanner Print invoice is the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Print article label: This function is used to select a label printer and then to select the quantity (number) of labels to be printed. ### Instruction: What is the name of this module? ### Response: This module is called Scanner Print article label."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner Print article label for me. ### Response: The purpose of the module Scanner Print article label is the following: This function is used to select a label printer and then to select the quantity (number) of labels to be printed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Print storage location label: Printing the labels for a storage bin. ### Instruction: How is this module called? ### Response: This module is called Scanner Print storage location label."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner Print storage location label for me. ### Response: The purpose of the module Scanner Print storage location label is the following: Printing the labels for a storage bin."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Process Incoming Goods: All functions related to the processing of goods receipts into the warehouse can be called up under Processes -> Goods Receipt. ### Instruction: Tell me the name of this module. ### Response: This module is called Scanner Process Incoming Goods."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner Process Incoming Goods for me. ### Response: The module Scanner Process Incoming Goods can be described as follows: All functions related to the processing of goods receipts into the warehouse can be called up under Processes -> Goods Receipt.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Receiving the goods \"From supplier: ... ### Instruction: Which module is being described? ### Response: This module is Scanner Receiving the goods \"From supplier."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner Receiving the goods \"From supplier for me. ### Response: The purpose of the module Scanner Receiving the goods \"From supplier is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Receiving the goods \"From supplier direct storage: This process supports the direct placement of the received goods into a final storage bin, i.e. the actual putaway process is carried out directly. This can make sense in various cases, e.g. if whole pallets are delivered on which only a certain article is placed or in case of large parts. ### Instruction: How is this module called? ### Response: The module being described is Scanner Receiving the goods \"From supplier direct storage."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Receiving the goods \"From supplier direct storage? ### Response: The module Scanner Receiving the goods \"From supplier direct storage serves the purpose of the following: This process supports the direct placement of the received goods into a final storage bin, i.e. the actual putaway process is carried out directly. This can make sense in various cases, e.g. if whole pallets are delivered on which only a certain article is placed or in case of large parts.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner return from customer (Return from customer): If customer returns arrive at the warehouse, a credit note or a returns document has been created in the host system beforehand. ### Instruction: What is the name of this module? ### Response: This module is named Scanner return from customer (Return from customer)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Scanner return from customer (Return from customer) for me. ### Response: The module Scanner return from customer (Return from customer) serves the purpose of the following: If customer returns arrive at the warehouse, a credit note or a returns document has been created in the host system beforehand.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner goods receipt from supplier (direct storage): The activities \"From Supplier\" and \"Direct Storage by Supplier\" are largely identical, i.e. they only differ in the process of receiving goods (\"Checkin\"). ### Instruction: What is the name of the module being described? ### Response: This module is Scanner goods receipt from supplier (direct storage)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner goods receipt from supplier (direct storage) used for? ### Response: The purpose of the module Scanner goods receipt from supplier (direct storage) is the following: The activities \"From Supplier\" and \"Direct Storage by Supplier\" are largely identical, i.e. they only differ in the process of receiving goods (\"Checkin\").."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner process outgoing goods: The functions for processing customer orders are called up under this menu item of the mobile terminal. ### Instruction: Name this module. ### Response: The name of this module is Scanner process outgoing goods."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner process outgoing goods used for? ### Response: The module Scanner process outgoing goods can be described as follows: The functions for processing customer orders are called up under this menu item of the mobile terminal.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Packing: ... ### Instruction: What is the name of this module? ### Response: This module is called Scanner Packing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner Packing. ### Response: The module Scanner Packing can be described as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Picking Items: Now we are in the dialogue loop for picking the individual parts, which is run through until either all picks have been made (automatic exit from the dialogue loop), or the pick container is full (exit by pressing \"ESC\").The following information is expected from the warehouse worker one after the other:Indication of the storage location where the goods are to be picked.Optional indication of the PRT if the goods in the storage bin are on a PRT.Indication of the article number or EAN code of the articleOptional specification of a pick note for this pick item (pick notes are also specified when the order item is entered).Indication of the quantityOptional indication of serial and batch numbers (whenever the item is serial or batch numbered).Validation At each of these steps, the warehouse employee's details are checked and, in the event of an error, a corresponding message is issued to the warehouse employee.Additional functions At the appropriate point within this process, additional context-specific functions are available to the warehouse employee (as shown above for the entry of the storage bin \"Select row\" or \"Reallocation\", at other points the \"Print labels\" etc.).Additional pick containers It is possible to use additional pick containers without first discarding the pick container currently in use. This can optimise the picking process to simplify or even avoid subsequent packing or consolidation.Interrupt picking In certain situations, the warehouse worker wants to interrupt the picking process (e.g. picking container full). He can do this by pressing \"ESC\". ### Instruction: What is the name of the module being described? ### Response: This module is called Scanner Picking Items."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner Picking Items serve? ### Response: The purpose of the module Scanner Picking Items is the following: Now we are in the dialogue loop for picking the individual parts, which is run through until either all picks have been made (automatic exit from the dialogue loop), or the pick container is full (exit by pressing \"ESC\").The following information is expected from the warehouse worker one after the other:Indication of the storage location where the goods are to be picked.Optional indication of the PRT if the goods in the storage bin are on a PRT.Indication of the article number or EAN code of the articleOptional specification of a pick note for this pick item (pick notes are also specified when the order item is entered).Indication of the quantityOptional indication of serial and batch numbers (whenever the item is serial or batch numbered).Validation At each of these steps, the warehouse employee's details are checked and, in the event of an error, a corresponding message is issued to the warehouse employee.Additional functions At the appropriate point within this process, additional context-specific functions are available to the warehouse employee (as shown above for the entry of the storage bin \"Select row\" or \"Reallocation\", at other points the \"Print labels\" etc.).Additional pick containers It is possible to use additional pick containers without first discarding the pick container currently in use. This can optimise the picking process to simplify or even avoid subsequent packing or consolidation.Interrupt picking In certain situations, the warehouse worker wants to interrupt the picking process (e.g. picking container full). He can do this by pressing \"ESC\".."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select scanner package: ... ### Instruction: How is this module called? ### Response: The name of this module is Select scanner package."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Select scanner package used for? ### Response: The module Select scanner package is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner goods issue to customer: A customer orders goods (sales order) and specifies when and how the goods are to be delivered. The sales order and the specifications are recorded in the order office. The goods are then assembled in the warehouse according to the specifications and shipped.Preparation:Host systemEnter customer orderRelease pick list based on sales orderHESTIARead sales order and pick list into HESTIARelease picklist, allocate, release allocation. ### Instruction: What is the name of this module? ### Response: The module being described is Scanner goods issue to customer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner goods issue to customer used for? ### Response: The purpose of the module Scanner goods issue to customer is the following: A customer orders goods (sales order) and specifies when and how the goods are to be delivered. The sales order and the specifications are recorded in the order office. The goods are then assembled in the warehouse according to the specifications and shipped.Preparation:Host systemEnter customer orderRelease pick list based on sales orderHESTIARead sales order and pick list into HESTIARelease picklist, allocate, release allocation.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Consolidate and send scanners: ... ### Instruction: Which module is being described? ### Response: This module is called Consolidate and send scanners."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Consolidate and send scanners serve? ### Response: The purpose of the module Consolidate and send scanners is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Consolidate scanner licence: If an entire storage aid is to be placed on another (e.g. a pick box on a pallet), this function is used. ### Instruction: Name this module. ### Response: The name of this module is Consolidate scanner licence."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Consolidate scanner licence. ### Response: The purpose of the module Consolidate scanner licence is as follows: If an entire storage aid is to be placed on another (e.g. a pick box on a pallet), this function is used.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Consolidate scanner parts: If individual parts are to be placed from one storage aid to another, then this function is used. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Consolidate scanner parts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Consolidate scanner parts. ### Response: The module Consolidate scanner parts is used for the following: If individual parts are to be placed from one storage aid to another, then this function is used.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Pack items or licence: Pack single parts This guided activity is used to assign individual parts to a shipping container and to record the weight of the shipping container (e.g. at the packing table).Select pick containerSelect additional pick containersPackComplete packingPack licence The guided activity Pack licence is used when goods are to be prepared on pallets for dispatch. As a rule, the picked goods are wrapped on the pallets using a film so that nothing is lost during transport and the load is secured. ### Instruction: What is the name of this module? ### Response: The module being described is Scanner Pack items or licence."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner Pack items or licence. ### Response: The module Scanner Pack items or licence serves the purpose of the following: Pack single parts This guided activity is used to assign individual parts to a shipping container and to record the weight of the shipping container (e.g. at the packing table).Select pick containerSelect additional pick containersPackComplete packingPack licence The guided activity Pack licence is used when goods are to be prepared on pallets for dispatch. As a rule, the picked goods are wrapped on the pallets using a film so that nothing is lost during transport and the load is secured.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Packing a Licence - Selection Transport Guide: ... ### Instruction: How is this module called? ### Response: The name of this module is Scanner Packing a Licence - Selection Transport Guide."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner Packing a Licence - Selection Transport Guide. ### Response: The module Scanner Packing a Licence - Selection Transport Guide can be described as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner PickAndCollect customer: The warehouse employee selects a picking list and picks the goods from this picking list lying in his picking zone onto a picking cart or other picking container (pick container). As soon as the trolley/container is full or there are no further picks for this picking list in the picking zone, the warehouse worker places the trolley/container in a storage area for further processing. Usually this is a storage bin in one of the following storage areas Packing Winding Provision During storage, the warehouse employee is shown whether the goods need to be consolidated (e.g. because goods from other picking zones still need to be picked for this picking list) and whether goods from this picking list are already picked in another storage bin. The warehouse employee tries to place the goods in the same storage bin where goods from this picking list are already stored. The strategies for depositing are defined customer-specifically in each case. ### Instruction: What is the name of the module being described? ### Response: This module is called Scanner PickAndCollect customer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner PickAndCollect customer? ### Response: The purpose of the module Scanner PickAndCollect customer is as follows: The warehouse employee selects a picking list and picks the goods from this picking list lying in his picking zone onto a picking cart or other picking container (pick container). As soon as the trolley/container is full or there are no further picks for this picking list in the picking zone, the warehouse worker places the trolley/container in a storage area for further processing. Usually this is a storage bin in one of the following storage areas Packing Winding Provision During storage, the warehouse employee is shown whether the goods need to be consolidated (e.g. because goods from other picking zones still need to be picked for this picking list) and whether goods from this picking list are already picked in another storage bin. The warehouse employee tries to place the goods in the same storage bin where goods from this picking list are already stored. The strategies for depositing are defined customer-specifically in each case.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner PickAndDrop customer: Goods that have to be picked as individual picks (e.g. whole pallets or large parts) are picked up individually by a forklift and transported directly to the appropriate place in one of the zones Provision Winding turned off. The pick to be made is automatically assigned to the warehouse employee. He has the choice of specifying a picking list (picking list selection via picking licence) or simply selecting the next pending pick without taking a picking list into account (automatic picking list selection). When parking, the warehouse employee is shown whether the goods need to be consolidated (e.g. because goods from other picking zones still need to be picked for this picking list) and whether goods from this picking list are already picked in another storage bin. The warehouse employee tries to place the goods in the same storage bin where goods from this picking list are already stored. This is similar to the storage of goods at PickAndCollect. The strategies for filing are defined customer-specifically in each case. ### Instruction: What is the name of the module being described? ### Response: This module is Scanner PickAndDrop customer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner PickAndDrop customer? ### Response: The purpose of the module Scanner PickAndDrop customer is as follows: Goods that have to be picked as individual picks (e.g. whole pallets or large parts) are picked up individually by a forklift and transported directly to the appropriate place in one of the zones Provision Winding turned off. The pick to be made is automatically assigned to the warehouse employee. He has the choice of specifying a picking list (picking list selection via picking licence) or simply selecting the next pending pick without taking a picking list into account (automatic picking list selection). When parking, the warehouse employee is shown whether the goods need to be consolidated (e.g. because goods from other picking zones still need to be picked for this picking list) and whether goods from this picking list are already picked in another storage bin. The warehouse employee tries to place the goods in the same storage bin where goods from this picking list are already stored. This is similar to the storage of goods at PickAndCollect. The strategies for filing are defined customer-specifically in each case.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Process Transport of goods: ... ### Instruction: Name this module. ### Response: This module is called Scanner Process Transport of goods."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Process Transport of goods? ### Response: The module Scanner Process Transport of goods can be described as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner storage: This function is used to transfer goods identified in the goods receipt area from the goods receipt area to the final storage bins. ### Instruction: Which module is being described? ### Response: This module is called Scanner storage."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner storage serve? ### Response: The module Scanner storage is used for the following: This function is used to transfer goods identified in the goods receipt area from the goods receipt area to the final storage bins.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner storage Quick storage: ... ### Instruction: Tell me the name of this module. ### Response: The name of this module is Scanner storage Quick storage."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner storage Quick storage serve? ### Response: The purpose of the module Scanner storage Quick storage is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Storage Mixed licence: ... ### Instruction: Which module is being described? ### Response: The name of this module is Scanner Storage Mixed licence."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Storage Mixed licence? ### Response: The module Scanner Storage Mixed licence is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Storage of individual parts: This process is selected if the goods to be put away are to be distributed into individual storage bins. It is assumed that the goods are located on a storage aid (licence). ### Instruction: Which module is being described? ### Response: This module is called Scanner Storage of individual parts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Scanner Storage of individual parts. ### Response: The purpose of the module Scanner Storage of individual parts is the following: This process is selected if the goods to be put away are to be distributed into individual storage bins. It is assumed that the goods are located on a storage aid (licence).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Storage Article-clean licence: ... ### Instruction: Tell me the name of this module. ### Response: This module is Scanner Storage Article-clean licence."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Scanner Storage Article-clean licence used for? ### Response: The purpose of the module Scanner Storage Article-clean licence is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select Scanner Blackhole: ... ### Instruction: How is this module called? ### Response: This module is Select Scanner Blackhole."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Select Scanner Blackhole. ### Response: The purpose of the module Select Scanner Blackhole is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Printer selection: ... ### Instruction: Name this module. ### Response: The name of this module is Scanner Printer selection."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner Printer selection serve? ### Response: The purpose of the module Scanner Printer selection is the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select scanner stacker: Securing the stacker. ### Instruction: Which module is being described? ### Response: The module being described is Select scanner stacker."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Select scanner stacker for me. ### Response: The module Select scanner stacker serves the purpose of the following: Securing the stacker."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select Scanner Layout: ... ### Instruction: Which module is being described? ### Response: The module being described is Select Scanner Layout."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Select Scanner Layout. ### Response: The module Select Scanner Layout can be described as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select scanner picklist: Setting the pick list. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Select scanner picklist."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Select scanner picklist? ### Response: The module Select scanner picklist serves the purpose of the following: Setting the pick list."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select scanner picking zone: Defining the picking zone. ### Instruction: What is the name of this module? ### Response: This module is Select scanner picking zone."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Select scanner picking zone. ### Response: The module Select scanner picking zone can be described as follows: Defining the picking zone."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Select printer: ... ### Instruction: Name this module. ### Response: The name of this module is Scanner Select printer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Select printer? ### Response: The purpose of the module Scanner Select printer is as follows: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Select standard container: ... ### Instruction: Name this module. ### Response: This module is called Scanner Select standard container."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Select standard container? ### Response: The module Scanner Select standard container serves the purpose of the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select scanner status: This function is used to give the goods to be stored the status \"inspection\", for example, if the goods must be checked before they are released for use. The state is selected by marking the corresponding line and confirming with OK. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Select scanner status."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Select scanner status used for? ### Response: The module Select scanner status can be described as follows: This function is used to give the goods to be stored the status \"inspection\", for example, if the goods must be checked before they are released for use. The state is selected by marking the corresponding line and confirming with OK.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Finals Record storage location: The goods are brought to the final storage place and this is scanned for direct storage. ### Instruction: How is this module called? ### Response: This module is Scanner Finals Record storage location."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Scanner Finals Record storage location? ### Response: The module Scanner Finals Record storage location is used for the following: The goods are brought to the final storage place and this is scanned for direct storage.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Select scanner working zone: Setting the work zone. ### Instruction: Which module is being described? ### Response: This module is named Select scanner working zone."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Select scanner working zone? ### Response: The purpose of the module Select scanner working zone is as follows: Setting the work zone."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Collect scanner serial numbers: ... ### Instruction: What is the name of this module? ### Response: The module being described is Collect scanner serial numbers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Collect scanner serial numbers. ### Response: The module Collect scanner serial numbers is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Scanner Status Deployment: If there are queued pick containers in the staging area, then this function can be used to indicate which of these pick containers are ready for dispatch. ### Instruction: Name this module. ### Response: This module is Scanner Status Deployment."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Scanner Status Deployment serve? ### Response: The purpose of the module Scanner Status Deployment is as follows: If there are queued pick containers in the staging area, then this function can be used to indicate which of these pick containers are ready for dispatch.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Period: Periods can have a status that can be maintained here. For example, it can be specified here whether a period (or statistics period: e.g. February 2006) has started, ended or been interrupted. This module is usually called up from the module for maintaining financial years or personnel calendars. ### Instruction: How is this module called? ### Response: This module is named Period."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Period. ### Response: The module Period is used for the following: Periods can have a status that can be maintained here. For example, it can be specified here whether a period (or statistics period: e.g. February 2006) has started, ended or been interrupted. This module is usually called up from the module for maintaining financial years or personnel calendars.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Access rights for classes: The access groups are used to manage user rights (see also Access Rights). In ClassiX® various objects can be accessed. The type of these objects is the class, which defines the properties and the data fields of the object. Thus, the class can be used to define the access to a group of objects. Alternatively, each individual object could be provided with an access protection, but this would be much more cumbersome and thus less efficient. In the standard system, various designations are used to make it clear which rights are granted with class access: Release stands for the rights read, write, insert and delete Change stands for the rights read, write and insert Writing stands for the rights reading and writing Reading stands for the right to read. ### Instruction: What is the name of this module? ### Response: This module is named Access rights for classes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Access rights for classes. ### Response: The module Access rights for classes is used for the following: The access groups are used to manage user rights (see also Access Rights). In ClassiX® various objects can be accessed. The type of these objects is the class, which defines the properties and the data fields of the object. Thus, the class can be used to define the access to a group of objects. Alternatively, each individual object could be provided with an access protection, but this would be much more cumbersome and thus less efficient. In the standard system, various designations are used to make it clear which rights are granted with class access: Release stands for the rights read, write, insert and delete Change stands for the rights read, write and insert Writing stands for the rights reading and writing Reading stands for the right to read."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Access group: The access groups are used to manage user rights (see also Access Rights). Due to the better clarity and easier administration, different access regulations (to classes, messages or objects) can be combined and structured in groups. Nesting of groups is also possible. ### Instruction: How is this module called? ### Response: This module is called Access group."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Access group for me. ### Response: The module Access group serves the purpose of the following: The access groups are used to manage user rights (see also Access Rights). Due to the better clarity and easier administration, different access regulations (to classes, messages or objects) can be combined and structured in groups. Nesting of groups is also possible.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Access rights for messages: The access groups are used to manage user rights (see also Access Rights). User actions, such as pressing a button, can be used to send messages that cause a mask to be called up or data to be changed. To block this action for some users, a message block can be created via this module. ### Instruction: Which module is being described? ### Response: This module is named Access rights for messages."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Access rights for messages serve? ### Response: The module Access rights for messages can be described as follows: The access groups are used to manage user rights (see also Access Rights). User actions, such as pressing a button, can be used to send messages that cause a mask to be called up or data to be changed. To block this action for some users, a message block can be created via this module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Access rights for objects: With this module, access rights can be assigned for individual objects. Objects with the same rights (no rights, read only, write only, read and write only, etc.) can be grouped together for this purpose. (see also access rights). ### Instruction: Which module is being described? ### Response: The module being described is Access rights for objects."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Access rights for objects serve? ### Response: The module Access rights for objects can be described as follows: With this module, access rights can be assigned for individual objects. Objects with the same rights (no rights, read only, write only, read and write only, etc.) can be grouped together for this purpose. (see also access rights)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Access rights for system options: The access groups are used to manage user rights (see also Access Rights). In ClassiX®, this access object can be used to restrict access to the system. For example, a user can be denied the right to open the monitor window. ### Instruction: Name this module. ### Response: This module is Access rights for system options."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Access rights for system options serve? ### Response: The module Access rights for system options serves the purpose of the following: The access groups are used to manage user rights (see also Access Rights). In ClassiX®, this access object can be used to restrict access to the system. For example, a user can be denied the right to open the monitor window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Serial numbers: A serial number is a character string used to identify one or more parts. It is important to understand that despite multiple uses (even two suppliers could use the same serial number), a serial number is in principle unique. In ClassiX a serial number is therefore modelled by 3 objects (see data model) 1. the reference to the serial number object (via a CX_SERIAL_NUMBER ACCOUNT object to an object of type CX_SERIAL_NUMBER) 2. the references to the business objects, including the part Other business objects could be the supplier who delivered the part and assigned the serial number or an industrial plant to which the part was delivered or which represents the part itself (device or plant) 3. the references to the documents that the part has passed through This information makes it possible to identify a part and its movements clearly and transparently. ### Instruction: Name this module. ### Response: This module is named Serial numbers."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Serial numbers serve? ### Response: The purpose of the module Serial numbers is as follows: A serial number is a character string used to identify one or more parts. It is important to understand that despite multiple uses (even two suppliers could use the same serial number), a serial number is in principle unique. In ClassiX a serial number is therefore modelled by 3 objects (see data model) 1. the reference to the serial number object (via a CX_SERIAL_NUMBER ACCOUNT object to an object of type CX_SERIAL_NUMBER) 2. the references to the business objects, including the part Other business objects could be the supplier who delivered the part and assigned the serial number or an industrial plant to which the part was delivered or which represents the part itself (device or plant) 3. the references to the documents that the part has passed through This information makes it possible to identify a part and its movements clearly and transparently.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Service position: This module is used to maintain service call items. Service call items are created using service provider groups which are assigned to a service call. In this way, services to be performed internally such as installation and commissioning can be scheduled. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Service position."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Service position used for? ### Response: The module Service position can be described as follows: This module is used to maintain service call items. Service call items are created using service provider groups which are assigned to a service call. In this way, services to be performed internally such as installation and commissioning can be scheduled.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Service request: With this module service requests/error messages/problems of a customer can be recorded and scheduled. Such service call objects can be created e.g. directly from an industrial plant - this should be the origin of the customer's problem - whereby the customer, the plant and the plant group are automatically taken over. The core functionality of this module is that for each service call the employee who is to take care of the service call can be directly assigned. For this purpose, the employee can be assigned his capacity by first selecting the employee concerned via the employee list and then opening the capacity planning via the menu item \"Edit->Set->Capacity planning\". The service call also has an automatic planning function: the determination button on the position can determine an employee who can be deployed or a free period of time based on the data entered so far on the position. On the one hand, it is possible to specify a working group (field Provider) and a planning date with duration on the position. The button then determines the first member of the working group who has the specified capacity (duration) at the specified time. If no working group is specified, all employees of the employee master data are searched. On the other hand, the planning date can also be determined if this is emptied and then an employee is selected. The button then determines when the employee has the planned duration of capacity available and enters the date automatically. If no freelancer or free capacity is found, the mask will not be filled in. Step 1: Setting the employee capacity The system now knows how much working time can be planned for this employee. Step 2: Planning of requirements Via the editing mask of the industrial plants, in the tab \"Plant groups\", a plant group can now be selected and on it the menu item \"Create service call\" can be chosen. A new document, the service call, is created. The plant group and the customer from the industrial plant are immediately transferred to it. In the new mask, the description of what the service call was about can now be entered, for example the error description that the customer gave over the phone. At this point, neither an offer nor an order has been created. After entering the description, the document is first saved by pressing the \"OK\" button. As soon as it is now clear that the service call is to be carried out and bindingly scheduled, sub-items can be inserted on which the date (planned date), the planned duration and an employee must be specified. A new project and a new order is created in the background with a plant group and a service provider group. The service provider group is displayed as a sub-item of the service call. The data entered here are immediately booked into the employee requirement and can be found as planned requirements in its capacity planning. Step 3: Overview of the planned capacity: Please see the description of capacity utilisation for the procedure for the evaluation or the description of the worklist. ### Instruction: How is this module called? ### Response: This module is called Service request."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Service request used for? ### Response: The module Service request serves the purpose of the following: With this module service requests/error messages/problems of a customer can be recorded and scheduled. Such service call objects can be created e.g. directly from an industrial plant - this should be the origin of the customer's problem - whereby the customer, the plant and the plant group are automatically taken over. The core functionality of this module is that for each service call the employee who is to take care of the service call can be directly assigned. For this purpose, the employee can be assigned his capacity by first selecting the employee concerned via the employee list and then opening the capacity planning via the menu item \"Edit->Set->Capacity planning\". The service call also has an automatic planning function: the determination button on the position can determine an employee who can be deployed or a free period of time based on the data entered so far on the position. On the one hand, it is possible to specify a working group (field Provider) and a planning date with duration on the position. The button then determines the first member of the working group who has the specified capacity (duration) at the specified time. If no working group is specified, all employees of the employee master data are searched. On the other hand, the planning date can also be determined if this is emptied and then an employee is selected. The button then determines when the employee has the planned duration of capacity available and enters the date automatically. If no freelancer or free capacity is found, the mask will not be filled in. Step 1: Setting the employee capacity The system now knows how much working time can be planned for this employee. Step 2: Planning of requirements Via the editing mask of the industrial plants, in the tab \"Plant groups\", a plant group can now be selected and on it the menu item \"Create service call\" can be chosen. A new document, the service call, is created. The plant group and the customer from the industrial plant are immediately transferred to it. In the new mask, the description of what the service call was about can now be entered, for example the error description that the customer gave over the phone. At this point, neither an offer nor an order has been created. After entering the description, the document is first saved by pressing the \"OK\" button. As soon as it is now clear that the service call is to be carried out and bindingly scheduled, sub-items can be inserted on which the date (planned date), the planned duration and an employee must be specified. A new project and a new order is created in the background with a plant group and a service provider group. The service provider group is displayed as a sub-item of the service call. The data entered here are immediately booked into the employee requirement and can be found as planned requirements in its capacity planning. Step 3: Overview of the planned capacity: Please see the description of capacity utilisation for the procedure for the evaluation or the description of the worklist.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Date of meeting: Session and validity date are automatically set to the (system) date of the computer when the programme is started. This (system) date is also used to automatically determine the started period of a business year closest to this date and register for the session. If the ClassiX® system automatically offers a date in the entry masks, it is the session date set in this way and not the (system) date of the computer. Changing the session date is useful if you want to enter data into the ClassiX® system in advance or subsequently and you do not want to keep changing the \"current\" date offered automatically by the system to the date you want. The validity date determines the time validity of objects. The functionality of accessing only valid objects can be switched off system-wide in this module if desired or set to a specific date - even different from the session date (generates warning message!) . Fiscal year, period and session date are displayed in the bottom bar of the ClassiX® main screen. If the validity by date is switched off or the validity date is different from the session date, this is also displayed in the bottom bar of the ClassiX® main screen. ### Instruction: What is the name of this module? ### Response: The name of this module is Date of meeting."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Date of meeting used for? ### Response: The module Date of meeting can be described as follows: Session and validity date are automatically set to the (system) date of the computer when the programme is started. This (system) date is also used to automatically determine the started period of a business year closest to this date and register for the session. If the ClassiX® system automatically offers a date in the entry masks, it is the session date set in this way and not the (system) date of the computer. Changing the session date is useful if you want to enter data into the ClassiX® system in advance or subsequently and you do not want to keep changing the \"current\" date offered automatically by the system to the date you want. The validity date determines the time validity of objects. The functionality of accessing only valid objects can be switched off system-wide in this module if desired or set to a specific date - even different from the session date (generates warning message!) . Fiscal year, period and session date are displayed in the bottom bar of the ClassiX® main screen. If the validity by date is switched off or the validity date is different from the session date, this is also displayed in the bottom bar of the ClassiX® main screen.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Allocation set: This module is the basic module for allocation sets, from this module the processing modules for parts lists and work plans are derived, among others. ### Instruction: What is the name of the module being described? ### Response: The module being described is Allocation set."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Allocation set for me. ### Response: The purpose of the module Allocation set is the following: This module is the basic module for allocation sets, from this module the processing modules for parts lists and work plans are derived, among others.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Set limit for lists: Limit the number of list items. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Set limit for lists."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Set limit for lists? ### Response: The purpose of the module Set limit for lists is the following: Limit the number of list items.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Location selection, set system location: This module is used to set your own location. This can be a country, a federal state or a region subdivided as much as you like. By setting the own location, such location-specific data as currency, language. Phone code, time zone, etc. are set. ### Instruction: Name this module. ### Response: This module is called Location selection, set system location."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Location selection, set system location used for? ### Response: The module Location selection, set system location is used for the following: This module is used to set your own location. This can be a country, a federal state or a region subdivided as much as you like. By setting the own location, such location-specific data as currency, language. Phone code, time zone, etc. are set.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Condition Monitor: Display of all transactions in the respective statuses. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Condition Monitor."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Condition Monitor. ### Response: The purpose of the module Condition Monitor is as follows: Display of all transactions in the respective statuses.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Business Process Overview: Display of transitions between the states of a business process. ### Instruction: Name this module. ### Response: This module is named Business Process Overview."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Business Process Overview? ### Response: The module Business Process Overview is used for the following: Display of transitions between the states of a business process.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Outgoing invoice book: The outgoing invoice book serves on the one hand to transfer the registered invoices/credit notes to the financial accounting department. For this purpose, the corresponding documents can be filtered using various selection criteria. In addition to the filtered documents, the list also shows the initial account assignment belonging to each invoice/credit note. Thus the outgoing invoice book can also be used for control and evaluation. The outgoing invoices and credit notes are listed sorted according to the document number. If the client's outgoing invoices and credit notes are divided into individual domains, then the ones from the registered domain are displayed first, but you can switch to other domains or display the invoices or credit notes from all domains. ### Instruction: Name this module. ### Response: The name of this module is Outgoing invoice book."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Outgoing invoice book. ### Response: The module Outgoing invoice book serves the purpose of the following: The outgoing invoice book serves on the one hand to transfer the registered invoices/credit notes to the financial accounting department. For this purpose, the corresponding documents can be filtered using various selection criteria. In addition to the filtered documents, the list also shows the initial account assignment belonging to each invoice/credit note. Thus the outgoing invoice book can also be used for control and evaluation. The outgoing invoices and credit notes are listed sorted according to the document number. If the client's outgoing invoices and credit notes are divided into individual domains, then the ones from the registered domain are displayed first, but you can switch to other domains or display the invoices or credit notes from all domains.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Dynamic data fields (slots): With this application you can create dynamic data fields (slots), make them persistent and then maintain them. It is also possible to display the objects that use a particular dynamic data field from this module (see menu item \"Usage\"). One must be aware that only persistent slots can and may be changed. That is why slots created at runtime, first transient ones, must be made persistent before they can be changed. Transient slots of the ClassiX® system, i.e. slots that are loaded from the *.DIC and *.INI files when the system is started up, must neither be changed nor made persistent. Slots once created and made persistent cannot be deleted. However, you can, for example, add their name \"ZZ_\" and mark them as \"deleted\", so to speak. Created slots that are still transient cannot be deleted either, but will no longer be available when the system is next booted. Making slots persistent can only be done from the list window, this is a security measure. For example, if you have created several transient slots and you don't want to keep one of them, you can make the slots you want to keep persistent, restart the system and then only the persisted slots will be available. The created transient slot will no longer be displayed. ### Instruction: What is the name of this module? ### Response: This module is called Dynamic data fields (slots)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Dynamic data fields (slots) serve? ### Response: The module Dynamic data fields (slots) serves the purpose of the following: With this application you can create dynamic data fields (slots), make them persistent and then maintain them. It is also possible to display the objects that use a particular dynamic data field from this module (see menu item \"Usage\"). One must be aware that only persistent slots can and may be changed. That is why slots created at runtime, first transient ones, must be made persistent before they can be changed. Transient slots of the ClassiX® system, i.e. slots that are loaded from the *.DIC and *.INI files when the system is started up, must neither be changed nor made persistent. Slots once created and made persistent cannot be deleted. However, you can, for example, add their name \"ZZ_\" and mark them as \"deleted\", so to speak. Created slots that are still transient cannot be deleted either, but will no longer be available when the system is next booted. Making slots persistent can only be done from the list window, this is a security measure. For example, if you have created several transient slots and you don't want to keep one of them, you can make the slots you want to keep persistent, restart the system and then only the persisted slots will be available. The created transient slot will no longer be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Spare parts list: When a complex system is delivered, a spare parts list makes it possible to provide the customer immediately with a spare parts list with unique spare parts numbers which he can refer to in the event of damage. All parts of an order for which the indicator \"Spare part\" has been set in the part master, the indicator \"Spare parts list\" in the master parts list or the indicator \"Spare parts list\" in the production parts list are automatically transferred to the spare parts list. Since a lot of work is also done with variant parts, it can be difficult to agree with the customer which part he needs exactly in which specification. To simplify this, ClassiX offers the possibility to create so-called specifications on the spare part rolls of the variant parts, which describe the attributes. This way, for each variant part version a unique spare part number is created, which enables the customer to describe easily and exactly which part is concerned in the system. If a variant part has several spare part roles, the desired role must be assigned via the context menu on the list. The new E-number can then be assigned via the context menu. ### Instruction: Name this module. ### Response: This module is named Spare parts list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Spare parts list. ### Response: The module Spare parts list is used for the following: When a complex system is delivered, a spare parts list makes it possible to provide the customer immediately with a spare parts list with unique spare parts numbers which he can refer to in the event of damage. All parts of an order for which the indicator \"Spare part\" has been set in the part master, the indicator \"Spare parts list\" in the master parts list or the indicator \"Spare parts list\" in the production parts list are automatically transferred to the spare parts list. Since a lot of work is also done with variant parts, it can be difficult to agree with the customer which part he needs exactly in which specification. To simplify this, ClassiX offers the possibility to create so-called specifications on the spare part rolls of the variant parts, which describe the attributes. This way, for each variant part version a unique spare part number is created, which enables the customer to describe easily and exactly which part is concerned in the system. If a variant part has several spare part roles, the desired role must be assigned via the context menu on the list. The new E-number can then be assigned via the context menu.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Spare part: Spare parts are special sales rolls that describe a part that is sold to a customer outside the normal product range, as it is a repair etc. These are mostly parts which appear in a parts list (higher level 0) of a sales item. ### Instruction: What is the name of this module? ### Response: This module is named Spare part."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Spare part? ### Response: The module Spare part is used for the following: Spare parts are special sales rolls that describe a part that is sold to a customer outside the normal product range, as it is a repair etc. These are mostly parts which appear in a parts list (higher level 0) of a sales item.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Prefixes: With this application you can create, make persistent and then maintain prefixes (specifiers). One must be aware that only persistent specifiers can and may be changed. Therefore, you have to create a transient specifier at runtime and make it persistent before you can change it. Transient specifiers of the ClassiX® system, i.e. specifiers that are loaded from the *.DIC and *.INI files when the system is started, must neither be changed nor made persistent. Once created and made persistent, Specifiers can no longer be deleted. Specifiers that have been created and made transient cannot be deleted either, but they will not be present the next time the system is started. Making specifiers persistent can only be done from the list window, this is a security measure. For example, if you have created several transient specifiers and don't want to keep one of them, you can make the specifiers you want to keep persistent, restart the system and then only the persisted specifiers will be available. The created transient specifier will no longer be displayed. ### Instruction: Name this module. ### Response: This module is called Prefixes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Prefixes? ### Response: The module Prefixes can be described as follows: With this application you can create, make persistent and then maintain prefixes (specifiers). One must be aware that only persistent specifiers can and may be changed. Therefore, you have to create a transient specifier at runtime and make it persistent before you can change it. Transient specifiers of the ClassiX® system, i.e. specifiers that are loaded from the *.DIC and *.INI files when the system is started, must neither be changed nor made persistent. Once created and made persistent, Specifiers can no longer be deleted. Specifiers that have been created and made transient cannot be deleted either, but they will not be present the next time the system is started. Making specifiers persistent can only be done from the list window, this is a security measure. For example, if you have created several transient specifiers and don't want to keep one of them, you can make the specifiers you want to keep persistent, restart the system and then only the persisted specifiers will be available. The created transient specifier will no longer be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sales statistics groups: The sales statistics groups take over the functions of advance account assignment to cost types/goods accounts and the definition of article group discounts. This is made possible by the fact that they are assigned to the sales roles via the evaluation group \"sales statistics\" (SALES_STATISTICS). ### Instruction: Name this module. ### Response: This module is called Sales statistics groups."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Sales statistics groups used for? ### Response: The module Sales statistics groups serves the purpose of the following: The sales statistics groups take over the functions of advance account assignment to cost types/goods accounts and the definition of article group discounts. This is made possible by the fact that they are assigned to the sales roles via the evaluation group \"sales statistics\" (SALES_STATISTICS).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Employee modules: The employee module is used to maintain the operational data of your own employees. \"Own\" employees (CX_STAFF_MEMBER) are contact persons of the clients defined in the system, employees of all other companies (CX_CONTACT) are managed separately as \"general\" contact persons . As a rule, these are \"own\" employees of the clients defined in the system, who also have a user role in order to have access to the ClassiX system and to be able to operate it. User roles can also be assigned to contact persons of other companies. After logging in to the system, these persons will be identified as processors of the documents they process. As far as the processing of documents is concerned, they are then no longer different from their own employees. Please note the following: By default, all employees of the clients stored in the system are displayed (unless they are stored in their own database domains). To display only the employees of the logged on client, the option \"Only employees of the client\" can be activated in the option window. ### Instruction: How is this module called? ### Response: This module is called Employee modules."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Employee modules serve? ### Response: The module Employee modules is used for the following: The employee module is used to maintain the operational data of your own employees. \"Own\" employees (CX_STAFF_MEMBER) are contact persons of the clients defined in the system, employees of all other companies (CX_CONTACT) are managed separately as \"general\" contact persons . As a rule, these are \"own\" employees of the clients defined in the system, who also have a user role in order to have access to the ClassiX system and to be able to operate it. User roles can also be assigned to contact persons of other companies. After logging in to the system, these persons will be identified as processors of the documents they process. As far as the processing of documents is concerned, they are then no longer different from their own employees. Please note the following: By default, all employees of the clients stored in the system are displayed (unless they are stored in their own database domains). To display only the employees of the logged on client, the option \"Only employees of the client\" can be activated in the option window.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Startup settings: When a user logs in to the ClassiX machine, certain events can be triggered. These events can be inherited from the client, the user's cost center, or directly specified by the user. If a user is prohibited from opening the user editing mask, he can change the start settings here. ### Instruction: What is the name of the module being described? ### Response: The module being described is Startup settings."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Startup settings used for? ### Response: The module Startup settings is used for the following: When a user logs in to the ClassiX machine, certain events can be triggered. These events can be inherited from the client, the user's cost center, or directly specified by the user. If a user is prohibited from opening the user editing mask, he can change the start settings here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order Forecast Statistics: Using the incoming order statistics, the expected value of incoming orders can be calculated for a specific period. The statistics are created on the basis of the order/sales planning documents. The evaluation can be run over one or more statistical periods in a target/actual comparison. In the evaluation of a single period, the target sales volume is only derived from the documents that were posted to this statistical period. In a from-to period evaluation, only the last documents within the selected period are taken into account for linked (copied) documents. The statistics can be displayed with subtotals made per month or per year. ### Instruction: Tell me the name of this module. ### Response: The name of this module is Order Forecast Statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Order Forecast Statistics? ### Response: The module Order Forecast Statistics serves the purpose of the following: Using the incoming order statistics, the expected value of incoming orders can be calculated for a specific period. The statistics are created on the basis of the order/sales planning documents. The evaluation can be run over one or more statistical periods in a target/actual comparison. In the evaluation of a single period, the target sales volume is only derived from the documents that were posted to this statistical period. In a from-to period evaluation, only the last documents within the selected period are taken into account for linked (copied) documents. The statistics can be displayed with subtotals made per month or per year.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Assembly hours: An evaluation of all recorded assembly hours takes place. These can either all be displayed together in the results list or grouped by cost centre or order. With the grouping, total sums for duration and costs are displayed. By double-clicking on a line, a further window is opened in which all documents assigned to this group are displayed. ### Instruction: What is the name of the module being described? ### Response: The module being described is Assembly hours."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Assembly hours used for? ### Response: The module Assembly hours serves the purpose of the following: An evaluation of all recorded assembly hours takes place. These can either all be displayed together in the results list or grouped by cost centre or order. With the grouping, total sums for duration and costs are displayed. By double-clicking on a line, a further window is opened in which all documents assigned to this group are displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Statistics: Basic module of statistics. ### Instruction: Which module is being described? ### Response: This module is called Statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Statistics serve? ### Response: The module Statistics serves the purpose of the following: Basic module of statistics.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Offer items statistics: Using the offer position statistics, offer positions can be searched and evaluated using various filters. For example, all items that a customer has been offered can be displayed. ### Instruction: Which module is being described? ### Response: This module is called Offer items statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Offer items statistics. ### Response: The purpose of the module Offer items statistics is the following: Using the offer position statistics, offer positions can be searched and evaluated using various filters. For example, all items that a customer has been offered can be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order items statistics: Order items can be searched for and evaluated via various filters using the order item statistics. Thus, all items that a customer has ordered or all items that have been delivered but not invoiced can be displayed. ### Instruction: What is the name of the module being described? ### Response: This module is called Order items statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Order items statistics. ### Response: The purpose of the module Order items statistics is as follows: Order items can be searched for and evaluated via various filters using the order item statistics. Thus, all items that a customer has ordered or all items that have been delivered but not invoiced can be displayed.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Order intake statistics: With this module, the incoming orders can be output according to sales areas and period. However, only orders that are assigned to a sales area are processed. Orders without assignment to a sales area or orders assigned to the top structure level of sales areas are not output in these statistics. ### Instruction: Which module is being described? ### Response: This module is called Order intake statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Order intake statistics for me. ### Response: The purpose of the module Order intake statistics is as follows: With this module, the incoming orders can be output according to sales areas and period. However, only orders that are assigned to a sales area are processed. Orders without assignment to a sales area or orders assigned to the top structure level of sales areas are not output in these statistics.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of BDE hours: With this module, the production hours confirmed for a selected period can be output. By default these are output in the list type \"Workstations\" (see menu Options) and in total per cost centre (can be switched off via menu Options). A total sum is also displayed. (confirmations with time zero are generally suppressed) At least one financial year must be selected. If no further restriction of the period is made, all confirmations of this fiscal year are added up. If only one period is selected, then only the confirmations of this period are added up. By selecting the \"to\" period, any period within the fiscal year can be selected. By double-clicking on an entry in the list, the corresponding individual messages can be output (drill down). 1. list type workstations The columns - each as actual and target data - are output for cost centre, production area, work centre and resource. The column\"Actual hours\" shows the sum of all reported actual times of the actual resource of the selected period. The column\"Target hours\" shows the sum of all reported target times of the target resource of the selected period. Per PDC document (YYY) the target set-up time is added to the target time of the work sequence. The column\"Actual hours(completed)\" only shows the actual times of completedwork sequences. The column\"Actual hours(completed - not delimited)\" shows all actual times of completedwork sequences, the previous evaluation periods are taken into account. The column\"Target hours(completed - not delimited)\" shows all target times of completedwork sequences, the previous evaluation periods are taken into account. This\"Actual hours(finished - not delimited)\" value is compared with the column\"Target hours(finished - not delimited)\", the sum of the target times of completedwork sequences. This results in the percentage deviation which is displayed in the list. The target hours are always assigned to the first reported actual resource in order to obtain a pure comparison of the target/actual times and not an evaluation of changes of the target to actual resources. The column\"Target hours(finished - not delimited)\" can therefore even be empty, for example, if several confirmations come from different actual resources for a single work sequence. The target hours for the 2nd and all other resources are no longer assigned to them. The percentage deviation between target and actual hours (not delimited) is displayed in the column \"Deviation\". In the last two columns the valuation of the reported hours is shown with the costs of the respective actual work centre. \"Is time confirmation on target quantity\" means that a PDA recording is recorded with a confirmed time on a work sequence that was originally created in pieces. This can occur with external work sequences, as the external work sequences do not have target times but target quantities. If an ACTUAL time is now logged off here, this message is issued. 2. list type cost object The confirmed production hours are displayed cumulatively according to cost object, actual cost centre and actual resource. A valuation is carried out according to the cost rates of the actual resource. If the option Subtotal is activated, totals are output per cost object. ### Instruction: What is the name of the module being described? ### Response: The name of this module is BDE hours."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module BDE hours serve? ### Response: The module BDE hours serves the purpose of the following: With this module, the production hours confirmed for a selected period can be output. By default these are output in the list type \"Workstations\" (see menu Options) and in total per cost centre (can be switched off via menu Options). A total sum is also displayed. (confirmations with time zero are generally suppressed) At least one financial year must be selected. If no further restriction of the period is made, all confirmations of this fiscal year are added up. If only one period is selected, then only the confirmations of this period are added up. By selecting the \"to\" period, any period within the fiscal year can be selected. By double-clicking on an entry in the list, the corresponding individual messages can be output (drill down). 1. list type workstations The columns - each as actual and target data - are output for cost centre, production area, work centre and resource. The column\"Actual hours\" shows the sum of all reported actual times of the actual resource of the selected period. The column\"Target hours\" shows the sum of all reported target times of the target resource of the selected period. Per PDC document (YYY) the target set-up time is added to the target time of the work sequence. The column\"Actual hours(completed)\" only shows the actual times of completedwork sequences. The column\"Actual hours(completed - not delimited)\" shows all actual times of completedwork sequences, the previous evaluation periods are taken into account. The column\"Target hours(completed - not delimited)\" shows all target times of completedwork sequences, the previous evaluation periods are taken into account. This\"Actual hours(finished - not delimited)\" value is compared with the column\"Target hours(finished - not delimited)\", the sum of the target times of completedwork sequences. This results in the percentage deviation which is displayed in the list. The target hours are always assigned to the first reported actual resource in order to obtain a pure comparison of the target/actual times and not an evaluation of changes of the target to actual resources. The column\"Target hours(finished - not delimited)\" can therefore even be empty, for example, if several confirmations come from different actual resources for a single work sequence. The target hours for the 2nd and all other resources are no longer assigned to them. The percentage deviation between target and actual hours (not delimited) is displayed in the column \"Deviation\". In the last two columns the valuation of the reported hours is shown with the costs of the respective actual work centre. \"Is time confirmation on target quantity\" means that a PDA recording is recorded with a confirmed time on a work sequence that was originally created in pieces. This can occur with external work sequences, as the external work sequences do not have target times but target quantities. If an ACTUAL time is now logged off here, this message is issued. 2. list type cost object The confirmed production hours are displayed cumulatively according to cost object, actual cost centre and actual resource. A valuation is carried out according to the cost rates of the actual resource. If the option Subtotal is activated, totals are output per cost object.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Production planning orders: This list should be the basis for the coordination between sales and production and thus the starting point for the timely scheduling of sales orders in production. Furthermore, it offers the possibility to evaluate the commissioned, performed or still to be performed service of a production company as a whole (see option Performance). As a basis for this production planning, sales order items can be listed here by means of various global selection criteria (see Tabular parts, characteristics, other restrictions) or direct individual selection. The core data displayed includes customer, parts, quantity, price and date information for the individual items. In addition, the resource allocation (which can be switched on and off via an option) can be listed (also controllable via an option as target, actual and open times). Since by default a sorting according to the production date of the individual items with corresponding subtotals is carried out, a target, actual or still open debit of the production from sales orders is displayed, sorted by date. ### Instruction: What is the name of the module being described? ### Response: This module is Production planning orders."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Production planning orders used for? ### Response: The module Production planning orders can be described as follows: This list should be the basis for the coordination between sales and production and thus the starting point for the timely scheduling of sales orders in production. Furthermore, it offers the possibility to evaluate the commissioned, performed or still to be performed service of a production company as a whole (see option Performance). As a basis for this production planning, sales order items can be listed here by means of various global selection criteria (see Tabular parts, characteristics, other restrictions) or direct individual selection. The core data displayed includes customer, parts, quantity, price and date information for the individual items. In addition, the resource allocation (which can be switched on and off via an option) can be listed (also controllable via an option as target, actual and open times). Since by default a sorting according to the production date of the individual items with corresponding subtotals is carried out, a target, actual or still open debit of the production from sales orders is displayed, sorted by date.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Parts consumption: This app is used to display parts consumption. It shows which quantities of one or more parts have been consumed in an adjustable period of time. This app is intended as an aid for logistics. Related to this are the apps Parts Usage (intended for use by technology) and Parts Usage (intended for use by service/sales). If you generally want to evaluate the use or non-use of a part in a certain period, you can do this by means of an inspection run.In addition to the output of the list with the parts with consumption in the selected period, the complementary list with the parts without consumption in this period is always output in parallel. The following movements are referred to as part consumption:Goods receipts that have not been put away (MRP goods receipt)Production order items that have not been put away (dispositive production). Outsourcing The parts are selected by means of the part selection window, which opens after pressing the toolbar button or the \"Select parts\" button or simply dragged and dropped into the list. With drag&drop, parts rolls are also accepted.By selecting/restricting the staging types of the parts (MRP parts, stock parts, etc.), you can control which parts consumption (goods receipts, MRP production, stock removals) is taken into account in the evaluation. If, for example, only stock parts are selected (staging types: warehouse management, manual stock, remaining quantity, Kanban, own provision of stock), then the planned parts consumption is not included in the evaluation. As a side effect, the list of \"parts without consumption\" also provides a so-called list of slow-moving items. The total consumption of a part results from the sum of the above movements. The evaluation of the total consumption is done according to the following logic: If an incoming invoice has been issued for these goods in the selected period, the price is taken from this invoice and multiplied by the total sales quantity. If no incoming invoice has been created, the system searches for other documents and uses their price for the calculation. When posting the above-mentioned documents, they are entered in the parts transaction file in relation to goods receipt or production - each subdivided into year and month. The corresponding quantities are registered here. Thus, when creating the parts consumption, only the parts operation files of the individual document types have to be fetched and the quantities compiled from them. An exception to this is the removal from storage. Here the quantities are not collected in the parts procedure folder, but in the warehouse statistics. This can be accessed via the warehouse account of the part. A record is created in the list for each part and for each period with consumption, unless the part does not have an operation folder. (For more on this, see the options window)Parts without consumption are listed in the tab \"Parts without consumption\". A double click opens the stock movement window for the clicked period. Attention! Validity is not taken into account in part consumption, i.e. consumption across exchange objects is not displayed! Attention (only companies with separate client turnover)! If the option \"Split variant parts\" is set via the options window, the split display is incorrectly displayed for clients whose material logistics are not separated according to domains/company codes. The total sum of all variant part characteristics is displayed behind each characteristic of a variant part. This is also not possible to separate subsequently, as the conditions for this are defined solely in the transaction descriptions. (What is consumption of one company, what is consumption of the other?) Attention! If a part is marked as \"constructive assembly\", it is not displayed as \"consumption\"! From the dispo account , the parts consumption statistics can be accessed via the \"Parts consumption\" group. If this way is chosen, the consumption of the last 12 months is displayed in the list, whereby the displayed filter remains on the currently valid period. So if you simply use the \"Create statistics\" icon, only the current month will be displayed. The variant filter possibly transferred via the dispo account must also be taken into account: If the statistics from the MRP account were called up after double-clicking on the MRP list with split variants, the statistics will only display the turnovers of the transferred characteristic. To delete the filter, click on the toolbar button \"Reset list and delete variant filter \". ### Instruction: Which module is being described? ### Response: The module being described is Parts consumption."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Parts consumption for me. ### Response: The purpose of the module Parts consumption is the following: This app is used to display parts consumption. It shows which quantities of one or more parts have been consumed in an adjustable period of time. This app is intended as an aid for logistics. Related to this are the apps Parts Usage (intended for use by technology) and Parts Usage (intended for use by service/sales). If you generally want to evaluate the use or non-use of a part in a certain period, you can do this by means of an inspection run.In addition to the output of the list with the parts with consumption in the selected period, the complementary list with the parts without consumption in this period is always output in parallel. The following movements are referred to as part consumption:Goods receipts that have not been put away (MRP goods receipt)Production order items that have not been put away (dispositive production). Outsourcing The parts are selected by means of the part selection window, which opens after pressing the toolbar button or the \"Select parts\" button or simply dragged and dropped into the list. With drag&drop, parts rolls are also accepted.By selecting/restricting the staging types of the parts (MRP parts, stock parts, etc.), you can control which parts consumption (goods receipts, MRP production, stock removals) is taken into account in the evaluation. If, for example, only stock parts are selected (staging types: warehouse management, manual stock, remaining quantity, Kanban, own provision of stock), then the planned parts consumption is not included in the evaluation. As a side effect, the list of \"parts without consumption\" also provides a so-called list of slow-moving items. The total consumption of a part results from the sum of the above movements. The evaluation of the total consumption is done according to the following logic: If an incoming invoice has been issued for these goods in the selected period, the price is taken from this invoice and multiplied by the total sales quantity. If no incoming invoice has been created, the system searches for other documents and uses their price for the calculation. When posting the above-mentioned documents, they are entered in the parts transaction file in relation to goods receipt or production - each subdivided into year and month. The corresponding quantities are registered here. Thus, when creating the parts consumption, only the parts operation files of the individual document types have to be fetched and the quantities compiled from them. An exception to this is the removal from storage. Here the quantities are not collected in the parts procedure folder, but in the warehouse statistics. This can be accessed via the warehouse account of the part. A record is created in the list for each part and for each period with consumption, unless the part does not have an operation folder. (For more on this, see the options window)Parts without consumption are listed in the tab \"Parts without consumption\". A double click opens the stock movement window for the clicked period. Attention! Validity is not taken into account in part consumption, i.e. consumption across exchange objects is not displayed! Attention (only companies with separate client turnover)! If the option \"Split variant parts\" is set via the options window, the split display is incorrectly displayed for clients whose material logistics are not separated according to domains/company codes. The total sum of all variant part characteristics is displayed behind each characteristic of a variant part. This is also not possible to separate subsequently, as the conditions for this are defined solely in the transaction descriptions. (What is consumption of one company, what is consumption of the other?) Attention! If a part is marked as \"constructive assembly\", it is not displayed as \"consumption\"! From the dispo account , the parts consumption statistics can be accessed via the \"Parts consumption\" group. If this way is chosen, the consumption of the last 12 months is displayed in the list, whereby the displayed filter remains on the currently valid period. So if you simply use the \"Create statistics\" icon, only the current month will be displayed. The variant filter possibly transferred via the dispo account must also be taken into account: If the statistics from the MRP account were called up after double-clicking on the MRP list with split variants, the statistics will only display the turnovers of the transferred characteristic. To delete the filter, click on the toolbar button \"Reset list and delete variant filter \".."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Evaluation of order costs: This module is part of the final costing. The actual costs incurred for the sales orders can be listed according to the invoicing status (not invoiced/partially invoiced/invoiced) of the respective sales order and the stock orders can be listed according to the processing status (stored, provided, production order, etc.). The setting for the selection of the sales and stock orders are initialised so that the current \"Unfinished products\" are listed.The sales orders can also be listed together with the internal work orders assigned to them. Pre-selection by order type is also possible.All actual costs up to the selected accrual period are listed; a from - to periods list is also possible. Orders without costs can be hidden.IMPORTANT! Before calling up the job cost evaluation, the suppressed errors of the individual database operations must have been checked and corrected. Only in this way can the correct result be determined. Missing data in parts can lead to these not being taken into account in the order cost evaluation. Whether all documents assigned to the order have been posted can be checked with the context menu\"Display all successors\".If the order items are for a part with the staging type Kanban, no disposition, manual warehouse without main warehouse management or Kanban semi-finished product, the cost value on the order item is displayed in the ACTUAL costs column \"Warehouse purchased parts\".Orders are always assigned to a cost unit, i.e. the costs posted to an order are also posted to the cost unit and can be viewed via the cost unit totals list or the cost type evaluation per cost unit. However, it may well be that costs are only posted to cost units - without specifying an order - which is why there may be differences between the details of the costs in this order cost evaluation and those in the above-mentioned other cost unit lists. ### Instruction: How is this module called? ### Response: This module is called Evaluation of order costs."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Evaluation of order costs. ### Response: The module Evaluation of order costs can be described as follows: This module is part of the final costing. The actual costs incurred for the sales orders can be listed according to the invoicing status (not invoiced/partially invoiced/invoiced) of the respective sales order and the stock orders can be listed according to the processing status (stored, provided, production order, etc.). The setting for the selection of the sales and stock orders are initialised so that the current \"Unfinished products\" are listed.The sales orders can also be listed together with the internal work orders assigned to them. Pre-selection by order type is also possible.All actual costs up to the selected accrual period are listed; a from - to periods list is also possible. Orders without costs can be hidden.IMPORTANT! Before calling up the job cost evaluation, the suppressed errors of the individual database operations must have been checked and corrected. Only in this way can the correct result be determined. Missing data in parts can lead to these not being taken into account in the order cost evaluation. Whether all documents assigned to the order have been posted can be checked with the context menu\"Display all successors\".If the order items are for a part with the staging type Kanban, no disposition, manual warehouse without main warehouse management or Kanban semi-finished product, the cost value on the order item is displayed in the ACTUAL costs column \"Warehouse purchased parts\".Orders are always assigned to a cost unit, i.e. the costs posted to an order are also posted to the cost unit and can be viewed via the cost unit totals list or the cost type evaluation per cost unit. However, it may well be that costs are only posted to cost units - without specifying an order - which is why there may be differences between the details of the costs in this order cost evaluation and those in the above-mentioned other cost unit lists.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Status information: The progress of a document in a process is described by its status. However, since this assignment to a status is often not sufficient to obtain more detailed information about the process, the status can be described in more detail by this module. For example, the \"not delivered\" status of an order could be given the information why the status cannot/ has not yet been moved on. ### Instruction: How is this module called? ### Response: This module is named Status information."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Status information for me. ### Response: The module Status information is used for the following: The progress of a document in a process is described by its status. However, since this assignment to a status is often not sufficient to obtain more detailed information about the process, the status can be described in more detail by this module. For example, the \"not delivered\" status of an order could be given the information why the status cannot/ has not yet been moved on.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Logistics account: In these modules, the logistics data of the part masters are maintained or displayed, i.e. logistics part data (e.g. staging type, logistics indicator), warehouse account data (e.g. stock, storage unit) and disposition account data (e.g. sales order quantity, disposition unit). (see also Kanban) Minimum, maximum and reorder points can be maintained here. This module also enables the exchange and definition of the units with which the warehouse and the dispo account is to be managed as standard. The main storage location entered here is selected as the standard withdrawal warehouse in future goods withdrawal documents created. For more information see here. ### Instruction: What is the name of the module being described? ### Response: This module is Logistics account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Logistics account serve? ### Response: The purpose of the module Logistics account is as follows: In these modules, the logistics data of the part masters are maintained or displayed, i.e. logistics part data (e.g. staging type, logistics indicator), warehouse account data (e.g. stock, storage unit) and disposition account data (e.g. sales order quantity, disposition unit). (see also Kanban) Minimum, maximum and reorder points can be maintained here. This module also enables the exchange and definition of the units with which the warehouse and the dispo account is to be managed as standard. The main storage location entered here is selected as the standard withdrawal warehouse in future goods withdrawal documents created. For more information see here.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stock: Each warehouse must be created in the CyberEnterprise business OS. This describes a specific room, a specific building, which serves as a warehouse for parts. Within a warehouse, the individual storage locations must also be stored in the system as storage bins. In CyberEnterprise business OS, warehouses and their storage locations are not only textual information but describe accounts with their respective stock values. (see also the processing of a warehouse posting in an OLAP network from accounts).A warehouse can be assigned an administrator, an owner and/or a cost centre. The address of the manager is taken over as the address of the warehouse (as a copy). This address can be overwritten manually. In the 'Control' tab, the type of warehouse can be declared as a consignment warehouse, a customs warehouse or a manual warehouse. Such warehouse types can also be specified in more detail in the form of classification terms (see below). Furthermore, warehouses can be marked as non MRP if the stocks of these warehouses are not to be taken into account in MRP from requirement and stock lists. In addition to these indications, different classification keys can be assigned to a warehouse, e.g. in order to assign the warehouse to a storage type (e.g. in addition or optional to the above mentioned type indications), to a (total) storage area, etc. The classification keys can also be assigned to the storage type (see below). Once assigned, the classification terms can be supplemented with characteristics in order to optimally control warehouse management. In the standard system, the term \"storage type\" is predefined as a classification term for a warehouse with the identifier \"STORAGE_TYPE\". Sub-concepts for freely definable storage types are Block storage, open-air storage, high rack storage, picking warehouse, shelf storage, etc. The storage bins assigned to a warehouse can also be assigned to classification keys (see there classification key \"PICKING_ZONE\" for picking zones or storage areas); it is up to the internal organisation to find an optimal structure of the information for the company. By assigning warehouses to company codes, logistical control (e.g. specification of minimum stock levels) and stock monitoring can be further differentiated. If a company code has been assigned, the\"no disposition\" indicator should also be set. The identification as \"chaotic warehouse\" serves to have the system automatically allocate an empty storage bin when goods are received. In the tab 'Domains' it can be specified whether and to which domains the stock of parts in storage bins of this warehouse should be divided. (Not implemented in the standard system). ### Instruction: What is the name of this module? ### Response: The name of this module is Stock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Stock for me. ### Response: The purpose of the module Stock is the following: Each warehouse must be created in the CyberEnterprise business OS. This describes a specific room, a specific building, which serves as a warehouse for parts. Within a warehouse, the individual storage locations must also be stored in the system as storage bins. In CyberEnterprise business OS, warehouses and their storage locations are not only textual information but describe accounts with their respective stock values. (see also the processing of a warehouse posting in an OLAP network from accounts).A warehouse can be assigned an administrator, an owner and/or a cost centre. The address of the manager is taken over as the address of the warehouse (as a copy). This address can be overwritten manually. In the 'Control' tab, the type of warehouse can be declared as a consignment warehouse, a customs warehouse or a manual warehouse. Such warehouse types can also be specified in more detail in the form of classification terms (see below). Furthermore, warehouses can be marked as non MRP if the stocks of these warehouses are not to be taken into account in MRP from requirement and stock lists. In addition to these indications, different classification keys can be assigned to a warehouse, e.g. in order to assign the warehouse to a storage type (e.g. in addition or optional to the above mentioned type indications), to a (total) storage area, etc. The classification keys can also be assigned to the storage type (see below). Once assigned, the classification terms can be supplemented with characteristics in order to optimally control warehouse management. In the standard system, the term \"storage type\" is predefined as a classification term for a warehouse with the identifier \"STORAGE_TYPE\". Sub-concepts for freely definable storage types are Block storage, open-air storage, high rack storage, picking warehouse, shelf storage, etc. The storage bins assigned to a warehouse can also be assigned to classification keys (see there classification key \"PICKING_ZONE\" for picking zones or storage areas); it is up to the internal organisation to find an optimal structure of the information for the company. By assigning warehouses to company codes, logistical control (e.g. specification of minimum stock levels) and stock monitoring can be further differentiated. If a company code has been assigned, the\"no disposition\" indicator should also be set. The identification as \"chaotic warehouse\" serves to have the system automatically allocate an empty storage bin when goods are received. In the tab 'Domains' it can be specified whether and to which domains the stock of parts in storage bins of this warehouse should be divided. (Not implemented in the standard system)."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Storage: General Price formation on the positionStorage of excess quantities from customer ordersStorage of variant parts Cost centres Cost unit EvaluationInfluence of storage on the moving average price of the part Post CalculationMobile storage. ### Instruction: Tell me the name of this module. ### Response: This module is called Storage."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Storage for me. ### Response: The purpose of the module Storage is the following: General Price formation on the positionStorage of excess quantities from customer ordersStorage of variant parts Cost centres Cost unit EvaluationInfluence of storage on the moving average price of the part Post CalculationMobile storage."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stock order: Internal orders are most often created as stock orders in order to increase the production parts in stock. However, they are also used to order reproductions for sales order items or generally for cost objects/projects (work orders). ### Instruction: What is the name of this module? ### Response: The name of this module is Stock order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Stock order? ### Response: The module Stock order can be described as follows: Internal orders are most often created as stock orders in order to increase the production parts in stock. However, they are also used to order reproductions for sales order items or generally for cost objects/projects (work orders).."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Stock order? ### Response: The module Stock order can be described as follows: Internal orders are most often created as stock orders in order to increase the production parts in stock. However, they are also used to order reproductions for sales order items or generally for cost objects/projects (work orders).. ### Context: This is the description of Rework - Wizzard Window in Stock order: This window allows you to easily create the rework for a sales order item. All you need is the old number or running card of the old production order. The system uses this to determine all the necessary data. The following steps are performed : After carrying out the steps, the new production order is opened. ### Instruction: How is this window called? ### Response: This window is called Rework - Wizzard Window in Stock order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the window Rework - Wizzard Window in Stock order? ### Response: The purpose of the window Rework - Wizzard Window in Stock order is the following: This window allows you to easily create the rework for a sales order item. All you need is the old number or running card of the old production order. The system uses this to determine all the necessary data. The following steps are performed : After carrying out the steps, the new production order is opened.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Sequential test: In this window a sequential test can be carried out for inventory documents. ### Instruction: How is this module called? ### Response: The module being described is Sequential test."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Sequential test. ### Response: The module Sequential test is used for the following: In this window a sequential test can be carried out for inventory documents.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Storage location query: Serves for the extended input of data for the selection of storage bin objects. During the search, the data is linked additively (logical AND link). This selection window is particularly used in the context of a permanent inventory. Here it is important to have counted each storage bin at least once in the course of a fiscal year. It is therefore useful to have an overview of the storage bins with a small or zero stock (the \"count\" can then be carried out very quickly) and which have not yet been counted in the current fiscal year. ### Instruction: Tell me the name of this module. ### Response: This module is named Storage location query."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Storage location query? ### Response: The module Storage location query is used for the following: Serves for the extended input of data for the selection of storage bin objects. During the search, the data is linked additively (logical AND link). This selection window is particularly used in the context of a permanent inventory. Here it is important to have counted each storage bin at least once in the course of a fiscal year. It is therefore useful to have an overview of the storage bins with a small or zero stock (the \"count\" can then be carried out very quickly) and which have not yet been counted in the current fiscal year.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stock statistics: This statistic is used for the overview and evaluation of warehouse stocks. It is called up by selecting parts and/or warehouses and by selecting the evaluation period(s). In addition, the currency for stock valuation can be specified; a prerequisite for this is a validly registered currency table.An evaluation of the data of all parts of a client for a certain period results in the opening or closing stock value of the fixed assets tied up in the warehouse and is thus part of the monthly statement.A warehouse statistic for ALL parts, i.e. also dispositive parts that are temporarily stored in a storage bin, can simply be carried out without pre-selection of parts. To do this, simply open the warehouse statistics, set the statistics period to be closed and select the menu item \"Month-end closing\" directly. For all parts found in this query, the warehouse accounts are searched for and these are saved in a collection at the user object of the logged-in user. If this user calls up the warehouse statistics again with this option (all parts without preselection) at a later time on the same day, all parts and their warehouse accounts are not searched for again, but the objects saved from the user are used again for the next run. This speeds up the month-end closing process enormously if it had to be interrupted at a certain point.General note: The module can only be called up if financial years and periods are defined in the system.Notes on month-end closing in this module: If receipts without price/value were found during the month-end closing, they are displayed as failed after the month-end closing. The prices/values can then be entered in this result window. When prices/values are added to documents at the end of the month, a note is displayed if the warehouse part does not have an average price and this should be added to the logistics account. If the average price has been entered in the logistics account, this average price can be transferred to all documents without price/value by means of the transfer button (i.e. enter the average price per part in the logistics account and then press the transfer button). Search run (Services->Inspection->Materials management tab \"Stock account\") for stocked parts without average price with the option to set average prices for these from the roles (according to the set logistics indicator). If this run is executed again and again (read transaction), then fewer and fewer documents without valuation are created, which then have to be corrected at the end of the monthIMPORTANT! Before closing the warehouse statistics, the batch run errors of the individual database operations must have been checked and corrected. Only in this way can the correct result be determined. ### Instruction: Tell me the name of this module. ### Response: This module is named Stock statistics."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Stock statistics used for? ### Response: The purpose of the module Stock statistics is the following: This statistic is used for the overview and evaluation of warehouse stocks. It is called up by selecting parts and/or warehouses and by selecting the evaluation period(s). In addition, the currency for stock valuation can be specified; a prerequisite for this is a validly registered currency table.An evaluation of the data of all parts of a client for a certain period results in the opening or closing stock value of the fixed assets tied up in the warehouse and is thus part of the monthly statement.A warehouse statistic for ALL parts, i.e. also dispositive parts that are temporarily stored in a storage bin, can simply be carried out without pre-selection of parts. To do this, simply open the warehouse statistics, set the statistics period to be closed and select the menu item \"Month-end closing\" directly. For all parts found in this query, the warehouse accounts are searched for and these are saved in a collection at the user object of the logged-in user. If this user calls up the warehouse statistics again with this option (all parts without preselection) at a later time on the same day, all parts and their warehouse accounts are not searched for again, but the objects saved from the user are used again for the next run. This speeds up the month-end closing process enormously if it had to be interrupted at a certain point.General note: The module can only be called up if financial years and periods are defined in the system.Notes on month-end closing in this module: If receipts without price/value were found during the month-end closing, they are displayed as failed after the month-end closing. The prices/values can then be entered in this result window. When prices/values are added to documents at the end of the month, a note is displayed if the warehouse part does not have an average price and this should be added to the logistics account. If the average price has been entered in the logistics account, this average price can be transferred to all documents without price/value by means of the transfer button (i.e. enter the average price per part in the logistics account and then press the transfer button). Search run (Services->Inspection->Materials management tab \"Stock account\") for stocked parts without average price with the option to set average prices for these from the roles (according to the set logistics indicator). If this run is executed again and again (read transaction), then fewer and fewer documents without valuation are created, which then have to be corrected at the end of the monthIMPORTANT! Before closing the warehouse statistics, the batch run errors of the individual database operations must have been checked and corrected. Only in this way can the correct result be determined.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Goods transfer: You can transfer goods from one storage bin to another. The storage bins do not have to be in the same warehouse.When a stock transfer document is posted, a data field \"switched.quantity\" is written to the \"source warehouse\" on the corresponding warehouse statistics month under the following conditions:Source warehouse is the warehouse of the main client and warehouse is dispositive (check mark \"no disposition\" is NOT set)AND( Part is manual warehouse part OR target warehouse is not warehouse of main client OR target warehouse is not dispositional (check mark \"no disposition\" ACTUALLY set)This quantity (switched.quantity) is used for the safety stock calculation (spare parts business). ### Instruction: Name this module. ### Response: This module is Goods transfer."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Goods transfer serve? ### Response: The module Goods transfer serves the purpose of the following: You can transfer goods from one storage bin to another. The storage bins do not have to be in the same warehouse.When a stock transfer document is posted, a data field \"switched.quantity\" is written to the \"source warehouse\" on the corresponding warehouse statistics month under the following conditions:Source warehouse is the warehouse of the main client and warehouse is dispositive (check mark \"no disposition\" is NOT set)AND( Part is manual warehouse part OR target warehouse is not warehouse of main client OR target warehouse is not dispositional (check mark \"no disposition\" ACTUALLY set)This quantity (switched.quantity) is used for the safety stock calculation (spare parts business).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stock movements to be carried out: With this module, all types of stock movements still to be processed (stock placements, stock removals and stock transfers) can be listed at a glance. In particular, this module is used within the framework of the creation of transfer orders. ### Instruction: Name this module. ### Response: The name of this module is Stock movements to be carried out."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Stock movements to be carried out serve? ### Response: The purpose of the module Stock movements to be carried out is as follows: With this module, all types of stock movements still to be processed (stock placements, stock removals and stock transfers) can be listed at a glance. In particular, this module is used within the framework of the creation of transfer orders.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Outsourcing: Goods withdrawal or provision (warehouse)The goods withdrawal documents count up a consumption value \"consumed.quantity\" in the warehouse statistics if the following condition is met:Source warehouse is the warehouse of the main client and warehouse is dispositive (check mark \"no disposition\" is NOT set)This quantity (consumed.quantity) is used for the safety stock calculation (spare parts business). ### Instruction: What is the name of the module being described? ### Response: This module is Outsourcing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Outsourcing used for? ### Response: The module Outsourcing can be described as follows: Goods withdrawal or provision (warehouse)The goods withdrawal documents count up a consumption value \"consumed.quantity\" in the warehouse statistics if the following condition is met:Source warehouse is the warehouse of the main client and warehouse is dispositive (check mark \"no disposition\" is NOT set)This quantity (consumed.quantity) is used for the safety stock calculation (spare parts business).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Warehouse movements (mobile): This window allows to process and post a storage, retrieval, stock transfer document as well as an inventory document (counting list) by means of a mobile barcode scanner and the printout of the document. ### Instruction: How is this module called? ### Response: The name of this module is Warehouse movements (mobile)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Warehouse movements (mobile) for me. ### Response: The module Warehouse movements (mobile) can be described as follows: This window allows to process and post a storage, retrieval, stock transfer document as well as an inventory document (counting list) by means of a mobile barcode scanner and the printout of the document.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Storage aids: ... ### Instruction: Name this module. ### Response: This module is named Storage aids."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Storage aids? ### Response: The purpose of the module Storage aids is the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Warehouse Transport order: Module for maintaining transfer orders in a warehouse. ### Instruction: What is the name of this module? ### Response: This module is Warehouse Transport order."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Warehouse Transport order used for? ### Response: The purpose of the module Warehouse Transport order is the following: Module for maintaining transfer orders in a warehouse.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Stock level display: In this module all stocks of a part or a storage location are displayed. In the upper part of the display you can see the dispositive stock on the left and the total stock of the part on the right. The dispositive stock of a part is the stock which is stored in warehouses with stock disposition. It can be reserved for future requirements. The total stock also includes the parts that are available, for example, for employees in manual vehicle warehouses, but which cannot be reserved for order requirements. The manual warehouses are not managed in stock, but have an imputed stock for valuation purposes that is determined by an inventory. If warehouses are assigned to company codes and parts have been posted to warehouses assigned in this way, the stocks in the selected company codes can be displayed. In the respective listings, the stocks in the individual storage bins where the parts are stored are displayed. If at some point a part is posted to a storage bin, a separate line for this storage bin is created in this display. The stock can also be called up via a storage location in order to see which parts are stored here and in what quantities. Furthermore, it is possible to drop parts and storage bins into the display list in order to display their stocks. With this module it is also possible to display the serial numbers available at a storage location. ### Instruction: Tell me the name of this module. ### Response: The module being described is Stock level display."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Stock level display. ### Response: The purpose of the module Stock level display is the following: In this module all stocks of a part or a storage location are displayed. In the upper part of the display you can see the dispositive stock on the left and the total stock of the part on the right. The dispositive stock of a part is the stock which is stored in warehouses with stock disposition. It can be reserved for future requirements. The total stock also includes the parts that are available, for example, for employees in manual vehicle warehouses, but which cannot be reserved for order requirements. The manual warehouses are not managed in stock, but have an imputed stock for valuation purposes that is determined by an inventory. If warehouses are assigned to company codes and parts have been posted to warehouses assigned in this way, the stocks in the selected company codes can be displayed. In the respective listings, the stocks in the individual storage bins where the parts are stored are displayed. If at some point a part is posted to a storage bin, a separate line for this storage bin is created in this display. The stock can also be called up via a storage location in order to see which parts are stored here and in what quantities. Furthermore, it is possible to drop parts and storage bins into the display list in order to display their stocks. With this module it is also possible to display the serial numbers available at a storage location.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Supplier agreement (AppsWarehouse modules): Supplier agreements hold suppliers specific data of an order item, such as a negotiated price, a separate order number or order text or the replenishment lead time and order quantity. The main supplier is also maintained in the supplier agreement. The Supplier Agreement shall also specify whether and which parts must be provided to the Supplier when ordering this part of the order. It should be noted here that the logistics code of the part must be changed to \"Order part with own provision\". This supply agreement must then also be entered in the logistics account in the list of the suppliers providing the parts. See here for more information. Via the list window you can get an overview of existing supplier agreements, for the purpose of electronic exchange you can export and re-import supplier agreements and you can compare the agreed price with the last incoming invoice price. ### Instruction: What is the name of this module? ### Response: The module being described is Supplier agreement (AppsWarehouse modules)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Supplier agreement (AppsWarehouse modules) used for? ### Response: The purpose of the module Supplier agreement (AppsWarehouse modules) is the following: Supplier agreements hold suppliers specific data of an order item, such as a negotiated price, a separate order number or order text or the replenishment lead time and order quantity. The main supplier is also maintained in the supplier agreement. The Supplier Agreement shall also specify whether and which parts must be provided to the Supplier when ordering this part of the order. It should be noted here that the logistics code of the part must be changed to \"Order part with own provision\". This supply agreement must then also be entered in the logistics account in the list of the suppliers providing the parts. See here for more information. Via the list window you can get an overview of existing supplier agreements, for the purpose of electronic exchange you can export and re-import supplier agreements and you can compare the agreed price with the last incoming invoice price.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Supplier declaration: This app is an important component in the creation of enquiries for supplier declarations. The starting point is the listing of supplier-order item combinations, which can therefore - in addition to the enquiry with the supplier regarding the origin - also be used for mass maintenance of this data.Here you will find the entire process description for requesting supplier declarations. ### Instruction: What is the name of the module being described? ### Response: This module is named Supplier declaration."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Supplier declaration? ### Response: The purpose of the module Supplier declaration is the following: This app is an important component in the creation of enquiries for supplier declarations. The starting point is the listing of supplier-order item combinations, which can therefore - in addition to the enquiry with the supplier regarding the origin - also be used for mass maintenance of this data.Here you will find the entire process description for requesting supplier declarations.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Synchronisation of databases: With this module objects can be exported or imported as XML files. ### Instruction: How is this module called? ### Response: This module is named Synchronisation of databases."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Synchronisation of databases. ### Response: The purpose of the module Synchronisation of databases is the following: With this module objects can be exported or imported as XML files.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Own system messages: System messages are automatically created with reference to a predecessor. In the discontinued parts Auditor and Mandates in the logistics area, it can be set that events automatically create system messages. The basic settings for automatically receiving messages are made in the Mandate. These settings can be inherited by the user directly or via an account. If enabled by the user, this must be enabled in the user in the \"Start Script\" tab. Checking the machine messages For automatic reception of messages by the user, this must be activated in the user in the \"Start Script\" tab. Checking the system messages. ### Instruction: Name this module. ### Response: The module being described is Own system messages."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Own system messages. ### Response: The purpose of the module Own system messages is as follows: System messages are automatically created with reference to a predecessor. In the discontinued parts Auditor and Mandates in the logistics area, it can be set that events automatically create system messages. The basic settings for automatically receiving messages are made in the Mandate. These settings can be inherited by the user directly or via an account. If enabled by the user, this must be enabled in the user in the \"Start Script\" tab. Checking the machine messages For automatic reception of messages by the user, this must be activated in the user in the \"Start Script\" tab. Checking the system messages."
    },
    {
        "input": "",
        "output": "### Context: This is the description of TAPI Interface: The TAPI interface of the CyberEnterprise business OS provides access to TAPI-enabled communication devices, e.g. telephones or ISDN cards. Thus, it is possible to make phone calls directly from CyberEnterprise (with ISDN cards together with a sound card). The module itself offers all telephone functions: You can dial via the dialling field or the keypad, the call is then initiated by pressing the corresponding buttons. Calls can be put on hold and the acceptance of incoming calls can be activated. In this case the module is automatically activated and comes to the foreground. If a phone number is transmitted, it is searched for in the CyberEnterprise business OS and - if found - the corresponding contact is displayed. In addition, the telephone module can be called directly from any telephone number anywhere in the CyberEnterprise business OS. In this case, the transmitted telephone number is taken over directly and the corresponding contact is displayed. Starting from a contact displayed in the telephone module, a transaction document with the type \"telephone call\" and the contact as recipient can then be created directly to archive the business communication. ### Instruction: What is the name of the module being described? ### Response: This module is called TAPI Interface."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module TAPI Interface serve? ### Response: The module TAPI Interface serves the purpose of the following: The TAPI interface of the CyberEnterprise business OS provides access to TAPI-enabled communication devices, e.g. telephones or ISDN cards. Thus, it is possible to make phone calls directly from CyberEnterprise (with ISDN cards together with a sound card). The module itself offers all telephone functions: You can dial via the dialling field or the keypad, the call is then initiated by pressing the corresponding buttons. Calls can be put on hold and the acceptance of incoming calls can be activated. In this case the module is automatically activated and comes to the foreground. If a phone number is transmitted, it is searched for in the CyberEnterprise business OS and - if found - the corresponding contact is displayed. In addition, the telephone module can be called directly from any telephone number anywhere in the CyberEnterprise business OS. In this case, the transmitted telephone number is taken over directly and the corresponding contact is displayed. Starting from a contact displayed in the telephone module, a transaction document with the type \"telephone call\" and the contact as recipient can then be created directly to archive the business communication.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Work orders: Besides digital circulars (= notification) and requests (= planning), work orders (= processing) are the third pillar for the execution of tasks. Work orders are used to reserve time capacities of employees for a project. They can be created as follow-up documents for groups of service providers, or on their own without a connection to a cost unit. The (reserved) times entered via the work orders then appear in the capacity utilisation of the employee or his work group specified there, provided that it was also specified on the document. ### Instruction: Name this module. ### Response: The module being described is Work orders."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Work orders. ### Response: The module Work orders serves the purpose of the following: Besides digital circulars (= notification) and requests (= planning), work orders (= processing) are the third pillar for the execution of tasks. Work orders are used to reserve time capacities of employees for a project. They can be created as follow-up documents for groups of service providers, or on their own without a connection to a cost unit. The (reserved) times entered via the work orders then appear in the capacity utilisation of the employee or his work group specified there, provided that it was also specified on the document.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Tax rate: This module is used to manage (fiscal) tax rates. You can create any number of tax rates. In addition to financial accounting, the tax rates are also used for the creation of offers, orders and invoices (order management), as well as for orders (ordering). They must therefore always be created. By specifying a tax type, the type of a tax key is specified in more detail, such as input tax or value-added tax with indication whether reduced, etc. A tax rate is also described by its use, which corresponds directly to the field \"tax type\" (national/EU/foreigner, etc.) in partner master data. This information makes it possible to automatically suggest the correct tax rate for quotations, orders and invoices (order management), as well as for orders (ordering). The proposed tax key also takes into account the validity of the tax key in the regions/countries. ### Instruction: Name this module. ### Response: This module is Tax rate."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Tax rate used for? ### Response: The purpose of the module Tax rate is as follows: This module is used to manage (fiscal) tax rates. You can create any number of tax rates. In addition to financial accounting, the tax rates are also used for the creation of offers, orders and invoices (order management), as well as for orders (ordering). They must therefore always be created. By specifying a tax type, the type of a tax key is specified in more detail, such as input tax or value-added tax with indication whether reduced, etc. A tax rate is also described by its use, which corresponds directly to the field \"tax type\" (national/EU/foreigner, etc.) in partner master data. This information makes it possible to automatically suggest the correct tax rate for quotations, orders and invoices (order management), as well as for orders (ordering). The proposed tax key also takes into account the validity of the tax key in the regions/countries.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of TCP IP connection: ... ### Instruction: Tell me the name of this module. ### Response: The name of this module is TCP IP connection."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module TCP IP connection for me. ### Response: The module TCP IP connection is used for the following: ...."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Telecommunications: Input window for telecommunication objects. Telecommunications objects can be objects of the type telephone, fax, mobile phone, e-mail address, www Internet address, etc. Telecommunications objects are assigned to other business objects, whereby a telecommunications object can be assigned as often as desired (see list window Owner). ### Instruction: Tell me the name of this module. ### Response: The module being described is Telecommunications."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Telecommunications serve? ### Response: The module Telecommunications serves the purpose of the following: Input window for telecommunication objects. Telecommunications objects can be objects of the type telephone, fax, mobile phone, e-mail address, www Internet address, etc. Telecommunications objects are assigned to other business objects, whereby a telecommunications object can be assigned as often as desired (see list window Owner).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Phone list: This module is used to list telephone numbers and any other telecommunication addresses such as e-mail and WWW. ### Instruction: How is this module called? ### Response: This module is Phone list."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Phone list serve? ### Response: The module Phone list is used for the following: This module is used to list telephone numbers and any other telecommunication addresses such as e-mail and WWW.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inspection Bill of material or work plan: Testing of the bill of material and routing breakdowns.FeaturesSince there are conditional BOM and routing items, characteristics must be specified to test the explosion. This is what the feature list in the test window is for.With the buttons above the list you can insert or create characteristics or transfer them from master data:buttonDescriptionTake overCharacteristics in the list are deleted (if they exist) and overwritten by copies of characteristics from the master data. When you click on this button, a small menu appears in which you can select where the features are to be taken from: From master data: The characteristics of the parts list/routing and all allocated parts are taken over into the list. From standard: The characteristics that were last saved as standard are restored. If a standard state has never been saved (see button \"As standard\" here below), the data from the master data (as described above) is automatically pulled.As standardThe currently set features are saved as default. These can be restored at any time (see \"Apply\") if the test characteristics have been changed by various tests and, for example, the conditional positions no longer produce a result.InsertOpens the list of all features that can be inserted from hereRemoveDeletes the currently selected attribute from the listTo be observed:Each change to a test feature is saved. The next time the test window is called up, the features are displayed exactly as they were set the last time.If, however, they are to be restored to the default settings, they must be restored by pressing the \"Redetermine\" button and then using the menu item \"From default\", which opens when the button is pressed.If all the characteristics are set correctly, the parts list or work plan can be exploded by pressing the \"Test\" button. ### Instruction: Tell me the name of this module. ### Response: This module is Inspection Bill of material or work plan."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Inspection Bill of material or work plan? ### Response: The module Inspection Bill of material or work plan can be described as follows: Testing of the bill of material and routing breakdowns.FeaturesSince there are conditional BOM and routing items, characteristics must be specified to test the explosion. This is what the feature list in the test window is for.With the buttons above the list you can insert or create characteristics or transfer them from master data:buttonDescriptionTake overCharacteristics in the list are deleted (if they exist) and overwritten by copies of characteristics from the master data. When you click on this button, a small menu appears in which you can select where the features are to be taken from: From master data: The characteristics of the parts list/routing and all allocated parts are taken over into the list. From standard: The characteristics that were last saved as standard are restored. If a standard state has never been saved (see button \"As standard\" here below), the data from the master data (as described above) is automatically pulled.As standardThe currently set features are saved as default. These can be restored at any time (see \"Apply\") if the test characteristics have been changed by various tests and, for example, the conditional positions no longer produce a result.InsertOpens the list of all features that can be inserted from hereRemoveDeletes the currently selected attribute from the listTo be observed:Each change to a test feature is saved. The next time the test window is called up, the features are displayed exactly as they were set the last time.If, however, they are to be restored to the default settings, they must be restored by pressing the \"Redetermine\" button and then using the menu item \"From default\", which opens when the button is pressed.If all the characteristics are set correctly, the parts list or work plan can be exploded by pressing the \"Test\" button.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Testing Attributes: You can test any formulas or conditional tables. Objects of the classes CX_FORMULA and CX_CONDITIONED_BAG can use the function GetInputVarNames() to determine the variables on which their calculated value depends. In case of a formula in the formula (or a condition table: CX_CONDITIONED_BAG) this function calls itself recursively. The module Test formula constructs an input window with this information, with which formulas/condition tables can be tested. The variables are not known a priori - and this also applies to their type, which determines which window object is suitable as input field. InstantView® provides an object Auto, which transforms itself with each FillWindow instruction into a surface object matching the data type. With statement Rename the binding of a window object to the data of a business object can be redefined. The Show and Hide statements ensure that only the used window objects are visible and that widgets that are not required are hidden. Finally, the GetPosition/Move pair moves the result line to the position below the last input field. Here an instance of the class CX_CONTAINER is used as an object for the input data - an object whose only function is to hold dynamic data fields. In a real application the formula gains its meaning in the context of the current processing step. This context is created programmatically by registering all objects containing values for the formula calculation/table evaluation in the PlugSpace (with the statement of the same name). In this simple example only the object CX_CONTAINER is placed in the PlugSpace. ### Instruction: How is this module called? ### Response: The module being described is Testing Attributes."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Testing Attributes serve? ### Response: The module Testing Attributes serves the purpose of the following: You can test any formulas or conditional tables. Objects of the classes CX_FORMULA and CX_CONDITIONED_BAG can use the function GetInputVarNames() to determine the variables on which their calculated value depends. In case of a formula in the formula (or a condition table: CX_CONDITIONED_BAG) this function calls itself recursively. The module Test formula constructs an input window with this information, with which formulas/condition tables can be tested. The variables are not known a priori - and this also applies to their type, which determines which window object is suitable as input field. InstantView® provides an object Auto, which transforms itself with each FillWindow instruction into a surface object matching the data type. With statement Rename the binding of a window object to the data of a business object can be redefined. The Show and Hide statements ensure that only the used window objects are visible and that widgets that are not required are hidden. Finally, the GetPosition/Move pair moves the result line to the position below the last input field. Here an instance of the class CX_CONTAINER is used as an object for the input data - an object whose only function is to hold dynamic data fields. In a real application the formula gains its meaning in the context of the current processing step. This context is created programmatically by registering all objects containing values for the formula calculation/table evaluation in the PlugSpace (with the statement of the same name). In this simple example only the object CX_CONTAINER is placed in the PlugSpace.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Test the formula: Testing of calculation formulas. ### Instruction: Name this module. ### Response: This module is called Test the formula."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Test the formula used for? ### Response: The purpose of the module Test the formula is as follows: Testing of calculation formulas.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Absenteeism accounting: This app compares the planned and absent times of employees within the ClassiX Personnel Time Management and - if the option is set accordingly - the payroll period is stored as the last completed payroll period for the respective employee. ### Instruction: Which module is being described? ### Response: The module being described is Absenteeism accounting."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Absenteeism accounting? ### Response: The module Absenteeism accounting serves the purpose of the following: This app compares the planned and absent times of employees within the ClassiX Personnel Time Management and - if the option is set accordingly - the payroll period is stored as the last completed payroll period for the respective employee.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Tool (module): Tools are defined in the CyberEnterprise® enterprise model as a part role. This means that tools can also have other parts roles, such as order or production roles, or be managed as assets in the asset master. They can also be kept in stock. The part assigned to a tool is called equipment and is also managed separately in the parts master. In contrast, in the CyberEnterprise® Enterprise Model, machines and vehicles(cars and trucks) are considered as special characteristics of parts themselves. ### Instruction: What is the name of this module? ### Response: This module is named Tool (module)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Tool (module)? ### Response: The purpose of the module Tool (module) is the following: Tools are defined in the CyberEnterprise® enterprise model as a part role. This means that tools can also have other parts roles, such as order or production roles, or be managed as assets in the asset master. They can also be kept in stock. The part assigned to a tool is called equipment and is also managed separately in the parts master. In contrast, in the CyberEnterprise® Enterprise Model, machines and vehicles(cars and trucks) are considered as special characteristics of parts themselves.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of TRUCK: In the CyberEnterprise® Enterprise Model, vehicles are treated as a special form of parts, i.e. according to the terminology of object orientation, vehicles are also said to be derived from parts and vehicles are inherited from parts. Another specialisation of vehicles are trucks and cars. Vehicles are maintained in the CyberEnterprise® enterprise model as part of a company's vehicle fleet. For example, an assignment to a truck is stored in the route plan of a delivery. ### Instruction: Tell me the name of this module. ### Response: The module being described is TRUCK."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module TRUCK for me. ### Response: The module TRUCK is used for the following: In the CyberEnterprise® Enterprise Model, vehicles are treated as a special form of parts, i.e. according to the terminology of object orientation, vehicles are also said to be derived from parts and vehicles are inherited from parts. Another specialisation of vehicles are trucks and cars. Vehicles are maintained in the CyberEnterprise® enterprise model as part of a company's vehicle fleet. For example, an assignment to a truck is stored in the route plan of a delivery.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Document history: The document history provides an overview of a transaction and the order of its subsequent documents. This enables a chronological overview which shows the chronological sequence of the individual transactions. Each document can be opened by double-clicking on it, or selected by single click. The possibility of displaying associations and transaction documents of the header document and the documents under items means that no important documents are lost in documents with different versions and levels just because they were linked incorrectly. {img type=\"fileId\" fileId=\"438\" thumb=\"box\" width=\"100%\"} Booked in: The list \"Posted in\" shows all monitors, states and accounts in which the currently selected document is posted. If a state is selected in this list, the graphical process history can be called up via the context menu. This shows which states in the assigned business process (workflow) this document has already passed through and which are still to come. This information is taken from the context of the document and interpreted. If, for example, the part is a part that must be inspected by master definition via a QA document after goods receipt, this QA step is also displayed in the open states. More on this topic in the documentation of process routes. associations: For each document, it is possible to link it with documents from the document master, local documents and, in the case of quotations/orders (+items), also operations. This is controlled via the context menu on the \"Associations\" list. There are three options to choose from here:Transaction: A transaction is created for the document and linked to it. For offers/orders, this document is automatically registered in the activity folder of the cost unit (project). The subject line of the created transaction is provided with the item number and supplemented by the internal database address of the item.(This is required so that a possible recipient of a mail created in this way can dragthis mail onto the ClassiX® background and the corresponding item opens immediately. This way the recipient knows immediately which position it is about and does not have to search for a long time (not implemented yet!!!)). For more information, please refer to the transaction document. Document (local): A document is simply attached to the document object and copied into the database. This copy of the document cannot be used for any other document and must be copied into the database again. In this way the same documents are created several times in the database. Document master (global): Via this menu item it is possible to create document copies or to use previously created copies for this document as well. For more information, please refer to the document master. With the help of the two buttons 'Fold all in (or out)' the whole tree can be viewed or folded up again. ### Instruction: Name this module. ### Response: The module being described is Document history."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Document history serve? ### Response: The module Document history serves the purpose of the following: The document history provides an overview of a transaction and the order of its subsequent documents. This enables a chronological overview which shows the chronological sequence of the individual transactions. Each document can be opened by double-clicking on it, or selected by single click. The possibility of displaying associations and transaction documents of the header document and the documents under items means that no important documents are lost in documents with different versions and levels just because they were linked incorrectly. {img type=\"fileId\" fileId=\"438\" thumb=\"box\" width=\"100%\"} Booked in: The list \"Posted in\" shows all monitors, states and accounts in which the currently selected document is posted. If a state is selected in this list, the graphical process history can be called up via the context menu. This shows which states in the assigned business process (workflow) this document has already passed through and which are still to come. This information is taken from the context of the document and interpreted. If, for example, the part is a part that must be inspected by master definition via a QA document after goods receipt, this QA step is also displayed in the open states. More on this topic in the documentation of process routes. associations: For each document, it is possible to link it with documents from the document master, local documents and, in the case of quotations/orders (+items), also operations. This is controlled via the context menu on the \"Associations\" list. There are three options to choose from here:Transaction: A transaction is created for the document and linked to it. For offers/orders, this document is automatically registered in the activity folder of the cost unit (project). The subject line of the created transaction is provided with the item number and supplemented by the internal database address of the item.(This is required so that a possible recipient of a mail created in this way can dragthis mail onto the ClassiX® background and the corresponding item opens immediately. This way the recipient knows immediately which position it is about and does not have to search for a long time (not implemented yet!!!)). For more information, please refer to the transaction document. Document (local): A document is simply attached to the document object and copied into the database. This copy of the document cannot be used for any other document and must be copied into the database again. In this way the same documents are created several times in the database. Document master (global): Via this menu item it is possible to create document copies or to use previously created copies for this document as well. For more information, please refer to the document master. With the help of the two buttons 'Fold all in (or out)' the whole tree can be viewed or folded up again.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Automatic creation of collective invoices: In ClassiX® there are different possibilities to create invoices. An invoice can be created automatically from an order via quick invoicing, from a delivery note or manually via the invoice mask. All modules have their advantages and use cases. This module can be used to invoice delivered but not invoiced goods. Since the search is carried out across orders, collective invoices can also be created in this way. Calling up the list searches for the order items which have the status \"delivered\" or \"partially delivered\" and are in parallel \"not invoiced\" or \"partially invoiced\". In addition there must be an open quantity to be invoiced. (Delivered quantity - invoiced quantities = open quantity) If all order items are displayed, they are automatically sorted and displayed to the customer. The items which are not to be invoiced can now be removed from the list. If a customer is selected and removed, all his items are removed from the list. If the list is complete, invoices can be created automatically on the basis of the items. Various options are available for this. ### Instruction: How is this module called? ### Response: This module is called Automatic creation of collective invoices."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Automatic creation of collective invoices. ### Response: The module Automatic creation of collective invoices can be described as follows: In ClassiX® there are different possibilities to create invoices. An invoice can be created automatically from an order via quick invoicing, from a delivery note or manually via the invoice mask. All modules have their advantages and use cases. This module can be used to invoice delivered but not invoiced goods. Since the search is carried out across orders, collective invoices can also be created in this way. Calling up the list searches for the order items which have the status \"delivered\" or \"partially delivered\" and are in parallel \"not invoiced\" or \"partially invoiced\". In addition there must be an open quantity to be invoiced. (Delivered quantity - invoiced quantities = open quantity) If all order items are displayed, they are automatically sorted and displayed to the customer. The items which are not to be invoiced can now be removed from the list. If a customer is selected and removed, all his items are removed from the list. If the list is complete, invoices can be created automatically on the basis of the items. Various options are available for this.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Unit calculator: With this app, calculations with units can be performed quickly and easily. Expressions - as exemplified in the following table - can be entered directly into the input field. InputResultComment5.32kg - 640g4,68kgThe result is automatically normalised to the unit of the first value.640g - 5.32kg-4,680gSame calculation as above, but in reverse order.0g + 5.32kg - 640g4,680gInserting a zero value with the unit you want in the result.3m + 5sErrorMetres and seconds cannot be added.35,50€ + 24,00$55,29381443€ (as of 10.6.2021)For units with variable conversion, a conversion table must be registered in the system. In the standard system, the EUROFX currency table of the European Central Bank is registered on a daily basis.5Packages + 3PalletsATTENTIONSuch calculations are possible if conversion tables are also used here (e.g. a separate conversion for xpackages = 1pallet per item).650g * 25,50[[€/kg]16,575€Please put units as fractions in square brackets. Equal units are automatically shortened.2kg*3m/5s²1,2NSince the unit fraction kg*m/s² corresponds to the unit N (=Newton), the result is automatically output in N3.5N + 2.8[[kg*m/s²]6,3NEntered the unit N as a composite unit.2m + 3 + 5cm + 49,05mValues without units are allowed. A normalisation of the unit is done to the first unit.2cm + 3 + 5m + 4509cmHere the values are internally set to the unit cm without a unit.23 + 6 - 1217Calculations without any unit are allowed.4 + 3 * 210 Point calculation takes precedence over line calculation.(4 + 3) * 214Brackets are allowed.25,50€ + 19%30,345€Percentage calculation is possible.The calculation is output to memory.For longer calculations, the individual values can be entered individually via the calculator's keyboard, whereby the entry of a unit is also optional here. After triggering one of the keys with an arithmetic operation, the value is displayed in the memory and is available for further calculation.When calculating, the rule \"dot before dash\" is observed. The maximum accuracy of the calculation is 8 decimal places by default. ### Instruction: Which module is being described? ### Response: This module is called Unit calculator."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Unit calculator serve? ### Response: The module Unit calculator serves the purpose of the following: With this app, calculations with units can be performed quickly and easily. Expressions - as exemplified in the following table - can be entered directly into the input field. InputResultComment5.32kg - 640g4,68kgThe result is automatically normalised to the unit of the first value.640g - 5.32kg-4,680gSame calculation as above, but in reverse order.0g + 5.32kg - 640g4,680gInserting a zero value with the unit you want in the result.3m + 5sErrorMetres and seconds cannot be added.35,50€ + 24,00$55,29381443€ (as of 10.6.2021)For units with variable conversion, a conversion table must be registered in the system. In the standard system, the EUROFX currency table of the European Central Bank is registered on a daily basis.5Packages + 3PalletsATTENTIONSuch calculations are possible if conversion tables are also used here (e.g. a separate conversion for xpackages = 1pallet per item).650g * 25,50[[€/kg]16,575€Please put units as fractions in square brackets. Equal units are automatically shortened.2kg*3m/5s²1,2NSince the unit fraction kg*m/s² corresponds to the unit N (=Newton), the result is automatically output in N3.5N + 2.8[[kg*m/s²]6,3NEntered the unit N as a composite unit.2m + 3 + 5cm + 49,05mValues without units are allowed. A normalisation of the unit is done to the first unit.2cm + 3 + 5m + 4509cmHere the values are internally set to the unit cm without a unit.23 + 6 - 1217Calculations without any unit are allowed.4 + 3 * 210 Point calculation takes precedence over line calculation.(4 + 3) * 214Brackets are allowed.25,50€ + 19%30,345€Percentage calculation is possible.The calculation is output to memory.For longer calculations, the individual values can be entered individually via the calculator's keyboard, whereby the entry of a unit is also optional here. After triggering one of the keys with an arithmetic operation, the value is displayed in the memory and is available for further calculation.When calculating, the rule \"dot before dash\" is observed. The maximum accuracy of the calculation is 8 decimal places by default.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Units: In the ClassiX® system, all SI units and the most common currencies are defined by default. In addition to these standard units, further user-defined units can be added to the system with this module. These can be derived units based on the already defined units, e.g. \"km\" based on \"m\", \"MJ\" (Mega-Joule) based on \"J\" (Joule) or \"T€\" based on \"€\". Or you can define new basic units, like \"pallet\", \"bottle\", etc. For the latter, part-specific unit tables are then stored on the parts themselves. The units stored in the system can - as soon as they are based on the same units - be converted directly. If this is not the case, conversion tables must be defined. The ClassiX system provides the above mentioned part-specific unit tables and tables for currency conversion as conversion tables. All units defined in the system are stored as prime numbers, which ensures precise and fast conversion. Only a limited number of user-defined basic units, about 500, including units that have been deleted, can be generated at all. If you want to create units for testing purposes, please do this in a test system. The limitation of the total number of user-defined units is 9700. ### Instruction: How is this module called? ### Response: This module is called Units."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Units serve? ### Response: The purpose of the module Units is the following: In the ClassiX® system, all SI units and the most common currencies are defined by default. In addition to these standard units, further user-defined units can be added to the system with this module. These can be derived units based on the already defined units, e.g. \"km\" based on \"m\", \"MJ\" (Mega-Joule) based on \"J\" (Joule) or \"T€\" based on \"€\". Or you can define new basic units, like \"pallet\", \"bottle\", etc. For the latter, part-specific unit tables are then stored on the parts themselves. The units stored in the system can - as soon as they are based on the same units - be converted directly. If this is not the case, conversion tables must be defined. The ClassiX system provides the above mentioned part-specific unit tables and tables for currency conversion as conversion tables. All units defined in the system are stored as prime numbers, which ensures precise and fast conversion. Only a limited number of user-defined basic units, about 500, including units that have been deleted, can be generated at all. If you want to create units for testing purposes, please do this in a test system. The limitation of the total number of user-defined units is 9700.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Table of units: Unit tables define the conversion between different units. In this module unit conversions for parts are given, e.g. \"1 bar\" corresponds to \"6000 mm\". Specific weights/weights are also given in these tables of units (\"1000 mm\" corresponds to \"3.25 kg\"). The units defined here for a part can then be specified at any point in the entire system for this part. A special feature is the variant part with its sub-parts; if the sub-part does not have its own unit table, that of the variant part is used. Any conversions necessary for calculations are automatically carried out by the system using this unit table. Such calculations also arise whenever different units of measure have to be specified in the logistics account of a part for staging (handling unit), planning (purchasing/production unit) and stock management (stock unit). Different units for sales and order prices (€ per \"any\" unit) may also have been specified here, which also require conversion. To cover all the complexity of such unit conversions, unit conversions may be specified as a fixed pair of values, as a formula or as a conditional table. The following rules apply to the conversion: Direct Conversion Indirect conversion Remainders when converting Conversion rates. ### Instruction: What is the name of this module? ### Response: This module is called Table of units."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Table of units used for? ### Response: The module Table of units is used for the following: Unit tables define the conversion between different units. In this module unit conversions for parts are given, e.g. \"1 bar\" corresponds to \"6000 mm\". Specific weights/weights are also given in these tables of units (\"1000 mm\" corresponds to \"3.25 kg\"). The units defined here for a part can then be specified at any point in the entire system for this part. A special feature is the variant part with its sub-parts; if the sub-part does not have its own unit table, that of the variant part is used. Any conversions necessary for calculations are automatically carried out by the system using this unit table. Such calculations also arise whenever different units of measure have to be specified in the logistics account of a part for staging (handling unit), planning (purchasing/production unit) and stock management (stock unit). Different units for sales and order prices (€ per \"any\" unit) may also have been specified here, which also require conversion. To cover all the complexity of such unit conversions, unit conversions may be specified as a fixed pair of values, as a formula or as a conditional table. The following rules apply to the conversion: Direct Conversion Indirect conversion Remainders when converting Conversion rates."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Copy list entries from clipboard: A list previously exported via the clipboard - and then possibly revised in Excel and copied from there to the clipboard again - can be re-imported with this module, i.e. the values from the clipboard overwrite the values in the list. The assignment of a line of the list and a line from the clipboard is done by specifying one or more columns, which together uniquely identify a line. ### Instruction: Name this module. ### Response: This module is Copy list entries from clipboard."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Copy list entries from clipboard used for? ### Response: The module Copy list entries from clipboard serves the purpose of the following: A list previously exported via the clipboard - and then possibly revised in Excel and copied from there to the clipboard again - can be re-imported with this module, i.e. the values from the clipboard overwrite the values in the list. The assignment of a line of the list and a line from the clipboard is done by specifying one or more columns, which together uniquely identify a line.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of User: This app is used to maintain the users who are allowed to use your ClassiX® applications. In addition to a user's login information, such as ID and password, access rights can also be defined here.As a rule, it is the \"own\" employees of the clients defined in the system who are users. Being a user therefore means that a person - in addition to his or her role as an employee - has the additional role of user. The registration of a user is therefore in the true sense the registration of a user role.This also makes it possible to assign user roles to contact persons of other companies. Unlike employees, contact persons of other companies do not have an employee role as an employee of a \"system client\", but a contact person role as an employee of another company. This means that these persons can also be given another role as a user of their system. (e.g. their tax advisors or auditors - but also temporary agency workers - who continue to be and remain the contact person of the external company).If such \"external\" users also carry out activities in which, for example, documents are created with input/output of contact data, it makes sense to store this contact data (e-mail, telephone extension number) - purely in the role as user - directly at the user role. Otherwise, there is a risk that the system will take over the contact data of the \"foreign\" contact person role when printing a document or sending an e-mail.Even if, for example, the employees in the sales department are only to be contacted via a collective e-mail (e.g. sales@myCompany.com), this collective e-mail can be stored for each of these users in their user role. In the employee role itself, the actual contact data for internal company traffic can then remain unchanged and unmistakable.In addition to the user role-specific contact data, a user can also be assigned his or her own first place of work.In addition to user roles that can be assigned to a natural person, one occasionally needs user roles that cannot be permanently assigned to a specific person. This is the case, for example, if the system is to be used by \"third parties\", e.g. for anonymous use via an interface (API). For such cases, user roles can also be assigned to companies (legal persons). Whether the assignment is made to one's own company (e.g. for night runs) or to a third-party company (e.g. the operator of the online shop that transmits data) is not relevant here.In principle, it is also possible to create user roles without any assignment to a natural or legal person. However, the change history of data then also has gaps. ### Instruction: How is this module called? ### Response: This module is User."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module User? ### Response: The module User can be described as follows: This app is used to maintain the users who are allowed to use your ClassiX® applications. In addition to a user's login information, such as ID and password, access rights can also be defined here.As a rule, it is the \"own\" employees of the clients defined in the system who are users. Being a user therefore means that a person - in addition to his or her role as an employee - has the additional role of user. The registration of a user is therefore in the true sense the registration of a user role.This also makes it possible to assign user roles to contact persons of other companies. Unlike employees, contact persons of other companies do not have an employee role as an employee of a \"system client\", but a contact person role as an employee of another company. This means that these persons can also be given another role as a user of their system. (e.g. their tax advisors or auditors - but also temporary agency workers - who continue to be and remain the contact person of the external company).If such \"external\" users also carry out activities in which, for example, documents are created with input/output of contact data, it makes sense to store this contact data (e-mail, telephone extension number) - purely in the role as user - directly at the user role. Otherwise, there is a risk that the system will take over the contact data of the \"foreign\" contact person role when printing a document or sending an e-mail.Even if, for example, the employees in the sales department are only to be contacted via a collective e-mail (e.g. sales@myCompany.com), this collective e-mail can be stored for each of these users in their user role. In the employee role itself, the actual contact data for internal company traffic can then remain unchanged and unmistakable.In addition to the user role-specific contact data, a user can also be assigned his or her own first place of work.In addition to user roles that can be assigned to a natural person, one occasionally needs user roles that cannot be permanently assigned to a specific person. This is the case, for example, if the system is to be used by \"third parties\", e.g. for anonymous use via an interface (API). For such cases, user roles can also be assigned to companies (legal persons). Whether the assignment is made to one's own company (e.g. for night runs) or to a third-party company (e.g. the operator of the online shop that transmits data) is not relevant here.In principle, it is also possible to create user roles without any assignment to a natural or legal person. However, the change history of data then also has gaps.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of User hierarchy: Shows the user hierarchy in the company. ### Instruction: Which module is being described? ### Response: This module is User hierarchy."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module User hierarchy? ### Response: The purpose of the module User hierarchy is as follows: Shows the user hierarchy in the company.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inspection - Accounting: This module belongs to the group of inspection modules that can be used to check the data in the system. ### Instruction: Tell me the name of this module. ### Response: This module is called Inspection - Accounting."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Inspection - Accounting for me. ### Response: The module Inspection - Accounting can be described as follows: This module belongs to the group of inspection modules that can be used to check the data in the system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inspection - Materials Management: This app is used to control data relating to materials management in general. For this purpose, there are inspection runs that are intended to help maintain or achieve a clean and consistent data stock. Various inspection runs from the entire system are compiled in this app. Next to the execution button on the screen, there is a short description of the inspection run.There are local inspection runs that are executed in the inspection results window and inspection runs that call up other apps and are started or evaluated there.To get a better overview, the inspection window is divided into different sub-windows. The sub-windows are then also divided into sub-groups with more precise specification of the topic. ### Instruction: How is this module called? ### Response: This module is Inspection - Materials Management."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Inspection - Materials Management for me. ### Response: The module Inspection - Materials Management is used for the following: This app is used to control data relating to materials management in general. For this purpose, there are inspection runs that are intended to help maintain or achieve a clean and consistent data stock. Various inspection runs from the entire system are compiled in this app. Next to the execution button on the screen, there is a short description of the inspection run.There are local inspection runs that are executed in the inspection results window and inspection runs that call up other apps and are started or evaluated there.To get a better overview, the inspection window is divided into different sub-windows. The sub-windows are then also divided into sub-groups with more precise specification of the topic.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inspection - Offers and orders: This module checks various offer/order data. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Inspection - Offers and orders."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Inspection - Offers and orders serve? ### Response: The module Inspection - Offers and orders serves the purpose of the following: This module checks various offer/order data.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inspection - Partners: This module is used for the inspection of partner data. ### Instruction: What is the name of this module? ### Response: The name of this module is Inspection - Partners."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Inspection - Partners? ### Response: The purpose of the module Inspection - Partners is the following: This module is used for the inspection of partner data.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Inspection - Purchasing: This module is used for the inspection of purchasing data. ### Instruction: How is this module called? ### Response: This module is Inspection - Purchasing."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Inspection - Purchasing? ### Response: The module Inspection - Purchasing serves the purpose of the following: This module is used for the inspection of purchasing data.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Open annual holiday accounts: This module is used to open/create the annual accounts for employees for the respective holiday entitlement. ### Instruction: What is the name of this module? ### Response: This module is named Open annual holiday accounts."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Open annual holiday accounts? ### Response: The module Open annual holiday accounts serves the purpose of the following: This module is used to open/create the annual accounts for employees for the respective holiday entitlement.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Validity: With this module the temporal validity of an object can be set. This time validity window is compared with the validity date specified in the system during each processing with this object. If an object is therefore \"invalid\", it is not displayed in lists by default, for example, or access to data of this object is no longer possible. In the business environment, data in the manner described above are very often limited in time (e.g. customer no longer exists, product is no longer to be sold), but as a rule one piece of information is only replaced by another piece of information that is \"newer\" in time: the value added tax rate is increased from 1.1., a price table changes from a certain date, etc. In these cases it is possible to make a temporal concatenation of information or objects. This is made possible by the \"Exchange objects\" box. This box contains all the objects that are in a logical chronological order; depending on their validity, one object automatically replaces the other. It does not matter which object you are currently standing at, you will always receive the correct information at the right time. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Validity."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Validity serve? ### Response: The module Validity is used for the following: With this module the temporal validity of an object can be set. This time validity window is compared with the validity date specified in the system during each processing with this object. If an object is therefore \"invalid\", it is not displayed in lists by default, for example, or access to data of this object is no longer possible. In the business environment, data in the manner described above are very often limited in time (e.g. customer no longer exists, product is no longer to be sold), but as a rule one piece of information is only replaced by another piece of information that is \"newer\" in time: the value added tax rate is increased from 1.1., a price table changes from a certain date, etc. In these cases it is possible to make a temporal concatenation of information or objects. This is made possible by the \"Exchange objects\" box. This box contains all the objects that are in a logical chronological order; depending on their validity, one object automatically replaces the other. It does not matter which object you are currently standing at, you will always receive the correct information at the right time.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Advance turnover tax return (module): This module is used to create and display a VAT advance return. The evaluation is created via the form for the advance return for VAT, which must be stored as a structure with identifier VAT_RETURN_REPORT. In the structure/keyword as structure-ID the number of the field on the form as short name the description of the field position on the form and as description the line number on the form, with 2 amounts on one line followed by \"l\" for left and \"r\" for right, e.g. 30l and 30r to be indicated. In principle, all postings that were posted with a tax key are processed in the advance return for sales tax. (The items of the VAT form are stored in the tax key). In addition, this information can also be stored for a G/L account in order to also be able to consider postings without a tax key in the advance return for VAT. G/L accounts stored as tax accounts are always included in the processing. Entries with a control key are assigned to the fields in the form of the advance return for turnover tax according to the specifications made on the control key. Entries without a control key are only assigned to a field in the form of the advance return for VAT if the G/L account posted to has a corresponding assignment. The following procedure is recommended for setting up the advance return for VAT:Load/set up the form as a structure with identifier VAT_RETURN_REPORT. Setting up the control keys with assignment to the form fields Assignment of such G/L accounts to form fields that could possibly be posted to without a tax key: as a rule, all accounts whose values must be included as the tax base in the advance return for sales tax. Although one can assume that these accounts are always posted to with tax keys, one can build in further security here by assigning the entire account. However, you must be aware that all postings to an account marked in this way, which were posted without a tax key, will then always be assigned to this form field. However, such subsequent allocations are displayed in the list window as a system message and can thus be checked. Check whether all expense and revenue accounts in the G/L account master record are marked as such: otherwise the system could issue messages such as \"Revenue account posted with input tax key Check whether accounts such as import VAT, which are not automatically posted with fixed percentages from gross postings, have been created as accounts of the type tax account. If this is not the case, the account type of the G/L account can be changed subsequently in the list window under the menu item \"Edit\" / \"Change account type\". When the advance return for sales tax is set up, the system automatically checks all postings of the selected period for possible errors or discrepancies. If any occur, they are displayed in the list System messages. Here is a brief overview of the logic of the checks:. ### Instruction: How is this module called? ### Response: This module is named Advance turnover tax return (module)."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Advance turnover tax return (module) serve? ### Response: The module Advance turnover tax return (module) serves the purpose of the following: This module is used to create and display a VAT advance return. The evaluation is created via the form for the advance return for VAT, which must be stored as a structure with identifier VAT_RETURN_REPORT. In the structure/keyword as structure-ID the number of the field on the form as short name the description of the field position on the form and as description the line number on the form, with 2 amounts on one line followed by \"l\" for left and \"r\" for right, e.g. 30l and 30r to be indicated. In principle, all postings that were posted with a tax key are processed in the advance return for sales tax. (The items of the VAT form are stored in the tax key). In addition, this information can also be stored for a G/L account in order to also be able to consider postings without a tax key in the advance return for VAT. G/L accounts stored as tax accounts are always included in the processing. Entries with a control key are assigned to the fields in the form of the advance return for turnover tax according to the specifications made on the control key. Entries without a control key are only assigned to a field in the form of the advance return for VAT if the G/L account posted to has a corresponding assignment. The following procedure is recommended for setting up the advance return for VAT:Load/set up the form as a structure with identifier VAT_RETURN_REPORT. Setting up the control keys with assignment to the form fields Assignment of such G/L accounts to form fields that could possibly be posted to without a tax key: as a rule, all accounts whose values must be included as the tax base in the advance return for sales tax. Although one can assume that these accounts are always posted to with tax keys, one can build in further security here by assigning the entire account. However, you must be aware that all postings to an account marked in this way, which were posted without a tax key, will then always be assigned to this form field. However, such subsequent allocations are displayed in the list window as a system message and can thus be checked. Check whether all expense and revenue accounts in the G/L account master record are marked as such: otherwise the system could issue messages such as \"Revenue account posted with input tax key Check whether accounts such as import VAT, which are not automatically posted with fixed percentages from gross postings, have been created as accounts of the type tax account. If this is not the case, the account type of the G/L account can be changed subsequently in the list window under the menu item \"Edit\" / \"Change account type\". When the advance return for sales tax is set up, the system automatically checks all postings of the selected period for possible errors or discrepancies. If any occur, they are displayed in the list System messages. Here is a brief overview of the logic of the checks:."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Vehicle: In the ClassiX® system, vehicles are treated as special characteristics of parts, i.e. according to the language usage of object orientation, it is also said that vehicles are derived from parts, vehicles are inherited from parts. A further specialisation of vehicles are passenger cars and trucks. Vehicles are maintained in ClassiX as part of a company's vehicle fleet. For example, an assignment to a car is stored in the route plan of a delivery. ### Instruction: Tell me the name of this module. ### Response: The module being described is Vehicle."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Vehicle? ### Response: The module Vehicle serves the purpose of the following: In the ClassiX® system, vehicles are treated as special characteristics of parts, i.e. according to the language usage of object orientation, it is also said that vehicles are derived from parts, vehicles are inherited from parts. A further specialisation of vehicles are passenger cars and trucks. Vehicles are maintained in ClassiX as part of a company's vehicle fleet. For example, an assignment to a car is stored in the route plan of a delivery.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Check database: With this module the database can be technically checked completely or in parts. Besides the connections of the objects among each other, the collections are also checked (call of the ObjectStore utility osverifydb). If no errors are detected, deleted objects can be permanently removed (reorganised) from the database in a second step. For this purpose 6 preparatory steps have to be taken before the database is internally reorganised with the ObjectStore utility oscompact and then created as a new copy with the ObjectStore utility oscopy. If a persistent object is deleted from a ClassiX application, it is first only logically deleted, i.e. a deletion identifier is assigned and the object is registered in a separate list (garbage collection). To permanently remove a persistent object from an object-oriented database it must be ensured that no other object references this deleted object. This check is carried out using the ObjectStore utility osgc, which marks all \"unreachable\" objects as deletable and thus releases them for removal. An object is considered \"unreachable\" if it is not referenced in the database by any other object or list. In order to make objects that have been logically deleted by a ClassiX application \"unreachable\", the following 6 steps have to be carried out: Since logically deleted objects can also reference other logically deleted objects, the connections between these objects are cut. Connections to non-deleted objects, on the other hand, are retained. For this purpose, all logically deleted objects from their registration list (garbage collection) are run through. Deleted\" are those objects that either have a deletion identification or are contained in the deletion registration list (garbage collection). The addresses of the objects from which connections were cut - i.e. which were changed - are saved in a file. All logically deleted objects are removed from their registration list (garbage collection), the addresses of these objects are written to a file. Call of the ObjectStore utility osgc with output of the addresses of the \"unreachable\" objects into a file, i. e. this run does NOT remove any objects from the database. From the addresses from steps 2 and 3, a list of object addresses can now be determined which - although deleted - would not be removed from the database: For this purpose, the addresses that are considered \"unreachable\" (step 3) are removed from the addresses of all logically deleted objects (step 2). The resulting list contains only those addresses of logically deleted objects that must NOT and would NOT be removed from the database, i.e. which are still \"actively\" referenced by other objects in the database. This address list of logically deleted objects remaining in the database is compared with the addresses in the list from step 1: If addresses appear in both lists, connections have been cut, which must remain, otherwise a complete navigation from \"active\" objects would no longer be possible. These objects must be examined more closely: either the deletion is reversed, or the connection to the \"active\" database space is cut, or these objects are omitted in step 1. If such objects occur, it is not possible to proceed directly with the reorganisation of the database. After checking the situation and reacting accordingly, step 1 must be restarted. If such objects do not occur, the actual removal of the objects from the database can be continued with step 5. Call the ObjectStore utility osgc again, but this time WITH removal of \"unreachable\" objects from the database. Using the address list from step 2, the logically deleted objects still remaining in the database are registered again, i.e. entered in the garbage collection. If all these steps are called up in one go, it is checked whether the newly created garbage collection matches the list of remaining objects from step 4. Also for these remaining objects, it should be checked why references from \"active\" objects still exist. Up to this point, objects were initially only deleted from the database. A reorganisation of the data in the database and thus a possible reduction in the size of the database is only achieved by successively calling the ObjectStore utilities oscompact and oscopy. Attention Dictionaries must be rebuilt after the run {CODE( wrap=\"1\")}[ CX_OBJECT_DICTIONARY CX_OBJECT_DICTIONARY_CI CX_OBJECT_DICTIONARY_ML CX_OBJECT_DICTIONARY_ML_CI ] iterate { FindAll(STACK) iterate { Call(RebuildDictionary) } } {CODE}. ### Instruction: What is the name of the module being described? ### Response: This module is named Check database."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Check database. ### Response: The purpose of the module Check database is as follows: With this module the database can be technically checked completely or in parts. Besides the connections of the objects among each other, the collections are also checked (call of the ObjectStore utility osverifydb). If no errors are detected, deleted objects can be permanently removed (reorganised) from the database in a second step. For this purpose 6 preparatory steps have to be taken before the database is internally reorganised with the ObjectStore utility oscompact and then created as a new copy with the ObjectStore utility oscopy. If a persistent object is deleted from a ClassiX application, it is first only logically deleted, i.e. a deletion identifier is assigned and the object is registered in a separate list (garbage collection). To permanently remove a persistent object from an object-oriented database it must be ensured that no other object references this deleted object. This check is carried out using the ObjectStore utility osgc, which marks all \"unreachable\" objects as deletable and thus releases them for removal. An object is considered \"unreachable\" if it is not referenced in the database by any other object or list. In order to make objects that have been logically deleted by a ClassiX application \"unreachable\", the following 6 steps have to be carried out: Since logically deleted objects can also reference other logically deleted objects, the connections between these objects are cut. Connections to non-deleted objects, on the other hand, are retained. For this purpose, all logically deleted objects from their registration list (garbage collection) are run through. Deleted\" are those objects that either have a deletion identification or are contained in the deletion registration list (garbage collection). The addresses of the objects from which connections were cut - i.e. which were changed - are saved in a file. All logically deleted objects are removed from their registration list (garbage collection), the addresses of these objects are written to a file. Call of the ObjectStore utility osgc with output of the addresses of the \"unreachable\" objects into a file, i. e. this run does NOT remove any objects from the database. From the addresses from steps 2 and 3, a list of object addresses can now be determined which - although deleted - would not be removed from the database: For this purpose, the addresses that are considered \"unreachable\" (step 3) are removed from the addresses of all logically deleted objects (step 2). The resulting list contains only those addresses of logically deleted objects that must NOT and would NOT be removed from the database, i.e. which are still \"actively\" referenced by other objects in the database. This address list of logically deleted objects remaining in the database is compared with the addresses in the list from step 1: If addresses appear in both lists, connections have been cut, which must remain, otherwise a complete navigation from \"active\" objects would no longer be possible. These objects must be examined more closely: either the deletion is reversed, or the connection to the \"active\" database space is cut, or these objects are omitted in step 1. If such objects occur, it is not possible to proceed directly with the reorganisation of the database. After checking the situation and reacting accordingly, step 1 must be restarted. If such objects do not occur, the actual removal of the objects from the database can be continued with step 5. Call the ObjectStore utility osgc again, but this time WITH removal of \"unreachable\" objects from the database. Using the address list from step 2, the logically deleted objects still remaining in the database are registered again, i.e. entered in the garbage collection. If all these steps are called up in one go, it is checked whether the newly created garbage collection matches the list of remaining objects from step 4. Also for these remaining objects, it should be checked why references from \"active\" objects still exist. Up to this point, objects were initially only deleted from the database. A reorganisation of the data in the database and thus a possible reduction in the size of the database is only achieved by successively calling the ObjectStore utilities oscompact and oscopy. Attention Dictionaries must be rebuilt after the run {CODE( wrap=\"1\")}[ CX_OBJECT_DICTIONARY CX_OBJECT_DICTIONARY_CI CX_OBJECT_DICTIONARY_ML CX_OBJECT_DICTIONARY_ML_CI ] iterate { FindAll(STACK) iterate { Call(RebuildDictionary) } } {CODE}."
    },
    {
        "input": "",
        "output": "### Context: This is the description of stock monitor: From the warehouse monitor, all inbound and outbound business processes (goods receipt, goods issue and goods transport), the resources available in a warehouse (parts, storage aids) and all material movements with their warehouse execution documents are controlled and monitored. The order of the tabs should also underline the processing of material movements in a warehouse. ### Instruction: Which module is being described? ### Response: This module is stock monitor."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module stock monitor. ### Response: The purpose of the module stock monitor is as follows: From the warehouse monitor, all inbound and outbound business processes (goods receipt, goods issue and goods transport), the resources available in a warehouse (parts, storage aids) and all material movements with their warehouse execution documents are controlled and monitored. The order of the tabs should also underline the processing of material movements in a warehouse.."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module stock monitor. ### Response: The purpose of the module stock monitor is as follows: From the warehouse monitor, all inbound and outbound business processes (goods receipt, goods issue and goods transport), the resources available in a warehouse (parts, storage aids) and all material movements with their warehouse execution documents are controlled and monitored. The order of the tabs should also underline the processing of material movements in a warehouse.. ### Context: This is the description of Winding in stock monitor: In this sub window the warehouse execution documents are listed, which are located in a work area \"Winding\" (field \"Consolidation\" in the editing mask of a warehouse). ### Instruction: What is the name of the window being described? ### Response: The name of this window is Winding in stock monitor."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the window Winding in stock monitor for me. ### Response: The window Winding in stock monitor can be described as follows: In this sub window the warehouse execution documents are listed, which are located in a work area \"Winding\" (field \"Consolidation\" in the editing mask of a warehouse).."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:Webservice Cockpit: This module can be used to manage (start, stop, monitor) the Web Service of the CyberEnterprise business OS. It is a central component of the CyberEnterprise business OS MorphIT user layer. ### Instruction: Name this module. ### Response: This module is called English:Webservice Cockpit."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module English:Webservice Cockpit for me. ### Response: The module English:Webservice Cockpit serves the purpose of the following: This module can be used to manage (start, stop, monitor) the Web Service of the CyberEnterprise business OS. It is a central component of the CyberEnterprise business OS MorphIT user layer.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of List of open windows: Display the list of open windows. ### Instruction: Which module is being described? ### Response: The module being described is List of open windows."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module List of open windows serve? ### Response: The module List of open windows is used for the following: Display the list of open windows.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Work in progress: Display and evaluation of material and labour costs for currently undelivered open orders, i.e. for unfinished products. ### Instruction: Tell me the name of this module. ### Response: This module is called Work in progress."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the purpose of the module Work in progress? ### Response: The module Work in progress can be described as follows: Display and evaluation of material and labour costs for currently undelivered open orders, i.e. for unfinished products.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Work areas: A work area is an organisational term to which workplaces, employees, warehouses and properties (buildings, premises, etc.) can be assigned as resources. Workspaces are used for rough resource planning, i.e. when you do not want to plan each individual resource for itself but several, exchangeable individual resources in one capacity.The capacitive resource planning of work areas is used in particular in project networks. ### Instruction: What is the name of this module? ### Response: The name of this module is Work areas."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Work areas. ### Response: The purpose of the module Work areas is the following: A work area is an organisational term to which workplaces, employees, warehouses and properties (buildings, premises, etc.) can be assigned as resources. Workspaces are used for rough resource planning, i.e. when you do not want to plan each individual resource for itself but several, exchangeable individual resources in one capacity.The capacitive resource planning of work areas is used in particular in project networks.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Workflow graph: This module shows the flow of a business process. The individual states as well as the transitions between the states are shown. Optionally, branched processes can also be displayed, if they represent a condition for a transition. General documentation on business processes. ### Instruction: What is the name of this module? ### Response: This module is named Workflow graph."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module Workflow graph. ### Response: The module Workflow graph can be described as follows: This module shows the flow of a business process. The individual states as well as the transitions between the states are shown. Optionally, branched processes can also be displayed, if they represent a condition for a transition. General documentation on business processes."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Working Group: This module is used to maintain working groups. Through working groups, individual employees are organised into work departments. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Working Group."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Working Group serve? ### Response: The purpose of the module Working Group is the following: This module is used to maintain working groups. Through working groups, individual employees are organised into work departments.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Working hours account: The working time account provides an overview of an employee's daily working hours, absences and holiday entitlement. It is also possible to display annual and monthly balances. ### Instruction: Tell me the name of this module. ### Response: The module being described is Working hours account."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Working hours account used for? ### Response: The module Working hours account is used for the following: The working time account provides an overview of an employee's daily working hours, absences and holiday entitlement. It is also possible to display annual and monthly balances.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Workplace: This module enables the maintenance of different workstations in the system. ### Instruction: What is the name of this module? ### Response: The name of this module is Workplace."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What is the module Workplace used for? ### Response: The module Workplace can be described as follows: This module enables the maintenance of different workstations in the system.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Flexitime accounting: The data for flexitime accounting is recorded at time recording terminals. These create a text file for each day, which must be read in daily via the function \"Activities - Personnel - Daily - Read in terminal bookings\".This is the so-called daily closing. Once this has been done, the current day can be evaluated.The flexitime rules and working hours assigned to employees or their cost centre are used to evaluate their flexitime.From these and the clock-in and clock-out data recorded by stamping at the terminal, it is now determined whether the employee has worked exactly in the prescribed time and duration. In order to define messages about irregularities or rules for the summation of attendance times, the flexitime rules must be used. They specify whether a message should appear if the employee has already clocked in before his or her actual working time, or whether the breaks are added up or added to the working time. ### Instruction: How is this module called? ### Response: This module is named Flexitime accounting."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module Flexitime accounting serve? ### Response: The module Flexitime accounting serves the purpose of the following: The data for flexitime accounting is recorded at time recording terminals. These create a text file for each day, which must be read in daily via the function \"Activities - Personnel - Daily - Read in terminal bookings\".This is the so-called daily closing. Once this has been done, the current day can be evaluated.The flexitime rules and working hours assigned to employees or their cost centre are used to evaluate their flexitime.From these and the clock-in and clock-out data recorded by stamping at the terminal, it is now determined whether the employee has worked exactly in the prescribed time and duration. In order to define messages about irregularities or rules for the summation of attendance times, the flexitime rules must be used. They specify whether a message should appear if the employee has already clocked in before his or her actual working time, or whether the breaks are added up or added to the working time.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Time recording terminal: This application is used to record both flexitime and operating data (BDE) and requires a barcode recording device, e.g. connected to the keyboard.If a personnel card is read in using the barcode recording device, in addition to the flexitime events \"coming\" and \"going\", \"business trip\", \"doctor's visit\" and \"private departure\" can also be recorded with date and time. Each time a personnel card is read in, the (flexitime) account balance is confirmed by the output of the (flexitime) account balance.The further processing of (flexitime) data is carried out in the flexitime accounting module.By switching over to BDE events - such as \"Start\" or \"End \", work tickets and route cards - with the corresponding barcode - can also be reported back. In addition to the \"Start\" and \"End\" messages - from which the work duration is then determined - standard times can also be reported or the number of employees per workstation can be specified (special entries).The further processing of BDE data takes place in the production data acquisition module. ### Instruction: Name this module. ### Response: The name of this module is Time recording terminal."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Time recording terminal for me. ### Response: The module Time recording terminal is used for the following: This application is used to record both flexitime and operating data (BDE) and requires a barcode recording device, e.g. connected to the keyboard.If a personnel card is read in using the barcode recording device, in addition to the flexitime events \"coming\" and \"going\", \"business trip\", \"doctor's visit\" and \"private departure\" can also be recorded with date and time. Each time a personnel card is read in, the (flexitime) account balance is confirmed by the output of the (flexitime) account balance.The further processing of (flexitime) data is carried out in the flexitime accounting module.By switching over to BDE events - such as \"Start\" or \"End \", work tickets and route cards - with the corresponding barcode - can also be reported back. In addition to the \"Start\" and \"End\" messages - from which the work duration is then determined - standard times can also be reported or the number of employees per workstation can be specified (special entries).The further processing of BDE data takes place in the production data acquisition module.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of World Clock: This module allows to calculate the current time in another location (related to a specific location). Not only different time zones, but also summer and winter time (if available) are taken into account. In addition, it is shown whether and what kind of public holiday takes place at the respective location. ### Instruction: What is the name of this module? ### Response: This module is World Clock."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: What purpose does the module World Clock serve? ### Response: The module World Clock can be described as follows: This module allows to calculate the current time in another location (related to a specific location). Not only different time zones, but also summer and winter time (if available) are taken into account. In addition, it is shown whether and what kind of public holiday takes place at the respective location.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of Z4 module: According to the Foreign Trade and Payments Ordinance (AWV), companies in the Federal Republic of Germany must submit reports to the Deutsche Bundesbank on payment flows to or from abroad. The Z4 (and also Z1) reports can be processed automatically with this module and a file in CSV format can be created which can be read directly into the online form of the Deutsche Bundesbank. In a first step, the system compiles either outgoing and incoming invoices or the financial accounting cash accounts with regard to outgoing or incoming foreign payments. This compilation can be edited online and then, in a second step, transferred to the Deutsche Bundesbank tool via an interface file. ### Instruction: What is the name of the module being described? ### Response: The name of this module is Z4 module."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Describe the module Z4 module for me. ### Response: The purpose of the module Z4 module is the following: According to the Foreign Trade and Payments Ordinance (AWV), companies in the Federal Republic of Germany must submit reports to the Deutsche Bundesbank on payment flows to or from abroad. The Z4 (and also Z1) reports can be processed automatically with this module and a file in CSV format can be created which can be read directly into the online form of the Deutsche Bundesbank. In a first step, the system compiles either outgoing and incoming invoices or the financial accounting cash accounts with regard to outgoing or incoming foreign payments. This compilation can be edited online and then, in a second step, transferred to the Deutsche Bundesbank tool via an interface file.."
    },
    {
        "input": "",
        "output": "### Context: This is the description of English:ZUGFeRD: ZUGFeRD is the definition of an invoice that not only contains the printable invoice in a PDF but also contains embedded XML data for machine-readable processing. The XML format always complies with the European Standard for Electronic Invoicing (EN 16931). The ZUGFeRD defined own format can, however, also contain XML data in the format of the XRECHNUNG contain.XRECHNUNG is a special XML format based on the European standard for electronic invoicing (EN 16931) used by German authorities. The basic schema is UN/CEFACT Cross Industry Invoice in XML Schemas 16B (CII). ### Instruction: Which module is being described? ### Response: The module being described is English:ZUGFeRD."
    },
    {
        "input": "",
        "output": "### Context: ### Instruction: Explain the purpose of the module English:ZUGFeRD. ### Response: The purpose of the module English:ZUGFeRD is the following: ZUGFeRD is the definition of an invoice that not only contains the printable invoice in a PDF but also contains embedded XML data for machine-readable processing. The XML format always complies with the European Standard for Electronic Invoicing (EN 16931). The ZUGFeRD defined own format can, however, also contain XML data in the format of the XRECHNUNG contain.XRECHNUNG is a special XML format based on the European standard for electronic invoicing (EN 16931) used by German authorities. The basic schema is UN/CEFACT Cross Industry Invoice in XML Schemas 16B (CII).."
    }
]