metaobj: A meta object represents a group of identical or similar objects of an application solution. It is similar because different objects, for example of the same class "CX_CUSTOMER", can differ from each other by the number and type of data fields. Nevertheless, such "similar" objects are combined in the meta model to form a meta object "customer". This meta-object is then described by the totality of all possible data fields. Meta-Objects are created exclusively by the ObjectCrawler. Identification of a meta-object: A meta-object is primarily identified by its type. The type is the class name (for example, CX_CUSTOMER) of the objects. A further identification feature is the specification of the main object. Main objects are objects that are registered in a RootEntryPoint-Collection (REP Collection) of the respective class type. Thus all main objects can be identified directly and assigned to the corresponding meta object. Thus, each customer object can be identified by specifying "type=CX_CUSTOMER and main object=yes". But now there are also slave objects in the database which are not in a REP collection and therefore are not main objects. These slave objects are referenced/defined/identified via their master. The master is itself a meta object and references/defines/identifies other meta objects as slave objects. This is to be distinguished because slave objects (can) have a different character in the application solution due to different assignments. This becomes clear with the example of the class CX_LINK_TXN. Objects of this class can be used as order items, delivery note items or any other document items. In order to identify an order item as a meta-object, the type (=CX_LINK_TXN), the identification main object (=no) and the specification of its master are necessary. The type of the master object is in this case CX_SALES_ORDER and e.g. in case of a delivery note item CX_DELIVERY_NOTE. The set of rules according to which the master object of a slave object is defined is stored in the ObjectCrawler. Some of the rules are listed below as examples: In addition to the normal slave objects, there are also the data cube objects (of type CX_DATA_CUBE / CX_LOG_CUBE), which are not defined by a master object but by their dimensions. As dimensions there are at least two master objects. A two-dimensional data cube is therefore identified by the fact that there are exactly two unique references (dimension 1 and dimension 2) to other meta objects. Exceptions are made for data cubes that represent monthly or annual accounts. Here there is a "correct" dimension and a dimension representing the time span ("year", "month"). Input window: This window is used for the maintenance of . List window: This window is used to list the meta objects. Selection window: This window is used for selection . Option window: All settings for the search can be made here. The window can only be closed with the "OK" button. Module name: "module".mod. Classes: CX_"Class. Security: In addition to restricting access rights via the class and its data fields, the module can be restricted in its use via some of the received messages. Module name: "module".mod. Classes: CX_"Class. Security: In addition to restricting access rights via the class and its data fields, the module can be restricted in its use via some of the received messages. Module name: "module".mod. Classes: CX_"Class.