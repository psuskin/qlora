cxModuleSettings: In the modules in which options for their processing are available - especially in the case of list modules - a user can secure (even several) different combinations of options. Input window: This window is for maintaining module presets. List window: This window is for listing module presets. Selection window: This window is used to select a module preset. Option window: All settings for the search can be made here. The window can only be closed with the "OK" button. Integration in option/preset window of other modules: To integrate module presets into other modules, the following code examples must be adopted accordingly: The following two macros are to be adapted according to the setting options (Fill/DrainWindow). The following macro must be adopted unchanged. Possibly the first two lines of the following macro can be omitted. In the options window, the following context menu must first be inserted. {CODE( theme="default")}Integer(CX_MODULE_SETTINGS::end.index~SetLimitStr, 140, 19, 70) .usw.{CODE} If the option window is called from a derived module, the following code must be inserted accordingly. And as a notebook tab in the options window, further insert. {CODE( theme="default")}Window(SaveSettingsWin, 0, 0, 0 ,0, T("Voreinstellungen", "Default Settings")) { Group(GlobalSettingsGroup, 5, 5, 380, 50 , T("Globale Voreinstellungen", "Global default settings")) { ObjectListView(GlobalSettingsListBox, AUTO_POSITION, 5, 10, 412, 110) [ INITIALIZE: [ "CX_MODULE_SETTINGS::settingsOwner.call(Local_G_GetPicture)" ] SetFormat [ "CX_MODULE_SETTINGS::settingsOwner.call(Local_G_ObjectDescription)" COLUMN 0 HEADER T("Ebene", "Owner") COLOR LIGHTBLUE ] SetFormat SetSettingsListBox globalModuleSettings UpdateObox MOUSE_CLICK_R: GetCollection Cardinality if { EndTXN PopupMenu(, GlobalSettingsMenu) } MODULE_SETTINGS_DELETED: Dup RemoveObox Dup globalModuleSettings Remove currentModuleSettings @ if { SetOptions Widget(OptionsWin) SendMsg(INITIALIZE, DIRECT) } else Drop ] Attach(GlobalSettingsListBox, RIGHT, STRETCH, 10) Attach(GlobalSettingsListBox, BOTTOM, STRETCH, 2) }{CODE} {CODE( theme="default")} Group(UserSettingsGroup, 5, 60, 380, 50 , T("Benutzer Voreinstellungen", "User default settings")) { ObjectListView(UserSettingsListBox, AUTO_POSITION, 5, 10, 412, 110) [ INITIALIZE: SetSettingsListBox userModuleSettings UpdateObox MOUSE_CLICK_R: GetCollection Cardinality ifnot { Lock(, SetUserSettingsItem) Lock(, UpdateUserSettingsItem) Lock(, EditUserSettingsItem) Lock(, DeleteUserSettingsItem) } else { Unlock(, SetUserSettingsItem) Unlock(, UpdateUserSettingsItem) Unlock(, EditUserSettingsItem) Unlock(, DeleteUserSettingsItem) } EndTXN PopupMenu(, UserSettingsMenu) DOUBLE_CLICK: GetObject Dup if { [ Swap ] OboxEdit } else Drop MODULE_SETTINGS_DELETED: Dup RemoveObox Dup userModuleSettings Remove currentModuleSettings @ if { SetOptions Widget(OptionsWin) SendMsg(INITIALIZE, DIRECT) } else Drop ] Attach(UserSettingsListBox, RIGHT, STRETCH, 10) Attach(UserSettingsListBox, BOTTOM, STRETCH, 2) } Attach(GlobalSettingsGroup, RIGHT, STRETCH, 10) Attach(UserSettingsGroup, RIGHT, STRETCH, 10) Attach(UserSettingsGroup, BOTTOM, STRETCH, 2) } // end of save settings win{CODE} Otherwise, in the same module in the macro "SetOptions", the specifications for "moduleName" and "moduleSettingsCall" must be made at the very beginning. Module name: modseset.mod. Classes: CX_"Class.