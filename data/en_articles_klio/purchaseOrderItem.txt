This is the description of the module "purchaseOrderItem" with the name "Order item": General Blanket order (call-off order) Subsequent connection BA <--> BE Order type: Subsequent connection order item -> delivery schedule (requester customer requirement). Determination of prices Calculation of the pricing conditions Take over order item price as a supplier-specific price Order text field Order number. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding General: A part to be ordered and corresponding order data and conditions are recorded on an order item. An order item always consists of one or more delivery schedules; details such as quantity, date and others are only entered on individual delivery schedules. If a provision is necessary for the order item, a note is displayed next to the order type: ATTENTION: PROVISION. Next to this note, a button "Provisions" appears, which opens the attached provisions. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Blanket order (call-off order): An order item can be configured for subsequent call-off (blanket order):. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Order text field, note for supplier or recipient.: The order text field is blocked for blanket orders. This happens because when expanding, it is checked whether the description of the blanket purchase order and that of the part to be inserted or the requisition to be inserted are the same. If this is not the case, the blanket purchase order is not extended because otherwise the description from the requisition would not be adopted. If you want to communicate something yourself, e.g. to the supplier or the recipient, there are the fields Note for supplier and Note for recipient here, the view is switched by the corresponding button. These fields should be used especially if the actual order text of a part from the part master, i.e. not e.g. a text article, is not sufficient or has to be supplemented for a special reason! If the actual order text is never sufficient or always has to be supplemented by the same addition, then this itself should already be corrected in the master or the supplier agreement. If you now have an open blanket purchase order in the system and want to change the order text in the purchase order article, then you will receive a warning message in the purchase order article explaining this difference and asking whether the now changed order text in the purchase order article should be transferred to the blanket purchase order!. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Subsequently link an open requisition item with an open delivery schedule.: If a requisition item and a delivery schedule of a purchase order item are created individually in the system, whereby they both belong to one business transaction, then such two items can be linked into a document chain: the requisition item is to be dragged and dropped onto the delivery schedule. Prerequisites: - Exactly one requirement item may be dragged in. - The delivery schedule must not have a preceding document. - The requirement request item should be open (not yet completely ordered). - Parts on the requisition item and purchase order item should be the same. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Subsequent connection order item -> delivery schedule line (requester: customer requirement): There are four possible connection types between order items and delivery schedules:. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Determination of prices: The procedure for determining prices for order items is as follows. The price found first is pulled into the order: (macro GetItemSupplier in purcoedt.mod fetches supplier, puroiedt fetches price matching supplier). 1. price agreements of the purchasing contract selected in the order header. 1a.) Project price (purchasing cost objects linked to the project of the predecessor). 1b.) Generally valid price agreement via a purchasing contract 2. supply agreements of the A-supplier 3. last price of the part at last supplier 4. first found delivery agreement of the order item 5. price from order item roll (standard price) 6. price from requisition item If price 0 is drawn by one of these steps, the price is taken from the requisition item or the order predecessor. The last used price is saved with the selected supplier in his movement monitors. For this purpose, all discounts and surcharges are taken into account. The prices from the orders are processed further in the following areas: 1. goods receipt 2. average price calculation 3. warehouse statistics (determination of the warehouse value) Goods receipt passes on the price received from the order to the other areas. Determining the price again If the order item consists of only one delivery schedule line, the price is determined again each time it is saved and checked whether it has changed (e.g. manual entry). However, if the order consists of several delivery schedules, the price is only recalculated after saving the edited delivery schedule. This happens because the price often only changes when the quantity in the delivery schedule is changed. If the attributes are changed, the price is recalculated each time. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Calculation of the price conditions on purchase order items and delivery schedule lines.: There are two ways of assigning conditions to order items. 1- one stores the conditions directly in the order item. Then the condition is added to the result after determining the delivery schedule prices. 2- you save the conditions in the delivery schedule itself. In this way, valid conditions can be saved for each delivery schedule, which have no influence on other delivery schedules. The result of the following conversions is stored in the slot gross.value. This is then used for further processing in the goods receipts and average value calculation. Absolute conditions: It should also be noted that absolute conditions (-€100) also affect the unit price. It is therefore multiplied by the quantity stored for the item, as are all other conditions in the items. Determination of the prices of the individual delivery schedule lines with absolute surcharges/discounts (e.g. in order status list and calculation of the values in average value calculation and stock value calculation): Data determined in delivery schedules are shown in yellow. Data specified in purchase order items are shown in blue. Data specified in the order header is shown in green. Conditions that originate from higher-level data records and have been split are shown in italics. Definitions of the slots: total.value: In total.value, the values from the current position incl. conditions and all its subordinate positions are stored. This value is displayed on the respective position as the position value. Example: Delivery schedule 100€ + 10€ surcharge on delivery schedule = total.value 110€. Order item: 1st delivery schedule line (total.value) 110€ + 10€ surcharge on order item = total.value 120€. gross.value: In addition to all current and subordinate item values, gross.value also includes the conditions apportioned from the header. This value is the actual value of the item. It is more accurate than the net.value in the order area because the header conditions are also added here, which also influence the item price, are included. This price is the basis for all subsequent calculations and display forms in which the real item value must be displayed or processed (average value calculation, warehouse valuation, etc.). This value is not visible on the items. Example: Surcharge of 100€ in the order header. Delivery schedule : total.value = 110€, gross.value = 210€. Order item : total.value = 120€, gross.value = 220€. In this example, the condition of the header has been "distributed" to the single delivery schedule line, it therefore receives the full surcharge of 100€. (Allocation logic is described below and in the tables). The allocation of the conditions from the purchase order items to the delivery schedule lines is done proportionally by the quantities specified in the delivery schedule lines to the total quantity of the purchase order item. Further examples are given in this Excel file. Conditions from the order header are divided proportionally based on the price volume of the order items. The intermediate price marked in grey is used to determine these prices. These proportions are then in turn distributed to the delivery schedule lines in the same way as conditions on order items. Explanation of the calculation of the order header condition to be apportioned based on the above example: Total surcharge on order header: €1000 1st order item: 1000€/14.160€*4.160€ = 293,79€ (surcharge/total volume order*total volume order item). 1st delivery schedule of the first order item: 293,79€/40*10 = 73,45€ (surcharge/total volume order item*quantity on delivery schedule line) 2. delivery schedule of the first order item: 293,79€/40*30 = 220,34€ (surcharge/total quantity order item*quantity on delivery schedule line) 2nd order item: 1000€/14.160€*10.000€ = 706,21€. 1st delivery schedule of the second order item: 706,21€/10.000*10.000=706,21€. Total volume of the surcharge: 706,21€ + 73,45€ + 220,34€ = 1000,00€. Determination of the total price of the order (in the order item window):. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Adopt the order item price as a supplier-specific price.: With the toolbar button the price of the order item is saved as a supplier-specific price on the order item (only if there is a supplier on the order and a parts order roll). If the order item has imputed conditions (discount, surcharge, freight, etc.), then the question is asked whether the price should be taken over with such conditions or without. If a supplier-specific price already exists for the order item and is "complex" (i.e. the price is a complex price with more than one price element or is defined as a conditional table or a function), then such a price cannot be overwritten. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Input window: This window is used to maintain order items. Use 'Part' to select the corresponding part from the order item list that opens. You can then insert the supplier's order number and edit the order text as required. In the field 'Delivery schedule' via 'Insert' you can enter the order quantity and your desired date. It is also possible to divide the order quantities and specify your desired date for the individual quantities, e.g. 10 pieces as soon as possible, rest on call. In the fields 'Remark' and 'Recipient' you can enter remarks about your order. In the lower part of the screen you can now enter the price of your order items and any discounts to be granted. Save the order item with 'OK'. The system assigns an item number and transfers the item to the order. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Quick order window: This window is used to quickly enter order items, e.g. for simple cost centre postingso or for JIT parts requests from a production order, which could then also be carried out by production itself. It is nevertheless possible to process the order via the normal order processing at any time. When a new order is entered quickly, the logged-on employee is proposed as the processor of the order. The supplier who is to receive the order should be selected first. A later re-determination of the supplier is only possible via the normal order mask. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Position data: This window is used to maintain the order item data. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Grouped positions: It is possible to check via the order status list or the order header via a toolbar button (Check price grouping) whether different order items of the same variant parts with different attributes can be grouped and thus a quantity discount can be knocked out of the price tables. This is possible if the attributes necessary for the price tables of the order prices are the same for all these actually differently marked variant parts. The corrected prices can then be applied to the order items after viewing them via a results window. This is the description of the functionality of the module "purchaseOrderItem" with the name "Order item" regarding Extend Order Process 2 - AppendPurchaseOrderItems: Interface description: CX_PURCHASE_ORDER (Vector, Collection, Object CX_CONTAINER) SendMsg(APPEND_PURCHASE_ORDER_ITEMS). The vector contains data prepared in the order header editing module. The message APPEND_PURCHASE_ORDER_ITEMS must not be called individually. If an order is to be extended by items, it is necessary to call the message APPEND_PURCHASE_ORDER. AppendPurchaseOrderItems: The transferred purchase order is held in the purchaseOrder variable. Then all other objects are passed through: First, all information available up to this point of the object to be created is plugged (macro PlugWithPredecessor) and an attempt is made to resolve any variant part that may exist. The (un)resolved part is kept in the variable orderItem, which is worked with in the further course. Now an order item is searched for in the transferred order that has the same part (macro FindPurchaseOrderItem). If such an item is found, this order item is called up with EditObject, otherwise a new one is created. A new delivery schedule line is later created on this order item. For this, the quantity to be ordered must first be determined. In some containers that were passed to the macro AppendPurchaseOrderItems, a quantity already exists. However, this is now converted by the macro GetAmountToOrder with the help of the lot sizes. If there was no quantity in the container, the default quantity is taken from the order item role. But first it is checked again whether the order item found is a blanket order (macro CheckCallForwardTransaction). If not, all relevant data from the previous document is transferred to the new order item and this is created/saved by SaveObject. If an order item with the same part has already been found, this information is not overwritten. A SaveObject is now not necessary. The macro CreateSubItem, to which the predecessor document and the quantity to be ordered are transferred, now creates a delivery schedule line with the correct quantity and also reposts the predecessor document correctly. The predecessor is also linked to the new transaction here. GetBasePurchasePrice: When the delivery schedule has been created, the price matching the possibly entered supplier can be searched for. A TRUE or a FALSE is passed to this macro, which controls in the macro where the required information that must be plugged in is taken from. The macro FindPurchasePrice is then used to fetch the supply agreement between supplier and part and passed to the macro GetPriceOfLogCube. If the macro GetPriceOfLogCube returns no price or an empty price, the default price is taken from the order item role and held in the variable tmpPriceDiscount using the macro AppendToTmpPriceDiscount. GetPriceOfLogCube: This macro determines the price from the passed LogCube. If there is no price, or if it is zero, the price of the last movement monitor of this supplier is searched for and returned if found. AppendToTmpPriceDiscount: This macro builds a valid price chain (CX_PRICE_DISCOUNT with subCharges) based on one or more objects passed in sequence. Here, all main chain links are retained, but their individual subCharges are resolved by a call to Amount(). If these were also taken over, the final result would be wrong, as the sub-discounts on a main chain link already refer to the discount and not to the main price. For example, if a chain link looks like this: +150€-10% then the -10% refers to the surcharge 150€ which in the end equals +135€. For further explanation of the price chains, see here. SaveConditions: The previously created price chain tmpPriceDiscount is split into conditions. A condition for the order item object is created for each price chain link.