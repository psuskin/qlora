This is the description of the functionality of the module "processes_documentEditing" with the name "Example printing (form creation)" regarding Comparison printing via MS Word with printing via XML: There are currently two printing methods, printing via MS Word and printing via XML. This section gives a first overview of how the printing methods work and their advantages and disadvantages. A more detailed description is given below. In general, printing via MS Word can be described as follows. At the beginning of the printing process, an empty Word document is created. Subsequently, the document modules assigned to the document are successively inserted into the generated empty Word document. The type or the sequence of blocks defines when and where the blocks are inserted. For example, the type "Footer" creates the footer of the document. The result is that the initially empty Word document is filled with content and can now be printed, saved, etc. When printing via XML, a template is stored behind the document. This specifies the layout of the printout. This can be done on the one hand by referring to the document modules to be used, but the content can also be stored directly in the template. For example, a reference can be made in the footer of the template that the document module is to be dragged to print the footer or the content can be stored directly in the footer of the template. When printing, the layout is dragged and evaluated (memorised), thereby setting the contents of all placeholders (document variables). The template is a Word XML document which is only converted into a Word document as a COM object after preparation. This is the description of the functionality of the module "processes_documentEditing" with the name "Example printing (form creation)" regarding Create a new document for XML printing: This section shows an example of how to create a new document for printing delivery notes. This is the description of the functionality of the module "processes_documentEditing" with the name "Example printing (form creation)" regarding Creating a document: The first step in creating a new document is to create the document itself. In this example, the document is given the number "SDN" and the name "Delivery note". The area "Sales" is defined in the application area and the restriction can be used to set that the document is only valid for delivery notes (class CX_DELIVERY_NOTE). {img type="fileId" fileId="281" thumb="box" width="100%"}. This is the description of the functionality of the module "processes_documentEditing" with the name "Example printing (form creation)" regarding Creating the template: The decisive step is now the creation of the template. The template is saved as a Word document in the directory "CX_ROOTDIR\appswh\data\Template\Forms\CX_PROJECT_NAME" under the name of the document, in this case defaultTemplate.doc. The template could look something like this. It has a header and a footer with corresponding document variables, which are described in the same way. It also has two section changes and further document variables. {img fileId="282" thumb="box" width="100%"} However, there are also a few hidden document variables. If you insert a few line breaks before the first section break, you will see that the document has a different header on the following page. The same applies to the two sections defined by the section breaks. The document variables, which are described in the next table, ensure that the content is read from the document modules defined in the document and inserted at the appropriate place. Alternatively, the content could also be inserted directly into the template as described above. Thus, one could remove the document variable "call(XMLPrintListHeader)" for inserting the building block of the list header and define the list header here directly, as the following image shows. {img fileId="284" thumb="box" width="100%"} However, it is also possible to insert content into the template without using document modules. This is even much easier, but does not offer the possibility of encapsulating modules and using them several times. It is easier because you can insert the content directly in the template. For example, it would be conceivable to insert the list header of the position list directly in the header of the template instead of the document variable "call(XMLPrintListHeader)". The same applies to the document header, footer and so on. And although you do not go via the document modules in this case, document variables can still be used as placeholders for inserting ClassiX data, such as "uniqueID" for inserting the document number. This is the description of the functionality of the module "processes_documentEditing" with the name "Example printing (form creation)" regarding Document modules: Document modules are used to manage Word documents that are inserted into the template. The documents must be assigned an ID, which must be unique so that the documents can be exported and imported. It is advisable to name the modules like the document into which they are to be inserted, supplemented by an abbreviation describing the type. It could also be a consecutive number, but then the ID would not be meaningful. The following extensions have been established using the example of the document "SDN". The type of the document module controls which task the module fulfils and where it is to be inserted. Thus, the module "list header" is inserted at all the places in the template where the document variable "call(XMLPrintListHeader)" has been defined. The Word document can be stored conditionally in the document modules. These can be fixed conditions, such as whether the module "Header" is to be inserted on the first page or on the following page. However, the conditions can also be formulated depending on general system information (e.g. query regarding the logged-in client) or data of the document to be printed (e.g. query regarding the order type), etc. The "document header" module has a special feature, which is usually always conditional. There is a condition for the first page ("print.counter=11111"). The document that was stored here is output as the document header. The Word document behind the condition for the next page ("print.counter=99999"), on the other hand, is used for the header of the next page. The advantage is that despite a uniform header across all documents on the first page, an individual document header can be set up on the following pages without the need for a document. In addition to the Word document, the module can also define options such as "new page before the module". However, these options are only valid for blocks of the type "list position" or "list groups" as well as the blocks which are freely inserted before or after the list. This is the description of the functionality of the module "processes_documentEditing" with the name "Example printing (form creation)" regarding Document variables: In the MS-Word Editor the layout design for the document header can be created. If you have no experience in using MS-Word with dynamic data fields, it is recommended to first create a static layout design by defining the formatting of tables, fonts and inserted graphics (see above figure).