This is the description of the module "objinsp" with the name "CyberEnterprise Inspector": This module "CyberEnterprise Inspector" is a collection of universal display and editing tools for the objects stored in a database. The Inspector basically fulfils three tasks: Display objects and collections (object lists) Editing data fields in objects navigate from one object to other objects via pointers and relations The Inspector also has a number of tools for advanced direct operations with objects and/or the database. Because the Object Inspector provides a user-friendly environment for direct data access, it is recommended to grant access to the CyberEnterprise Inspector only to specially trained users. This is the description of the functionality of the module "objinsp" with the name "CyberEnterprise Inspector" regarding Input window: Any persistent or transient object can be displayed in the inspector (tab Object Inspector). The actual editing and navigation functionality of the Object Inspector is divided into the following tabs:. This is the description of the functionality of the module "objinsp" with the name "CyberEnterprise Inspector" regarding Edit COM object: The COM object is displayed in the upper part of the window. In the lower part of the window, a list of the functions associated with this COM object is displayed. The function is called up by double-clicking on it. A window for entering the parameters is opened first. This is the description of the functionality of the module "objinsp" with the name "CyberEnterprise Inspector" regarding Enter DB address: The database address of a persistent object can be entered directly in this window. In the upper field a full database address of a persistent object can be entered directly. By clicking the button "Resolve" this address is displayed in the second line divided into the individual sections. Once an address with its individual sections has been entered, the OK button loads the corresponding object from the database into the Object Inspector. Structure of database addresses A database address is usually structured as follows: < Layer | Segment | Cluster | Offset | Size > The layer, segment, cluster and offset indicate the exact position where the object is stored in the database. The offset is given in hexadecimal notation, whereby leading zeros are (or can be) omitted. It should be noted that the specification of the layer is only relevant for ClassiXÂ® and is not relevant for ObjectStore. The uniqueness of an address results from segment, cluster and offset alone. The last part, Size, indicates the mapping size (in hex). This is 64 KB by default, i.e. 10000. If, for example, the following sentence appears in an error message, the database address can be derived from it: "The object is at offset 0x1374 within cluster #0, segment #384 of Database Y:\classix.cxd".