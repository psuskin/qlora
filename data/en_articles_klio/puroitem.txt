This is the description of the module "puroitem" with the name "Order item": General Framework order (blanket order) Subsequent connection BA <--> BE Order type: Subsequent connection order item -> delivery schedule line (requestor customer requirement) Determination of prices Calculation of the price conditions Adopt order item price as a supplier-specific price Order text field Order number. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding General: A part to be ordered and corresponding order data and conditions are recorded on an order item. An order item basically consists of one or more delivery schedule lines; details such as quantity, date and others are only given on individual delivery schedule lines. If a provision is required for the order item, a note is displayed next to the order type: ATTENTION: PROVISION. Next to this note a button "Beistellungen" appears, which opens the attached provisions. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Framework order (blanket order): An order item can be configured for subsequent call-off (blanket order):. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Order text field, note for supplier or recipient.: The order text field is blocked for blanket orders. This is because the system checks during extension whether the description of the blanket order and that of the part or requirement request to be inserted are the same. If this is not the case, the blanket order is not extended, because otherwise the description from the requisition would not be adopted. If you want to tell the supplier or the recipient something, there are the fields Note for supplier and Note for recipient, the view can be switched by clicking the corresponding button. These fields should be used especially if the actual order text of a part from the parts master, i.e. not e.g. a text article, is not sufficient or has to be supplemented for a special reason! If the actual order text is never sufficient or always has to be supplemented by the same addition, then this should be corrected in the master data or the supplier agreement. If you now have an open blanket order in the system and want to change the order text in the order item, you will receive a warning message in the order item which explains this difference and asks whether the now changed order text in the order item should be adopted in the blanket order!. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Subsequently combine an open requirement request item with an open delivery schedule line: If a requirement request item and a delivery schedule line from a purchase order item are created individually in the system, whereby they both belong to one business transaction, then such two items can be linked in a document chain: the requirement request item is to be dragged and dropped onto the delivery schedule line. Requirements: - exactly one requirement request item may be included - the delivery schedule must not have a preceding document - the requisition item should be open (not yet completely ordered) - Parts on the requisition item and the order item should be the same. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Subsequent connection order item -> delivery schedule (requester: customer requirement)-: There are four possible connection types between order items and delivery schedules:. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Determination of prices: The procedure for price determination for order items is as follows. The price found first is drawn into the order: (Macro GetItemSupplier in purcoedt.mod fetches suppliers, puroiedt fetches a price matching the supplier) 1. price agreements of the purchase contract selected in the order header 2. supply agreements of the A-supplier 3. last price of the part with the last supplier 4. first found delivery agreement of the ordered article 5. price from order article roll (standard price) 6. price from requirement request item If price 0 is drawn by one of these steps, the price is taken from the requirement request item or the previous order. The last price used is stored in the selected supplier's movement monitors. All discounts and surcharges are taken into account. The prices from the orders are processed in the following areas: 1. goods receipt 2. average price calculation 3. stock statistics (determination of the stock value) The goods receipt passes on the price received from the order to the other departments. Redetermination of the price If the order item consists of only one delivery schedule line, the price is determined anew each time it is saved and checked to see whether it has changed (e.g. manual entry). However, if the order consists of several delivery schedule lines, the price will only be redetermined after saving the processed delivery schedule line. This happens because the price often only changes when the number of items in the delivery schedule line is changed. If the attribute values are changed, the price is calculated anew each time. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Calculation of price conditions on order items and delivery schedules: There are two ways to provide order items with conditions. 1- You save the conditions directly in the order item. Then, after determining the delivery schedule line prices, the condition is offset against the result. 2- you save the conditions in the delivery schedule itself. In this way, valid conditions can be saved for each delivery schedule line, which have no influence on other delivery schedule lines. The result of the following conversions is stored in the slot gross.value. This is then used for further processing in the goods receipts and average value calculation. Absolute conditions: It should also be noted that absolute conditions (-100€) also affect the unit price. It is therefore multiplied, like all other conditions in the items, by the quantity stored for the item. Determination of the prices of the individual delivery schedules with absolute surcharges/discounts (e.g. in order status list and calculation of the values in average value calculation and stock value calculation) Data that were defined in delivery schedules are shown in yellow. Data that were defined in order items are shown in blue. Data that were defined in the order header are shown in green. Conditions that originate from higher-level data records and have been split are shown in italics. Definitions of the slots: total.value: In total.value the values from the current position including conditions and all their big.value: This price is the basis for all subsequent calculations and display forms in which the The allocation of conditions from the purchase order items to the delivery schedule lines is carried out proportionally by the quantities specified in the delivery schedule lines to the total quantity of the purchase order item. Further examples are listedin this Excel file. Conditions from the order header are divided up proportionally based on the price volume of the order items. The intermediate price marked in grey is used to determine these prices. These proportions are then divided up among the delivery schedule lines in the same way as conditions on order items. Explanation of the calculation of the order header condition to be split using the above example: Total surcharge on order header: 1000€ 1st order item: 1000€/14.160€*4.160€ = 293,79€ (surcharge/total volume of order*total volume of order item) 1. delivery schedule of the first order item: 293,79€/40*10 = 73,45€ (surcharge/total quantity order item*quantity to 2. delivery schedule of the first order item: 293,79€/40*30 = 220,34€ (surcharge/total quantity order item*quantity to 2nd order item: 1000€/14.160€*10.000€ = 706,21€ 1. delivery schedule of the second order item: 706,21€/10.000*10.000=706,21 Total volume of the surcharge: 706,21€ + 73,45€ + 220,34€ = 1000,00€ Determining the total price of the order (in the order item window):. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Adopt order item price as a supplier-specific price: With the toolbar button the price from the order item is stored as a supplier-specific price on the order item (only if a supplier is on the order and a parts order reel is available). If the order item has imputed conditions (discount, surcharge, freight etc.), the question is asked whether the price should be adopted with such conditions or without. If a vendor-specific price for the order item already exists and is "complex" (i.e. the price is a complex price with more than one pricing element or is defined as a conditional table or function), then such a price cannot be overwritten. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Input window: This window is used to maintain order items. Via 'Part' you select the corresponding part from the order item list that opens. You can then insert the supplier's order number and revise the order text as required. In the field 'Delivery schedule' via 'Insert' you can enter the order quantity and your desired date. It is also possible to divide the order quantities and specify your desired date for the individual quantities, e.g. 10 pieces as quickly as possible, rest on call. In the fields 'Comment' and 'Recipient' you can add comments to your order In the lower part of the mask you can now enter the price of your order items and any discounts to be granted. With 'OK' you save the order item. The system assigns an item number and copies the item into the order. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Quick order window: This window is used to quickly enter order items that do not have a predecessor, i.e. for cost centre orders. In comparison to normal order processing, only the essential order information is therefore recorded. This enables a fast entry of orders, e.g. in case of a JIT parts request for a production order by the production itself. Furthermore, JIT order faxes can be used for the creation of JIT order faxes. However, it is still possible to process the order via the normal order processing at any time. During the fast entry of a new order, the logged in employee is suggested as the processor of the order. First of all, a supplier should now be selected who is to receive the order. The supplier address and the fax number are then transferred. A later redefinition of the supplier is only possible via the normal order mask. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Position data: This window is used to maintain the order item data. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Grouped positions: It is possible to check via the order status list or the order header using a toolbar button (Check price summary) whether different order items of the same variant parts with different characteristics can be combined and thus a quantity discount can be deducted from the price tables. This is possible if the attributes required for the price tables of the order prices are the same for all of these variant parts which are actually differently marked. The corrected prices can then be applied to the order items after viewing them in a results window. This is the description of the functionality of the module "puroitem" with the name "Order item" regarding Extend order process 2 - AppendPurchaseOrderItems: {img type="fileId" fileId="424" thumb="box" width="100%"} Interface description: CX_PURCHASE_ORDER (Vector, Collection, Object CX_CONTAINER) SendMsg(APPEND_PURCHASE_ORDER_ITEMS) In the Vector there are edited data in the order header editing module. The message APPEND_PURCHASE_ORDER_ITEMS must not be called individually. If an order is to be extended by items, it is necessary to call up the message APPEND_PURCHASE_ORDER. AppendPurchaseOrderItems: The transferred order is held in the variable purchaseOrder. Then all further objects are passed through: First of all, all information of the object to be created that is available up to this point is plugged (macro PlugWithPredecessor) and an attempt is made to resolve any existing variant part. The (un)resolved part is kept in the variable orderItem, which is used for further work. Now an order item is searched for in the transferred order that has the same part (macro FindPurchaseOrderItem). If such an item is found, this order item is called with EditObject, otherwise a new one is created. A new delivery schedule is later created on this order item. For this purpose, the quantity to be ordered must first be determined. In some containers passed to the AppendPurchaseOrderItems macro, a quantity is already present. However, this quantity is now converted by the macro GetAmountToOrder using the lot sizes. If there was no quantity in the container, the standard quantity is taken from the order item roll. But first of all it is checked again whether the order item found is a blanket order (macro CheckCallForwardTransaction). If not, all relevant data from the preceding document is transferred to the new order item and this is created/saved by SaveObject. If an order item with the same part has already been found, this information is not overwritten. A SaveObject is now not necessary. The macro CreateSubItem, to which the preceding document and the quantity to be ordered is transferred, now creates a delivery schedule line with the correct quantity and at the same time correctly reposts the preceding document. Here the predecessor is also linked to the new transaction. GetBasePurchasePrice: Once the delivery schedule has been created, you can search for the price that matches the supplier you may have entered. A TRUE or a FALSE is passed to this macro, which controls in the macro where the required information, which must be plugged, is taken from. The FindPurchasePrice macro is then used to retrieve the supply agreement between supplier and part and to transfer it to the GetPriceOfLogCube macro. If the macro GetPriceOfLogCube returns no price or an empty price, the standard price is taken from the order item role and kept in the variable tmpPriceDiscount by the macro AppendToTmpPriceDiscount. GetPriceOfLogCube: This macro determines the price from the transferred LogCube. If there is no price or if it is zero, the system searches for the price of the last movement monitor of this supplier and returns it if found. AppendToTmpPriceDiscount: This macro builds a valid price chain (CX_PRICE_DISCOUNT with subCharges) on the basis of one or more objects transferred in succession. Here all main chain links are retained, but their individual subCharges are resolved by a call to Amount(). If these would also be taken over, the final result would be wrong, because the sub-discounts on a main chain link already refer to the discount and not to the main price. If, for example, a chain link looks like this: +150€-10% then the -10% refers to the extra 150€ which in the end equals +135€. For further explanations of the price chains, see here. SaveConditions: The previously created price chain tmpPriceDiscount is divided into conditions. For each price chain link, a condition is created for the order item object.