This is the description of the module "cxDocumentComponent" with the name "Document module": OLE objects in the document moduleExport / ImportA comprehensive document management system is also available in all ClassiX® applications. In it, you can not only create all your correspondence and all documents, but also design them flexibly and according to your needs. In addition, all documents are automatically managed on a transaction basis. ClassiX® thus implements an electronic document management in which you can find individual documents at any time directly via your business transactions or document history.The document modules are the enveloping objects for the OLE objects. They have a multilingual name, a number, the type, the OLE text and sub-modules.If a document module has submodules, these are taken into account when printing. The system behaves as if the module itself were a document, i.e. all submodules are printed in the same sequence as in the document (see Sequence when printing document modules). This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Creating a new document block: When creating a new document, the first thing to do is to define the type (document header, list header, list position, ) of the block so that the blocks are used for the correct purpose when printing. In addition to the normal module types, there are also 2 types that are only referred to as auxiliary modules. These are the type "Copy" and the type "Address". These building blocks are not included in the normal sequence of building blocks in the document and cannot function as sub-building blocks. Special building blocks: Next, the following options can be set for the module. The content of the document module must be defined as follows. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Editing the document module in Word: The module is connected to the ClassiX® system by inserting document variables. This is done via the menu insert/field. A window is opened, in which the desired field can be selected. The document variable can be found under the category Document Automation as field name DocVariable. By clicking the OK button a new document variable is created. In the document the entry { DOCVARIABLE \* MERGEFORMAT } is inserted. A second and faster way to insert a document variable is to use the key combination Ctrl + F9. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Connect to dynamic data fields: The dynamic data field must be inserted manually. The name of the data field is entered after DOCVARIABLE. Example: Insert the dynamic data field uniqueID: From becomes { DOCVARIABLE uniqueID \* MERGEFORMAT }. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Connecting with ClassiX® macros: This connection must also be inserted by hand. The macro call must also be entered here after DOCVARIABLE. The call is made via call(macro name) Example: Insertion of the macro OrderItemDescription: From becomes { DOCVARIABLE call(OrderItemDescription) \* MERGEFORMAT }. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Use of members of the ClassiX® objects: Members of the ClassiX® objects are also accessible from Word. To do so, the ClassiX® object is inserted as described above. The access to the object member then follows the C++ convention. Example: Using the String method of the ClassiX® object quantity: From becomes { DOCVARIABLE ordered.shortName \* MERGEFORMAT }. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Use of methods of ClassiX® objects: It is also possible to call object methods from Word. For this purpose, the ClassiX® object is inserted as described above. The access to the object method is then done according to the C++ convention. The transfer of parameters is possible. Example: Using the String method of the ClassiX® object quantity: From becomes { DOCVARIABLE quantity.string(NF_DIMENSIONED,NF_SIG_PRECISION) \* MERGEFORMAT }. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Formatting of document module: The document module can contain all the formatting options that Word offers. These can also be tables to structure the fields in the module. Simple text can also be inserted and freely formatted. Solves common problems when the selected formatting is displayed incorrectly. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Flow control: Word offers the possibility to control the process via branching. This is done with the IF instruction. This is inserted via the menu Insert/Field and by selecting the field name IF in the category Document Automation. The entry { IF } is inserted. The instruction must now be filled with the condition and the instructions for the two cases true and false. The entry is to be changed to The inverted commas next to the statement are important. These encapsulate the statement. In almost all conditions it is checked whether a value is present or not. The condition then looks like the following: { IF { DOCVARIABLE uniqueID } <> " " "statement for true" "statement for false" } This example checks whether the data field uniqueID is not equal to (<>) empty. Note that empty in Word is represented by two double quotes with a space between them. ( " " not "" ) If the condition is still not recognised, the document variable against which the comparison is to be made must also be placed in double inverted commas. Result: { IF "{ DOCVARIABLE uniqueID }" <> " " "statement for true" "statement for false" }. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Export / Import: export: Individual (selected in the list) or all document modules can be exported; the subordinate document modules are exported as well. The entire documents (together with all used document modules) can be exported in the list module "Document". This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Input window: This window is used to maintain document blocks. You can select a document module by entering the desired ID in the ID field and confirming with RETURN. If you want to call up the list window, you can select the menu item "Search". In general, your business documents are composed of several elements (document modules): Header first page (e.g. company logo, business address), salutation, footer first page, etc. You then compile a specific document from the predefined modules. You can enter the individual modules directly as text in the 'Document Module' window, but you can also create them in your standard word processing software, such as Microsoft Word. The modules can also be modular. By using 'fields', values can be taken over directly from ClassiX®. For example, you can create serial letters and dunning runs automatically. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding List window: Used to list the document blocks. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Selection window: This window is used to select a document module object. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Block usage: This window is used to list the documents that use the current document module. This is the description of the functionality of the module "cxDocumentComponent" with the name "Document module" regarding Import of the document modules: For the import of the document modules are required: Document module description file (contains document module header data such as number, name etc. and the list of submodules; default name component.dat) and associated pairs (for simple content) or pair groups (for conditional modules) of the MS Word files (e.g.e.g. 10_1.doc / 10_2.doc for the simple module 10 in two languages or 11_0_1.doc / 11_1_1.doc / 11_0_2.doc / 11_1_2.doc for the conditional module 11 with two conditions in two languages each) Before loading, a query window is used to select what to do with any existing blocks (overwrite, use, cancel). See also LOAD_DOCUMENT_COMPONENT. The entire documents (together with all document modules used) can be imported with the message LOAD_DOCUMENT.The whole documents (together with all used document modules) can be imported with the message LOAD_DOCUMENT.