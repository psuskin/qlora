This is the description of the module "appsched" with the name "Application Calendar": For tasks that are to be executed automatically in the background at certain times or that would place too heavy a load on the DP system during operation, there is the option of moving evaluation, closing and printing tasks to an application calendar. The tasks are then not executed directly, but scheduled for an automatic ClassiX service (server).Such tasks to be executed automatically are managed by means of so-called application calendars (entries). There are basically three different types of application calendars:Recurring tasksInterval tasksOne-off tasksRecurring tasks A task is called "recurring" if the smallest unit for repeating the task is "one day". These are so-called night runs, which are started daily by the system administration. To set up such a "night run" server, a ClassiX start file (e.g. as App Suite (*.cxp) or directly the app applicationScheduleExceute.app) must be executed on a client via batch file, which checks and processes all pending tasks at a certain time (e.g. every night as a cron service of the operating system).An example of an evaluation shifted to the night is the post-calculation of customer orders (this is a so-called system application). In the case of very large and complex orders, the ongoing post-calculation during daytime operations can cause considerable database blockages and waiting times. Such a post-run is activated in the client. Users also have the option of scheduling very extensive evaluations so that these can be found in their saved lists the next morning or these saved lists can be printed out during the night directly on the user's standard printer (these are so-called user applications). Each user can also schedule each evaluation several times with different settings. For each user, a separate user group is created with his specific settings and assigned to the respective user application. Examples of user applications: supply chain management Supplier declaration Only user applications have subordinate user groups with the execution steps they contain. System applications directly contain the execution steps. Once all these recurring tasks have been processed, the service terminates atomatically.Interval tasks If tasks are defined with an "interval", the call is not automatically terminated after all open tasks have been completed and the system repeatedly executes the various tasks at the respective defined intervals. "Interval" tasks are checked every 5 minutes (adjustable with environment variable CX_APP_SCHEDULE_SNIFFER_INTERVAL). Tasks can also be defined.One-off tasks If tasks are neither defined as "Recurring" nor with an "Interval", they are considered "one-off" tasks and are also only executed once. Such one-off tasks are also processed in the so-called night runs. This is the description of the functionality of the module "appsched" with the name "Application Calendar" regarding Input window: This app is used to maintain application calendar (entries). This is the description of the functionality of the module "appsched" with the name "Application Calendar" regarding List: This app is used to list all application calendar (entries). This is the description of the functionality of the module "appsched" with the name "Application Calendar" regarding Position window: This app is used to edit an application calendar (entry), whether group or individual execution. This is the description of the functionality of the module "appsched" with the name "Application Calendar" regarding Execution: There is a central app (applicationScheduleExecute.app) with which all pending application calendars are executed. This app can either be started directly (e.g. for night runs) or included in an app suite using the message EXECUTE_APPLICATION_SCHEDULE. Here, a separate time trigger is set for each interval application calendar (see applicationScheduleTriggeredStart.app), all other recurring or one-time application calendars are also executed. If new application calendars are constantly coming into the system (e.g. through an API), you can start an application calendar sniffer (see cxApplicationSchedule::StartApplicationScheduleSniffer), which searches for new application calendars at specified time intervals and executes them if it is their turn. If a task has been executed, either the task itself or, in the case of repeatable or system tasks, a copy of it is moved to the applications log. If warning or error messages occur during the execution of a task, they are suppressed and written to files separated by month in the directory \System\SystemOut\AppScheduleLog\YYYY-MM\xxxx.log. However, other tasks that have not yet been executed will continue to be executed. Scalability of night runs As there is usually only a short time window available for night runs, it is possible to start several night run instances and assign them to a category. The individual night runs then only perform the tasks that are assigned to their category. Here a main instance, e.g. category A, should be defined, which is then executed shortly before the other instances, so that it can complete leading system tasks (start statistical periods, import latest currency table), which the other instances will use later. A category can therefore be assigned to each application. In addition, each application can be given a code number for the sequence. When the night runs are executed, all applications are sorted in ascending order. Thus, the task with the highest priority has the lowest number. The category of the instance is assigned using the environment variable CX_BATCH_ID. This can be set before calling the system with the command "SET CX_BATCH_ID=A" or via the system environment variables!. This is the description of the functionality of the module "appsched" with the name "Application Calendar" regarding Pending application calendar entries: This app is used to list the application calendar entries to be executed in the near future. Here, for example, you can check what will be started today. The dates of recurring applications are also calculated and taken into account. The user can be set as a filter. Only users for whom due applications are scheduled are displayed in the user list. If no user is registered, the pending tasks of all users are displayed. Using the date field, the due date can also be checked for a date in the future. This is the description of the functionality of the module "appsched" with the name "Application Calendar" regarding web service: Application calendars can also be started with the POST message EXECUTE_APPLICATION_SCHEDULE?USERID=myUserID&PASSWORD=myPassword&BATCHID=A via a web service.