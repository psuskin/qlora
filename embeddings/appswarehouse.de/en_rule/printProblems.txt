This is the description of the module "printProblems" with the name "Printing troubleshooting": Due to the interaction of ClassiX® with Microsoft Word OLE objects, many peculiarities can arise when creating objects. This page lists the known peculiarities and their possibilities to avoid them. Blocks are not displayed contiguously Formatting of the DocVariable is not reproduced correctly. DocVariable is not recognised Finding required DocVariables Standard DocVariables IF condition is not interpreted correctly A document module is not printed Tricks and tricks when calling external OLE objects. This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding Blocks are not displayed contiguously: One of the possibilities for an incorrect display of document blocks is a "hard line break" in a dynamic data field. These can be found quickly in the Word Editor in the formatting view (¶). The line break should either be removed completely or replaced by a soft line break ( Shift + Return ). This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding Formatting of the DocVariable is not reproduced correctly: Microsoft Word sometimes plays mean tricks on users and developers. During the development phase of ClassiX® the phenomenon occurred that a DocVariable in an OLE module is assigned a certain format (e.g. Arial, bold, italics) and then later on is not displayed correctly when printed. In this case it helps unfortunately only the whole block (or table column) in which the variable is to be reformatted. The best way is to mark the block and set it to normal format ( Shift + Ctrl + N ). Afterwards the formatting can be set again. This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding Document variable is not recognized: Word reports that the document variable is not available when editing the OLE module: In the simplest case, this could be due to a typing error in the document variable. To check the spelling of the variable, switch to the field function mode (Alt + F9). If the variable is written correctly, it could still be an update problem. Exit the Word Editor and call it up again. This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding Finding required DocVariables: The required DocVariables can be identified via the monitor window. To do this, move the mouse pointer over the element to be included (e.g. the customer's address in the offer mask) and press the right mouse button. The monitor window opens and the title bar already contains the name of the desired object (in this case: "address"). With the InstantView® command " GetObject "you get the desired object on the stack and with the call: " SendMsg(INSPECT_OBJECT) "the object can be viewed in the object inspector. In the object inspector you can now view the attributes of the selected object. For example, if we want to insert the customer's company headquarters as DocVariable in a document module, we note this in the DocVariable as follows: (cf. insertion of "dynamic data fields"). This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding Standard DocVariables: In order to make processing in document creation a little easier, some of the most important DocVariables for document creation are listed here. "var ": The InstantView® variables can be accessed via the function:"var()". (Example var(cyberEnterprise).uniqueID="000" determines the current client) See also:"Access expression ("var") In order to locate the InstantView® variables in the monitor window, the object "cyberEnterprise" can be placed on the stack. From here the variables can be accessed with the function"Get()" or"Copy()". Or via: " SendMsg(INSPECT_OBJECT) "the object can be viewed in the object inspector. Similarly, you can also call up the monitor window from the print dialogue and select printObject place the entire document on the stack. This can now again be checked with the object inspector ( SendMsg(INSPECT_OBJECT) ) and search for variable names. "call ": With the help of the special function call(macro name ) InstantView® macros, which provide a return value, can also be accessed to use them as DocVariable. If the macro returns an object as return value, the access expressions can also be used in the conventional way. For example call(Makroname).y List of frequently used InstantView® variables. This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding IF condition is not interpreted correctly: In almost all conditions it is checked whether a value is present or not. The condition then looks like the following: { IF { DOCVARIABLE uniqueID } <> " " "Instruction for true" "Instruction for false" } This example checks whether the data field uniqueID unequal (<>) is empty. Please note that empty in Word is represented by two double inverted commas with a space between them. ( " " not "" ) If the condition is still not recognised, the document variable against which the comparison is to be made must also be placed in double inverted commas. Result: { IF "{ DOCVARIABLE uniqueID }" <> " " "Instruction for true" "Instruction for false" }. This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding A document module is not printed: A document module (e.g. the header) was not printed. This is the description of the functionality of the module "printProblems" with the name "Printing troubleshooting" regarding Tricks and tricks when calling external OLE objects: Extract from Microsoft Visual-Basic Help Activate method Activates a specified object. syntax 1 expression.Activate(Wait) syntax 2 expression.Activate Printout Required. An expression that returns a task object(syntax 1) or another object (syntax 2). To see a list of available objects, click Subject. Wait Optional Boolean. Task object only. True to wait until the user has activated Word before the task is activated. False to activate the task immediately, even if Word is not activated. Extract from Microsoft Visual-Basic Help Range property Returns a Range object representing the part of a document contained in the specified object. Read-only access. For more information about how to return a range from a document or a shape range from a list of shapes, see the Range method. Related topics.