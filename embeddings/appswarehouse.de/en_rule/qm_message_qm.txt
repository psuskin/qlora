This is the description of the module "qm_message_qm" with the name "Messages, garbage collection, module reloading": This routine tests the following functions and tries to detect errors: Message Passing Sent and received messages are counted and the counters are compared. CURRENT / NON_CURRENT for the modules is monitored and it is tested whether the messages received from window objects arrive according to the parent-child hierarchy. Garbage Collection Each module tests an invariant value for immutability - i.e. protection against garbage collection - while all modules intentionally produce a lot of stack data. Reload modules There are three different implementations for the Beta module, but they all respond to the messages sent by the main programme. From time to time, the current version for module beta is replaced by one of the others in random order. The test runs endlessly, so it is intended for a longer runtime. As soon as an error is detected, an error message appears. At the same time, a log file is created in the directory where the ClassiXÂ® application was started. This allows to follow the test procedure and possible errors are recorded. // This module performs all actions in random order, thus we may detect errors // that occur under certain conditions only. // These actions are: // sending message ALFA, BETA, or GAMMA // sending message CLOSE_WINx with (x = A, B, C) // reloading module Beta with different implementations (1 - 3) // // Actions and errors are written into file MSGTEST.LOG // // // This test routine covers the following basic functionality: // // - Corrent Message Passing // Sended and received messages are counted and checked. // Window objects check arrival of messages according to parent-child-hierachy. // CURRENT / NON_CURRENT received by any module are tested to arrive in proper sequence // // - Garbage Collection // To detect possible errors in garbage collection, invariant values are repeatedly checked and // all modules produce deliberately lots of garbage. // // - Reloading of Modules // Module Beta is frequently reloaded, chosing arbitrarily among there are 3 different implementations. //.