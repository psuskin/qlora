This is the description of the module "security" with the name "Access rights for users": Overview Access to data fields Create and logically delete objects Lock InstantView® messages Special messages for blocking functionality Disable Monitor-Window Force login - the master security object Locking the database for external programs Summary Examples of access rules. This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Overview: The ClassiX® system offers a highly differentiated system for monitoring and restricting access rights. This security system of ClassiX® is optional, it can, but does not have to be used. However, a user can modify his database so that access is no longer possible without monitoring access rights. The access rights are described in the core by security objects. In addition, evaluations(stored lists) of authorised users can be activated for other - unauthorised - users. Security objects can prevent or allow the following: ¹) This refers only to persistent objects from the database. For transient objects there is no control of access rights! The security objects describing the access profile of a certain user are linked to the CX_USER object for this user and are activated at login (logged in to the ClassiX® system). Registered security objects remain active until the next start of the ClassiX® system, they cannot be deactivated again. Now there is still the possibility that unauthorised persons gain access to sensitive data with self-written InstantView® code. You can also protect yourself against this. If a database contains a master security object, any unauthorised access with InstantView® instructions is impossible. If you still want to see certain data, you have to develop your own programs in C++. If someone has the necessary means and energy, he/she can access not only the data objects but also information about the stored classes. That means this is a serious possibility to read or even modify protected data without authorization! In the last section of this overview we show how this entrance gate can also be closed! This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Access to data fields: As mentioned above, read and write access to certain data can be prevented. The scope of such restrictions may relate to The information on this level firstly affects all data fields of an object, including dynamic data fields of course. Different access rights can be assigned for certain access expressions (CX_ATTRIBUTE_SECURITY). Objects of the class CX_ATTRIBUTE_SECURITY are always subordinate to either a CX_CLASS_SECURITY or a CX_OBJECT_SECURITY object. The most general case of a description of read/write permissions applies to all access expressions for all objects of a certain class or classes derived from it, the most specific case concerns a very specific access expression when it is applied to a very specific individual object. Different security objects of the classes CX_CLASS_SECURITY and CX_OBJECT_SECURITY²can be combined with an object of the class CX_SECURITY_SET. By combining general and more specific statements, access rights can often be described with only a few objects. ²) this also applies to CX_MESSAGE_SECURITY and CX_SECURITY_OPTIONS, see below CX_ATTRIBUTE_SECURITY objects never occur directly in the security set. If the ClassiX® system checks the authorisation of an access via access printout to a certain object and a security set is active, the first element of the set decides which one is applicable for the case. If none of the security objects in the security set provides a statement, access is prohibited. If a security object is active in the ClassiX® system, the following applies: Everything that is not explicitly allowed is prohibited! But this is no problem: A CX_CLASS_SECURITY object for the class CX_CLASS (and derived), which allows everything, forms a background for special deviating specifications. The order in the security set plays a role here: general statements may only come after the specific ones. Security sets may contain further security sets as an element. All descriptions of access rights can be represented by security objects in the correct arrangement in a security set. As a set, you can create subgroups of certain rights and then assign a combination of such subgroups to a user in a security set that combines the subgroups. There is another possibility: Put specializing security objects in the collection spezializations of a security object with a general statement. It makes no difference in terms of content whether the security objectS1 describing the special cases is located in a set before the object with the general definition S0, or whether only S0 is found in the set and S0 refers toS1 via specializations. However, the latter method is faster. Fewer objects have to be tested,S1 only checks if the parent object could already make a statement (see performance notes). This is the description of the functionality of the module "security" with the name "Access rights for users" regarding What happens in case of unauthorised access?: The AdjustView command resets the NON_SELECTABLE state if write permissions exist. By adjusting an input window with AdjustView before the user's input, one avoids that the final DrainWindow with error 638 can fail. This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Create and logically delete objects: Permission or prohibition for this can only be given per class - with CX_CLASS_SECURITY objects. Everything that has been said about the possibilities of combination when it comes to access to data fields also applies here. The following InstantView® commands are affected:. This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Lock InstantView® messages: When a security object of the class CX_MESSAGE_SECURITY is logged on to the ClassiX® system (usually as an element of the logged on CX_SECURITY_SET object), it blocks the message. The following InstantView® commands are affected: It makes sense to use the TestMsg instruction to adapt the menus or buttons of an application in such a way that the affected sub-applications cannot be selected in the first place. This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Special messages for blocking functionality: In some modules of the AppsWarehouse®, functionality is limited due to blocked messages. The following messages are defined:. This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Disable Monitor-Window: With the monitor window, the InstantView® interpreter is available for interactive execution of commands, also with access to the objects in the database. This possibility should not be available to every user. An object of the class CX_SECURITY_OPTIONS provides 96 bits with which special system functions can be explicitly permitted - as soon as such an object is active. At present, only bit 0 is occupied and assigned to the start of the monitor window. This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Summary: The access to a company's data in the database of the ClassiX® system can be controlled on different levels: Objects of class CX_MESSAGE-SECURITY control access to sub-applications. The class CX_SECURITY_OPTIONS allows or blocks certain system functions / system options - currently only the call of the Monitor-Window. This is the description of the functionality of the module "security" with the name "Access rights for users" regarding Examples of access rights: The structure of the access rights should consist of three parts. The first part should consist of a default lock that must be assigned to each user or group of users. Thus, the normal user should not have access to administrative areas. However, each user must have access to their password in order to reset it themselves. In the second part, the specific settings of the users or user groups are configured. Here, all module areas to which the user may not have access should be locked by the class access objects. In addition, however, all class types that the user is allowed to edit should be unlocked here, since a default access restriction of almost all classes follows in the next area. (If conflicting access restrictions occur, the first one always applies. This allows a standard registration deadline to be defined, which can be specified by this part). In the last part, a standard release of all classes should take place. In particular, the classes that are used everywhere in the system but do not describe a business object. These include, for example, date objects, counters, monitors and others. Reading access should also be granted to all classes. Exceptions can be defined in one of the previous parts.