Dies ist die Beschreibung des Moduls "genproce" mit dem Namen "Modul Generator für Belege ohne Positionen": Der Geschäftsobjekt Modul Generator erzeugt AppsWarehouse® Module auf Grundlage von Templates (*.gen). Es wird folgender Aufbau erzeugt.Modulgenerator für Belege ohne PositionenDer Modulgenerator für Belege ohne Positionen generiert vier AppsWH Module, eine Workflow-Lade-Datei, eine Transaktionsbeschreibungs-Lade-Datei und erweitert die EXT und MSG.Anleitung für das Erstellen eines neuen Beleges ohne Positionen Generieren der Module/Dateien über den Modulgenerator. Erweitern des EditWin um die Datenfelder, welche für die Beschreibung des Beleges notwendig sind. Nachdem dies getan wurde, sollte direkt im Anschluss das SetListBox Makro angepasst werden. Anpassen des generierten Workflows und der generierten Transaktionsbeschreibung an die Anforderungen des Beleges. Sollte der Beleg relevante Datenfelder besitzen, welche durch eine Firmenrolle oder beispielsweise einem Mandanten voreingestellt werden sollen, so ist das DefaultTransactionWin in der entsprechenden Gruppe um diese Datenfelder zu erweitern. Wichtig hierbei ist, dass die verwendeten Slots identisch sind mit denen im EditWin. Es ist ein Bitmap (mit grauem und weißen Hintergrund) für den Beleg zu erstellen und in ivFunction.mod die Case-Anweisung der Makros G_GetPicture und G_ObjectDescription um die neue Klasse zu erweitern. Um das generierte Druckmodul nutzen zu können ist es notwendig noch ein Druckdokument zu erstellen. Die ID dieses Dokuments sollte ein aus drei Stellen bestehendes Buchstabenkürzel der Klasse sein. Der Beleg ist einem Typ bzw. einem Bereich (Bsp.: Einkauf, Verkauf, FiBu, Lager, ) zuzuordnen. Im INITIALIZE des Druckmoduls sollte die Variablen defaultDocumentID und documentArea mit den soeben definierten Daten initialisiert werden. Das Makro SetWinTitleStart ist durch einen treffenderen Fenstertitel zu ergänzen. Bsp.: Erstellen eines ersten Dokumententwurfes: (IN EINER TESTDATENBANK) Einfügen der allgemeinen Kopf und Fußzeile in das Dokument Einfügen eines bestehenden Dokumentkopfes in das Dokument, welcher vom Layout dem zukünftigen Dokument ähneln soll. (Eigentlich sollten alle das Unternehmen verlassenden Dokument einander sehr ähnlich aussehen) Dieser Dokumentbaustein muss eine neu ID und sollte eine eigene Bezeichnung bekommen. Wird das neu erstellte Dokument nun exportiert und in einer neue (Test-)Datenbank geladen, so wird der zuvor verwendete Baustein auf Grund der neuen ID nicht überschrieben und das Dokument kann nun angepasst werden. Folgende Templates werden verwendet ./AppsWH/process.gen - (Basismodul) ./AppsWH/proceedt.gen - (Editiermodul) ./AppsWH/procesel.gen - (Selektionsmodul) ./AppsWH/proceprn.gen - (Druckmodul) ./AppsWH/data/txn-wf/DEFAULT_WORKFLOW.gen - (Workflow) ./AppsWH/data/txn-wf/DEFUALT_TRANSACTION_DESCRIPTION.gen - (Transaktionsbeschreibung) Aufbau Modul Makros Messages Fenster Basismodul (examp.mod) Makro Beschreibung InitCounter Der Counter zur Klasse wird gesucht, wenn nicht gefunden wird einer erzeugt. SetListBox SetFormat Anweisungen für die ListBox ListObjects Finde alle Objekte der definierten Klasse PickObject gesendet empfangen EDIT_XXXX XXXX_CREATED XXXX_CHANGED XXXX_DELETED SelectWin OptionsWin Editiermodul (exampedt.mod) Makro Beschreibung SetOptions Dient der Initialisierung des Moduls bezüglich der Optionen und wird dementsprechend im INITIALIZE des Moduls aufgerufen. CreateSymbol Dient dem Anlagen von Bitmaps InitBitmaps In diesem Modul werden die verwendeten Bitmaps angelegt und Variablen zugeordnet. (Beispiel: withoutCommentBitmap/withCommentBitmap für den Notiz Button) SetTxnManager Laden der einzelnen Transaktionsbeschreibungen SetAllTxnManagers Laden aller Transaktionsbeschreibungen ListObjects Listet die Objekte, welche bei der LIST - Message übergeben werden, im SelectWin an. InitModule Allerted des EditWin und sperrt den OK Button InitWindowWithObject InitWindowWithObject ListBusinessPeriods SetStaffMemberBox EditObject Objekt bearbeiten ObjectChanged Falls das Objekt geändert wurde, wird Speicher Knopf freigeschaltet. CreateObject Erzeugt Objekt der definierten Klasse UpdateObject SaveObject Änderungen am Objekt speichern RemoveObject Objekt löschen BookObject Bucht den Beleg UnbookObject Bucht den Beleg aus gesendet empfangen EDIT_XXXX LOAD_XXXX LIST_XXXX EDIT_XXXX XXXX_CREATED LIST_XXXX XXXX_CHANGED TEST_XXXX XXXX_DELETED XXXX_DELETED EDIT_COMMENTS COMMENT_CHANGED EDIT_PROCEEDINGS CREATE_LETTER SHOW_PREVIEW COPY_TO_CLIPBOARD EditWin SelectWin Selektionsmodul (exampsel.mod) gesendet empfangen XXXX_SELECTED SELECT_XXXX SelectWin Druckmodul (exampprn.mod) Makro Beschreibung SetWinTitleStart Durch dieses Makro wird der Fenstertitel des Druckfensters initialisiert. Nach der Erstellung des Moduls sollte hier dementsprechend der allgemeine Titel in einen treffenderen Umgewandelt werden. Basismodul Fenster Widgets SelectWin Menü Optionen Groups ListBoxHeaderGroup: darin befinden sich die Widgets für die Suche Prompts UniqueIDPmt FString UniqueIDFStr ObjectListView ListBox Buttons OKBtn, CancelBtn OptionsWin Menü Bearbeiten -> Standardeinstellungen setzen Notebook TypeWin -> Standard Optionen Gruppen SearchOptionsGroup - Suchoptionen LimitObjectsGroup: für die Anzahl der Objekte Checkbox SelectOneObjectBox -> sofortige Übernahme bei einem Treffer ClearListBeforeSearchBox -> Liste vor neuer Suche zurücksetzen RadioButtons NoLimitRadio: Alle Objekte SetLimitRadio: Anzahl Objekte Limit100Radio: 100 Objekte Integer SetLimitStr: für Eingabe der Anzahl der Objekte Statusbar Buttons OKBtn. Dies ist die Beschreibung der Funktionalität des Moduls "genproce" mit dem Namen "Modul Generator für Belege ohne Positionen" bezüglich Eingabefenster: Nachdem die Eingabe des Basismoduls erfolgte, werden automatisch die Dateinamen des Editier- und Selektionsmoduls vorgeschlagen. Die vorgeschlagenen Dateinamen sind allerdings nicht bindend und können geändert werden. z.B.: Basismodul: customer / system Automatisch vorgeschlagene Dateinamen: Es ist unbedingt zu empfehlen die vorgeschlagenen Dateinamen zu benutzen, um Einheitlichkeit und Übersicht zu gewährleisten. Das Muster gibt an nach welcher Vorlage (Template) das Modul erzeugt wird. Wenn eine Klasse ausgewählt wurde werden, wie auch bereits bei Dateinamen beschrieben, der Name der Nachrichten und der Variablenname automatisch vorgeschlagen. z.B.: Klasse: CX_CUSTOMER Messages: EDIT_CUSTOMER, LIST_CUSTOMER, ., CUSTOMER_CREATED, etc. Variablenname: customer Auch hier die Empfehlung die Vorschläge zu übernehmen, zwecks oben beschriebenen Gründen.