This is the description of the functionality of the class "CX_TIMED_TRIGGER - Signal Class" regarding Description: An object of this class can be used to manage actions that are not to be triggered immediately, but at one or more specific times. The action consists of two steps (each optional) and is triggered at the time set with SetActionTerm: With SetCycles, the maximum number of transmitted signals can also be fixed. If both start message and end message are defined, the start message is always sent before the end message. The sent messages are always called up on the stack with the same parameters: Application examples:. This is the description of the functionality of the class "CX_TIMED_TRIGGER - Signal Class" regarding Code example: The TimeTrigger runs in a separate thread. This means that it sends messages even if the main thread is busy and cannot process the messages at all. The messages are then queued until the main thread is free again and are then received. In this way, the same message from the TimeTrigger can be received relatively often within a short time. The following example code only takes into account the last message of the collected ones and ignores the others. // create timed trigger CreateTransObject(CX_TIMED_TRIGGER) -> timedTrigger (TIME_TRIGGER_MESSAGE) timedTrigger Call(SetMsg) CreateTransObject(CX_PERIODIC_SPAN_TIME, KEEP) -> tmpTime // Set frequency in seconds 5s tmpTime Put(frequency) // fire once every 5 seconds 3 tmpTime Put(validEnum) tmpTime timedTrigger Call(SetActionTerm) // Activate trigger timedTrigger Call(Activate) // Handling duplicate messages in the trigger message TIME_TRIGGER_MESSAGE: Integer -> tmpIndex DropAll // only execute the last message if there are more than one in the pipe timedTrigger Call(TimesTriggered) tmpIndex > if return.