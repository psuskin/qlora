This is the description of the functionality of the class "CX_JSON_PARSER" regarding Description: This class provides the functionality to convert JSON into objects and to serialize them again as JSON. This is done explicitly via a separate class, because since RFC 7159 a JSON also consists of a basic data type (like INTEGER) can consist of. For example, 123 is a valid JSON. If the JSON is an object, or an array, then a CX_JSON_OBJECT or CX_JSON_ARRAY is constructed by the parser. These offer the possibility to further process the data structure. Everything returned by LoadFromString and LoadFromFile can be passed back to WriteToString and WriteToFile and the resulting JSON will be identical (except for formatting) to the original JSON. In order to implement this mapping, the type CX_BOOLEAN had to be used for the JSON values true and false. The InstantView literals TRUE and FALSE are translated into the integer values 0 and 1. Thereby the type information is lost. This is the description of the functionality of the class "CX_JSON_PARSER" regarding Code example: * MA = Member Access Function ANY* = STRING | CX_STRING | INTEGER | CX_INTEGER | CX_FLOAT | CX_NUMERIC | CX_BOOLEAN | CX_JSON_OBJECT | CX_JSON_ARRAY | NULL * I = Indexable data field.