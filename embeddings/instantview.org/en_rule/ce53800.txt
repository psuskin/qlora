This is the description of the class "CX_SECURE_OBJECT_LOCATOR": 210849. This is the description of the functionality of the class "CX_SECURE_OBJECT_LOCATOR" regarding Description: This class offers with GetLocation&GrabObject an interface similar to CX_DB_UTILITY. The name equality is quite intentional, because the methods do the same with the addition that GetLocation additionally encrypts the ID with AES-128-CBC and then signs it with AES-128-CMAC. GrabObject checks the signature and decrypts the ID before the object/collection is loaded. Encrypted IDs should be used everywhere, if real database addresses are too dangerous (because they can be manipulated by attackers) and the construction of own IDs via the uniqueID or maps is too complicated or slow. The CX_SECURE_OBJECT_LOCATOR has a 48-byte binary key (consisting of aesKey, iv, macKey) that represents the entire state of the object and ensures that a generated ID can only be loaded from the object with the correct key. The current binary key can be read out in form of a Base64-String (64 characters long) via Methdoe GetKey and can be replaced by a new one via SetKey . The CX_SECURE_OBEJCT_LOCATOR is always initialized with a random key so that the objects of the class can be used directly without further initialization. Because each CX_SECURE_OBJECT_LOCATOR object is initialized with a random key, two locator objects are basically incompatible with each other and cannot load the IDs of the other object. If both objects are to generate and load the same IDs, they must be initialised with the same key (SetKey). The generated IDs should not be stored persistently, as their format could be changed if necessary. This is the description of the functionality of the class "CX_SECURE_OBJECT_LOCATOR" regarding Encryption scheme: aesKey = key for AES encryption iv = initialisation vector (this is contained in the 48 byte long key) macKey = Key for MAC calculation (This is contained in the 48-byte long key) A + means that the contents are concatenated. BASE64( ) The MAC code is a signature that is used in GetLocation to verify that the ID was generated by this CX_SECURE_OBJECT_LOCATOR before decrypting the ID. Without the knowledge of the key, an attacker cannot generate or guess a valid ID. To guarantee this, the MAC is calculated using the AES key and the initialization vector in addition to the encrypted message, so that a change in one of the parameters will result in a different MAC being generated. The MAC is calculated on the encrypted data(Encrypt-Then-Mac), which is generally considered best practice because it prevents padding Oracle attacks. The use of AES also prevents an attacker from being able to calculate the key if he knows (from wherever) the encrypted id in plain text, as there are no known plaintext attacks against AES. Before encryption, the object IDs are binary recoded to save space, so that a typical ID is "only" 32 characters long despite MAC and base-64 encoding. This is the description of the functionality of the class "CX_SECURE_OBJECT_LOCATOR" regarding Code example: * MA = Member Access function, grey background = inherited function * I = Indexable data field, grey background = inherited data field.