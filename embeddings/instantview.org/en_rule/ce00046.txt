This is the description of the class "CXB_MULTIPLE_STRING - Arithmetic": The following overviews show the mathematical operators and the operands with which a multilingual text can be linked. Addition When adding to an ML_STRING, the added value is exported in as many languages as the ML_STRING contains and then both ML_STRINGs are concatenated language by language. Thus, T("sand", "eggs") + "clock" is equivalent to the expression T("sand", "eggs") + T("clock", "uhr") The addition is not commutative. Attention: If an ML_STRING is passed as a second value that contains fewer languages than the first, then all unset languages are exported as "". The fallback language is not taken into account here! ML_STRING + STRING = ML_STRING T("sand", "eggs") + "clock" = T( hourglass, egg timer ) ML_STRING + CX_VALUE = ML_STRING T("Quantity: ", "Amount: ") + 1 pair = T("Quantity: 1 pair", "Amount: 1 pair") ML_STRING + ML_STRING = ML_STRING T("Hello ", "Hello") + T("world", "world") = T("Hello world", "Hello world") T("Hello ")+T("world", "world")=T("Hello world")T("Hello ", "Hello ")+T("World")=T("Hello World", "Hello ")T("Hello ", "")+T("world", "world")=T("Hello world", "world") Note: If two ML_STRINGs are to be concatenated by + where it is unclear how many languages are set, then one can explicitly specify the number of languages in the result by adding both strings to an empty ML_STRING with a corresponding number of languages. Ex: T("", "") firstName + surName + Multiplication In most cases the multiplication is equal to the addition. In contrast to the addition, the value that is added is only exported in the current language and then chained with all languages (so to speak multiplied out). The multiplication is not commutative. The following equivalence applies to the multiplication: ML_STRING X * <==> ML_STRING X String + ML_STRING * STRING = ML_STRING T("sand", "eggs") * "clock" = T( hourglass, egg timer ) ML_STRING * CX_VALUE = ML_STRING T("Quantity: ", "Amount: ") * 1 pair = T("Quantity: 1 pair", "Amount: 1 pair") ML_STRING * ML_STRING = ML_STRING T("Hello ", "Hello") * T("world", "world") = T("Hello World", "Hello World").