This is the description of the class "CyberEnterprise - Model classes": The description of the classes is aimed at both new users/developers who want to get to know the functionality as well as experienced users who use it as a reference book. Basically, each class is not only described for itself, but also related classes are shown by the inheritance hierarchy and their possible uses are illustrated by examples of use and cross-references to other classes. A class is a software-technical description of objects with the same properties. In CyberEnterprise® all class names begin with the abbreviation "CX_". Example The "Date" class (CX_DATE) describes the structure of a date and the operations that can be applied to a (any) date. A date consists of a day, month and year. One operation that could be performed on a date is to return its weekday. The "26 March 1996" is now a variant of this class, i.e. it is an object. If the method "return weekday" is called for this object, the result is "Tuesday". This is the description of the functionality of the class "CyberEnterprise - Model classes" regarding The basic class structure: All business objects within the ClassiX® architecture are derived from the class CX_CLASS . This class mainly serves as a base class for the polymorphism of the arithmetic and comparison operators of all objects in ClassiX® and it enables the type-specific identification of all objects at runtime. Two main areas are derived from this class in CyberEnterprise® : On the one hand, the basic classes of the ClassiX® InstantView® enterprise model are derived from CX_CLASS . These are assigned to the areas of elementary and special data types as well as tool classes . On the other hand, the actual model classes are derived, which in turn are derived from each other over many levels. At each level of inheritance, the properties of the derived classes expand. Objects of the type CX_SIMPLE can say something about their state, objects of the type CX_TERMED can be restricted in their validity, objects of the type CX_EXPANDABLE can be extended by any other attributes (the so-called slots) at any time and also have a unique identification, objects of the type CX_OBJECT allow access restrictions and finally, objects of the type CX_STRUCTURED can be structured as desired. Since all these classes are in an inheritance chain, objects always inherit all properties of all classes below them. INTEGER" /> Finally, the class reference is aimed at the experienced user who is quickly looking for information for a specific class.