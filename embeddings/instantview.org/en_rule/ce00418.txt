This is the description of the class "CX_FORMULA - Constant": (dimensionless) numeric constants are either integers or real numbers, whereby - as in all programming languages - the decimal places are separated from the integer part with a dot: Example 2 .71828for dimensioned numerical constants, a unit of measurement follows, example 2 .37cm If the unit of measurement consists of a quotient, it must be placed in square brackets:{CODE( caption="Example" theme="default")}2.5[cm/g]{CODE} Otherwise the unit of measurement in the denominator would be regarded as a variable (in 2.5cm/g as the variable g by which to divide). Some units of measurement have different names in different languages; the dimensional constants adapt to the currently set language.Enumeration constants are recognised from the context in the formula expression if they are linked by a relational operator to a data field for which an enum transformation table is defined in the ClassiX® system, as in the example bf = both sides (The dynamic data field bf (type ENUMSHORT) is linked to a transformation table ). If an enumeration constant cannot be recognised implicitly, the translation table must be referred to explicitly with the name of the data field: Foo() = bf::both-sided - the name of the data field is prefixed with the scope operator::. Enumeration names that do not correspond to the syntax of an identifier must be quotet: bf = "both sides". The names of an enumeration constant are often language-dependent. Therefore, the formula expressions are modified according to the currently set language.Implicitly known constants are: Name Value Class pi π = 3.14159265 CX_NUMERIC e e = 2,71828182 CX_NUMERIC true 1 CX_BOOLEAN false 0 CX_BOOLEAN In addition, the names of the data types defined in InstantView® including all classes known in the ClassiX® system can be used as numerical constants. These values are needed, for example, in connection with the type and inherited functions.Strings are enclosed in quotes: "this is a string".Certain constants are obtained by functions that are passed a string as a parameter: Function results in object of the class Examples Date() CX_DATE Date("24.12.1900") Date("today") SpanDate() CX_SPAN_DATE SpanDate( 3.1.1999 - 23.2.1999 ) Time() CX_TIME Time("12.00") Time("now") BitPattern() CX_BIT_PATTERN BitPattern("1011011101") Some more examples: Constant Examples Description Number 1, 4.738 An integer or real number. predefined constants π and e pi, e The numbers π = 3.14159265 and e = 2.71828182 are predefined. Truth values true, false Constant objects of the class CX_BOOLEAN with the corresponding value. Value {CODE( theme="default")}2m, 3.5[€/kg], 0.1mV{CODE}A value specification, where the unit must be in square brackets if operators are part of the unit of measurement.Character string "she said: "\"NO\" Any text. Enumeration value (explicit)ma::steel, ma:: "Sympal galvanised"Enumeration constant with explicit reference to the enumeration slot via the scope operator.Enumeration value (implicit)if(ma = "Sympal galvanised") ma != steel & x > 3.5V The explicit specification of the enumeration slot can be omitted if it is also apparent from the context. This is the case if the constant is connected to the data field via an operator. This is the description of the functionality of the class "CX_FORMULA - Constant" regarding Note on implicit enumeration context: The implicit assignment to the enumeration slot only works if the enumeration slot is the first (left) operand of the operator and the enumeration value is the (right) second. As soon as an enumeration value or another slot is read, this implicit assignment is cancelled. This can be illustrated by the following examples:. This is the description of the functionality of the class "CX_FORMULA - Constant" regarding Example 1: The first If expression returns an error during evaluation because steel and sympal are not recognised as enumeration values, since the implicit binding is only active for the two operands of the = operator. The problem can be solved by explicitly specifying the enumeration slot. This is the description of the functionality of the class "CX_FORMULA - Constant" regarding Example 2: In the following example, it can be seen that the implicit binding is preserved for the next operator when an enumeration slot is assigned to a local variable. However, this only works if there are no other statements between the assignment and the comparison that reference other slots/access paths. Note: The formula parser treats an enumeration constant that cannot be assigned to an enumeration like a regular access path, which leads to such errors only being noticed during formula evaluation. For this reason, the implicit enumeration context should only be used in very simple constructs and, in case of doubt, the context should be specified explicitly via the :: operator.