This is the description of the class "Interface": Here you will find an overview of the embedding of the CyberEnterprise enterprise model in the ClassiX® architecture. It is divided into the following areas: Integration into the ClassiX® architecture Interface to InstantView® Scripting. This is the description of the functionality of the class "Interface" regarding Integration into the ClassiX® architecture: The InstantView® business model classes form a complete, object-oriented enterprise model for the virtual replication of real companies. Within the superior ClassiX® architecture, the model classes represent the basis of an application. Only together with InstantView® Scripting the business classes and their attributes (data) and methods (functions) become an executable program. The design of the ClassiX® architecture essentially follows the MVC pattern, the separation of visualisation and functionality of an application: No model class of the InstantView® knows anything about the visualisation of its data. This ensures the high flexibility of InstantView® applications, since the primary requirement in the corporate environment is the maintenance of data and thus the visual preparation of information. If the model classes of CyberEnterprise® belong more to the static part of an application, the instructions of an InstantView® script define the dynamics and the entire interaction with the user. The model classes of CyberEnterprise® do not only represent pure data structures, but also provide basic functionality. InstantView® Script command sequences make use of the properties of these building blocks and thus create new, higher order functionality through different combinations and the addition of own program logic. Thus, the InstantView® architecture also supports rapid application development (RAD) in particular. In principle, a ClassiX® InstantView® application runs as follows: The above exemplary program sequence shows that the InstantView® Script uses the functionality "Determine due date for discount" of the InstantView® model classes to calculate the discount. We do not want to go into detail here about which special class provides this functionality, nor how the program logic within InstantView® looks like in detail. At first, it is only about the schematic representation of the processes within a ClassiX® InstantView® application. This is the description of the functionality of the class "Interface" regarding Interface to InstantView® Scripting: The model classes of InstantView® provide data attributes and functionality. Both should be available seamlessly in InstantView® Scripting. Consequently, each model class of InstantView® has a Data dictionary (DDI) and a Method Dictionary (MDI = method dictionary) Entries in both directories are directly addressed by name in InstantView® Scripting . For example, the class CX_PARTNER has an attribute with the external name name name and a method with the external name StreetAddress(). If you want to know the name of a partner for a certain object of the type CX_PARTNER, you can have the business model output with the InstantView® script instruction Copy(name). In the same way, the street address can be transferred using the InstantView® instruction Call(StreetAddress). Of course, parameters can also be transferred with a method call, which are checked by the MDI. Since all instructions of an InstantView® script are processed interpretatively, it is possible to retrieve certain data from an object or call methods of the object at any time during the runtime of an application.