This is the description of the class "CX_FORMULA - Functions - Object": Functions create a new or manipulate an existing value (object). They are divided into: internal and external functions Internal functions An internal function is always given at least one parameter representing the object for which the function is called. The following arithmetic functions, which expect real numbers as argument(s) (i.e. class CX_NUMERIC), can be called in a formula trigonometric functions sin(x) sin x cos(x) cos x tan(x) tan x cot(x) 1 / tan(x) arcsin(x) arcsin x arccos(x) arccos x arctan(x) arctan x arc(x) x * 3.1415926535 / 180.0 hyperbolic functions sinh(x) ½ (ex - e-x) cosh(x) ½ (ex + e-x) tanh(x) (ex - e-x) / (ex + e-x) other log(x) log10 x ln(x) ln x exp(x) ex sqrt(x) x½ pow(x, n) xn The following functions are available for real numbers (class CX_NUMERIC) and dimensional numbers (class CX_VALUE): min(a, b) if (a < b) a else b max(a, b) if (a > b) a else b floor(x) largest integer < x ceil(x) smallest integer > x round(x, n) x round after nth digit truncate(x, n) x after n-th digit unrounded "cut off Examples: Formula Description sin( x ) Calling the function sin() for the object x cos( y + z ) Creating a new object by adding y and z and calling the function cos() for this object External functions An external function is not passed the object for which it is to be called as a parameter, but it searches for this object in the plug space. The first object for which this function can be called is used. If parameters are passed to the function, the function name must be preceded by a '::', as otherwise an attempt would be made to call the function as an internal function of the first parameter. For example, the function calls "Bar(x)" and "::Bar(x)" differ in that in the first case the (parameterless) function "Bar()" is called for the object x, while in the second case the plug space is searched for an object that offers the method "Bar(x)", so that x represents a "real" parameter. In the case of parameterless functions the '::' can be omitted, since an internal function always has at least one parameter, and all parameterless functions are therefore automatically external functions. Examples: Formula Description Foo() Call the function Foo() for the first object in the plug space that offers this method ::Bar( x ) Call the function Bar() for the first object in the Plug-Space that offers this method, with x as parameter Example The following is an example showing the simultaneous use of internal and external functions. In the example, the current date "4th Advent" for a certain year is to be calculated using a formula. For this it is necessary that a current date, which is in the desired year, is in the plug space. The formula has the following appearance: "Previous(::Day(24,12), 6)". When evaluating the formula, the system first searches for an object in the plug space that provides the function Day(INTEGER, INTEGER). In our case this should be the current date "1.1.1997". This external function returns the result "24.12.1997". For the resulting date the internal function Previous(INTEGER) is called with "6". The result is the last Sunday before "24.12.1997", which is the "4th Advent". As result the formula returns the current date "21.12.1997". The programme for this example has the following appearance: // Tagesdatum "1.1.1997" in den 'Plug-Space' stellen Var(date) CreateTransObject(CX_DATE) -> date "1.1.1997" date Put date PlugSpace // Formel erzeugen und auswerten Var(formula) CreateTransObject(CX_FORMULA) -> formula "Previous(::Day(24,12),6)" formula Put formula Call(Evaluate).