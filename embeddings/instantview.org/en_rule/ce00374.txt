This is the description of the class "CX_VALUE - Comparisons": The following overviews show the comparison operators and the operands with which a value can be linked. All operators return the result of the comparison as a truth value. Equality Larger Smaller Equality CX_VALUE = INTEGER = INTEGER<-> 2 pieces = 1 = 0 2 pieces = 2 = 1 2 pieces = 3 = 0 CX_VALUE = CX_NUMERIC = INTEGER<-> 2,5 pieces = 1,5 = 0 2,5 pieces = 2,5 = 1 2,5 pieces = 3,5 = 0 If two values are compared, it is checked whether the second can be converted into the first. If this works, the comparison is carried out, otherwise an error message is generated. 1CX_VALUE = CX_VALUE = INTEGER<-> 2 pieces = 1 piece = 0 2 pieces = 2 pieces = 1 2 pieces = 3 pieces = 0 6 pieces = 2 pairs = 0 6 pieces = 3 pairs = 1 6 pieces = 4 pairs = 0 1 piece = 1 EUR = ERROR1 CX_VALUE = CX_FRACTION = INTEGER-> 2,5 pieces = 3/4 = 0 2,5 pieces = 5/2 = 1 2,5 pieces = 7/2 = 0 CX_VALUE = CX_FORMULA = INTEGER-> 10 pieces = Formula = Number Note: Before the comparison is executed, the formula is evaluated. The actual comparison is only performed if the result is an object that may be compared with a value. If this is the case, the result is a number . CX_VALUE = CX_CONDITIONED_BAG = INTEGER-> 10 pieces = conditional object table = Number Note: Before the comparison is executed, the corresponding object is determined from the conditional object table. The actual comparison is only carried out if this object may be compared with a value. If this is the case, the result is a number . Greater CX_VALUE>INTEGER = INTEGER<-> 2 pieces > 1 = 1 2 pieces > 2 = 0 2 pieces > 3 = 0 CX_VALUE>CX_NUMERIC = INTEGER<-> 2,5 pieces > 1,5 = 1 2,5 pieces > 2,5 = 0 2,5 pieces > 3,5 = 0 If two values are compared, it is checked whether the second can be converted into the first. If this works, the comparison is carried out, otherwise an error message is generated. 1CX_VALUE>CX_VALUE = INTEGER<-> 2 pieces > 1 piece = 1 2 pieces > 2 pieces = 0 2 pieces > 3 pieces = 0 6 pieces > 2 pairs = 1 6 pieces > 3 pairs = 0 6 pieces > 4 pairs = 0 1 piece > 1 EUR = ERROR1 CX_VALUE>CX_FRACTION = INTEGER-> 2,5 pieces > 3/4 = 1 2,5 pieces > 5/2 = 0 2,5 pieces > 7/2 = 0 CX_VALUE>CX_FORMULA = INTEGER-> 10 pieces > Formula = Number Note: Before the comparison is executed, the formula is evaluated. The actual comparison is only performed if the result is an object that may be compared with a value. If this is the case, the result is a number .CX_VALUE> CX_CONDITIONED_BAG = INTEGER-> 10 pieces > conditional object table = Number Note: Before the comparison is executed, the corresponding object is determined from the conditional object table. The actual comparison is only carried out if this object may be compared with a value. If this is the case, the result is a number . Smaller CX_VALUE < INTEGER = INTEGER<-> 2 pieces < 1 = 0 2 pieces < 2 = 0 2 pieces < 3 = 1 CX_VALUE < CX_NUMERIC = INTEGER<-> 2,5 pieces < 1,5 = 0 2,5 pieces < 2,5 = 0 2,5 pieces < 3,5 = 1 If two values are compared, it is checked whether the second can be converted into the first. If this works, the comparison is carried out, otherwise an error message is generated. 1CX_VALUE < CX_VALUE = INTEGER<-> 2 pieces < 1 piece = 0 2 pieces < 2 pieces = 0 2 pieces < 3 pieces = 1 6 pieces < 2 pairs = 0 6 pieces < 3 pairs = 0 6 pieces < 4 pairs = 1 1 piece < 1 EUR = ERROR1 CX_VALUE < CX_FRACTION = INTEGER-> 2,5 pieces < 3/4 = 0 2,5 pieces < 5/2 = 0 2,5 pieces < 7/2 = 1 CX_VALUE < CX_FORMULA = INTEGER-> 10 pieces < Formula = Number Note: Before the comparison is executed, the formula is evaluated. The actual comparison is only performed if the result is an object that may be compared with a value. If this is the case, the result is a number .CX_VALUE < CX_CONDITIONED_BAG = INTEGER-> 10 pieces < conditional object table = Number Note: Before the comparison is executed, the corresponding object is determined from the conditional object table. The actual comparison is only carried out if this object may be compared with a value. If this is the case, the result is a number . 1 = An alternative to the error message would be to return FALSE for all comparisons if the units are incompatible. However, the error message explicitly communicates that the units do not match, which indicates a programming/user error, since an incorrect unit was probably entered or the corresponding unit table was forgotten to be registered. Returning FALSE for the comparison operators would have the following consequences, which could lead to problems with sorting, among other things:.