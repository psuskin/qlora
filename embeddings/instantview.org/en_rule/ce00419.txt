This is the description of the class "CX_FORMULA - Variable": Variables of a formula can be any access expressions.Dynamic data fields occur very often as variables in formulas and are therefore treated specially internally, i.e. the representation and binding to objects in PlugSpace are more effective than in the general case. Before calculating the formula value, the variables are bound, i.e. it is determined which data fields of which objects they refer to. When binding the variables (and the external functions), each object registered in the PlugSpace is tested for the existence of the corresponding data field, and if it exists, the variable of the formula during calculation designates exactly this data field. The order of the objects in the PlugSpace is important, because a variable could be bound with different objects. There are two binding modes: tight or loose. Tight binding can only be requested by means of the functions get and has, i.e. the normal case is loose binding and for the many objects there is also no difference between the two modes - exception: objects of the class CX_ITEM. The following table shows the connection between operands in the formula expression, binding mode and the virtual functions, by means of which a class can define its own behaviour in variable binding: Mode Variable x as operand Test for existence of the variable x dyn. data field is bound with Access printout is bound with loosely x available(x) PlugDataField2() PlugDataField() eng get(x) has(x) GetDataField2() GetDataField(). This is the description of the functionality of the class "CX_FORMULA - Variable" regarding Local variables: Long complicated formula expressions are to be split into partial terms. For this purpose you need local variables. Local variables are defined with agreed. A local variable must be assigned a value with the assignment operator := before it may occur as an operand in another context. Examples: On the right-hand side of the assignment operator, all expressions that return a value (i.e. including an assignment itself) are allowed. All syntactically possible expressions are usually found in the grammar definition .