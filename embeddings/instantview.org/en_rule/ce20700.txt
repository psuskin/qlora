This is the description of the functionality of the class "CX_STATE_MONITOR - Status monitor" regarding Description: This class manages a status monitor. Status monitors are special monitor objects that are linked to other status monitors via the data field transitions to form a Petri net and in this way map business processes. The actual business process(CX_WORK_FLOW object) only holds the individual states in its monitors collection and is stored in the CX_STATE_MONITOR objects as owner. CX_TRANSACTION objects can be linked for the first time with the start state of such a Petri net via ConnectStateMonitor . Thereby the transaction is also booked directly into this start monitor (link via CX_TRANSACTION։։monitors and CX_STATE_MONITOR։։transactions). Via TriggeredStateMonitor the transactions are then switched through the Petri net (where the transaction represents a brand in the Petri net). For this purpose the transition conditions are evaluated starting from the initial state(important) until the state is found from which no more transition condition is fulfilled. The transaction is then linked to this new state and the message STATE_OUT is fired for the previous state and STATE_IN for the new state. The evaluation from the start state means that each state must be accessible only from the start state (via any intermediate states). In contrast to a regular Petri net no transition A->B has to be defined for a state transition from A->B, because as long as A and B are reachable from the start state, TriggeredStateMonitor can perform such a transition. With RemoveStateMonitor the connection can be disconnected again. The operation is inverse to ConnectStateMonitor. After a transaction has completed a state change (TriggeredStateMonitor), the message STATE_OUT is sent directly to the state monitor of the source state (see: ObjectCode) and then the message STATE_IN is fired to the state monitor of the target state. When the message is fired, the transaction is on the stack as only objects. At ConnectStateMonitor STATE_IN is fired at the start state. With RemoveStateMonitor, STATE_OUT is fired at the current state. This is the description of the functionality of the class "CX_STATE_MONITOR - Status monitor" regarding Code example: * MA = Member Access function, grey background = inherited function * I = Indexable data field, grey background = inherited data field.