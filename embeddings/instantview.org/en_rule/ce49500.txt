This is the description of the functionality of the class "CX_LOOSE_REF" regarding Description: This class is used to create loose references between objects. No fixed pointer is used to reach the target object, instead user-defined flags stored at the Loose-Ref object are used to find the target object. In this way, relational links can be established between objects (relationships established based on attribute values). The custom flags are used as foreign keys to find the target object. When objects of this class have established the relationships to other objects as wrappers, they no longer appear to the user. Instead, they pass on all requests for method calls or attributes to the target object. When changes are made to attributes, the CX_LOOSE_REF object behaves like a CX_OVERWRITING_REF, i.e. the changes are stored as anonymous slots on the wrapper. This means that the data can be accessed even if the target object cannot be reached, and it is possible to find out which data of the target object has been changed via the wrapper. The following properties of a CX_LOOSE_REF object are used to resolve the target object: The CX_LOOSE_REF_MANAGER is responsible for managing the CX_LOOSE_REF objects. The messages that are to be used for various looseTypeEnums are also registered with this manager. The resolution of the target object when accessing attributes or methods only occurs in online mode. If an object of this class is in offline mode, only attributes of the CX_LOOSE_REF object are touched. This mode is necessary to be able to set the values for looseTypeEnum and the user-defined slots (the foreign key attributes) first. If this offline mode did not exist, even when trying to access a newly created object to set the foreign keys, the target would be resolved and an error would be caused. When the target object is resolved, a message is sent (depending on the looseTypeEnum) that has the CX_LOOSE_REF object and a CX_BOOLEAN object as parameters. The reaction to such a message must be implemented as follows:. This is the description of the functionality of the class "CX_LOOSE_REF" regarding Code example: * MA = member access function, greyed out = inherited function *I = Indexable data field, greyed out = inherited data field.