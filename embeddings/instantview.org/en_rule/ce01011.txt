This is the description of the functionality of the class "CX_CLASS_SECURITY - Access rights for classes" regarding Description: Access rights are defined for all objects of a class. The write and read rights initially apply to all data fields (including dynamic data fields) of the class. For certain access expressions, different rights can be defined with objects of the CX_ATTRIBUTE_SECURITY class ( accessExpressionsfield ). The following additional generalisations apply to function calls and indices: Objects of the class CX_CLASS_SECURITY describe the access rights for a set of objects. The data field specialisations refers to (subordinate) security objects with deviating specifications for subsets (e.g. for derived classes or for selected instances of a class). The subordinate security objects are only evaluated if the parent object could already provide a statement. Example: The classes A, A1, A2 and B exist, whereby A1 and A2 are derived from A: A CX_CLASS_SECURITY object for A - bit flag 4 is 0 - describes the access rights for all objects of classes A, A1 and A2: object setMA. Different rights are to apply to objects of class A1 (setMA1). BecauseMA > MA1, the corresponding security object describes a specialisation and can be subordinated to the security object for A. The same applies to an object of the class A1. The same applies to an object of the class CX_OBJECT_SECURITY, which refers to selected instances of A1: MA > MA1>MObjects. On the other hand, it makes no sense to consider a security object for class B as a specialisation of the object for A:MB is not a subset ofMA. If several security objects are responsible for one class/object in specialisations, the last object wins. The behaviour was different before Dll version 225901. This is the description of the functionality of the class "CX_CLASS_SECURITY - Access rights for classes" regarding Code example: * MA = Member Access Function I = Indexable data field.