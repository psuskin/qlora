This is the description of the class "Lists and reports": ClassiX offers a uniform concept for the display and output of lists, which consists of three parts. On the one hand, there is the module that defines the list and the search. Then there is the report, which can be based on its own column definition and database. Thirdly, there is the reporting module, which creates the interface between the module and the report. Module structure Required Widgets Toolbar Button Clipboard Definition: ListViewDefinition: User setting Standard display Definition: Advanced Search Definition: Export as Excel file Definition: Export as HTML file Definition: Query of the database Definition: Stored list. This is the description of the functionality of the class "Lists and reports" regarding Module structure: In the following, the elements of which the module is composed are described. This is the description of the functionality of the class "Lists and reports" regarding Required Widgets: The following widgets are required in a module to display report-dependent lists:. This is the description of the functionality of the class "Lists and reports" regarding Definition: ListView: The standard list is the list that is usually visible by default and which the user uses to work in ClassiX. The column definitions are made with the procedure SetListBox. The messages SAVE_FORMAT and RESET_FORMAT are triggered by the menu items "Save format" and "Reset format" in the burger of the list and enable user-dependent formatting (selection of columns, sorting) to be saved. These are reloaded in the INITIALIZE via the provider call report::SetListboxByReport. The macro SetListBox defines the standard format and, if necessary, the standard sorting of the list box. This is the description of the functionality of the class "Lists and reports" regarding Definition: Advanced search: The advanced search is a simple way to execute a query similar to SQL for data defined via a list and a data connector. The results can be exported in Excel and HTML format or transferred to the calling list. Example for the definition of the button: Parameters for calling SendMsg(ADVANCED_SEARCH): seeDefinition: Export as Excel file The content of a ListBox can be exported directly as an Excel file in XLSX format with only one provider call. No Excel version is necessary for this. The slot "exported.accessPath" on the widget or the description of the group/window is taken for the file name. Parameters for calling excelFile::ExportObjectListIntoExcelFile:. This is the description of the functionality of the class "Lists and reports" regarding Definition: Export as HTML file: The content of a ListBox can be exported directly as an HTML file in a table with only one provider call. The slot "exported.accessPath" on the widget or the description of the group/window is taken for the file name. Parameters for calling httpTools::ExportObjectListIntoFile:. This is the description of the functionality of the class "Lists and reports" regarding Definition: Query database: There are reports that need to be called up recurrently. For example, a report of orders that have been delivered but not yet invoiced could be created weekly. This can be automated so that you do not have to call up the same list and select the same selection criteria each time. For this purpose, there is the function "Query database" in the reports module. From the user's point of view, the function works as follows. One opens the list module and selects the search criteria. Then open the reporting module and select a report or create a new report. When editing the report, one can automatically create the "Commands for querying the database". The report fetches the search criteria from the list module in the form of commands, which are later sent automatically. The user is thus able to save the report under his favourites and have it executed automatically. For this to work, the following macros must be defined when writing the module. The report-dependent list requires the message SELECT_EXECUTES_TO_CREATE_DATA_COLLECTION, which calls the macro SelectExecutesToCreateDataCollection. The following paragraphs are then to be inserted in the main macro SelectExecutesToCreateDataCollection:. This is the description of the functionality of the class "Lists and reports" regarding Definition: Filtering database: When the report dialogue is called up, the current data in the list are used as the database or compiled by the steps in " Query database". Subsequently. This data is written to the "ObjectListView" object before the filtering is executed. You can manipulate this data with the commands in the filtering. It is possible to access the data of the list box directly via the variables objectList ( = ObjectListView) and parentWindow ( = Window). This is the description of the functionality of the class "Lists and reports" regarding Definition: Saved list: In order for a saved list to be called directly from the Own saved lists window, the window with the list box must be able to receive an "EXEC_." message. If a window cannot receive this message, saved lists can only be selected via the report window.