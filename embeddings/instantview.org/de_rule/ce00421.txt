Dies ist die Beschreibung der Klasse "CX_FORMULA - Funktionen - Objekt": Funktionen erzeugen einen neuen bzw. manipulieren einen bestehenden Wert (Objekt). Sie unterteilen sich dabei in: interne und externe Funktionen Interne FunktionenEiner internen Funktion wird grundsätzlich mindestens ein Parameter übergeben, der das Objekt, für das die Funktion aufgerufen wird, darstellt. Folgende arithmetische Funktionen, die als Argument(e) reelle Zahlen erwarten (d.h. Klasse CX_NUMERIC), können in einer Formel aufgerufen werden: trigonometrische Funktionen sin(x) sin x cos(x) cos x tan(x) tan x cot(x) 1 / tan(x) arcsin(x) arcsin x arccos(x) arccos x arctan(x) arctan x arc(x) x * 3.1415926535 / 180.0 hyperbolische Funktionen sinh(x) ½ (ex - e-x) cosh(x) ½ (ex + e-x) tanh(x) (ex - e-x) / (ex + e-x) sonstige log(x) log10 x ln(x) ln x exp(x) ex sqrt(x) x½ pow(x, n) xn Für reelle (Klasse CX_NUMERIC) und dimensionsbehaftete Zahlen (Klasse CX_VALUE) gibt es folgende Funktionen: min(a, b) if (a < b) a else b max(a, b) if (a > b) a else b floor(x) größte ganze Zahl < x ceil(x) kleinste ganze Zahl > x round(x, n) x nach n-ter Stelle runden truncate(x, n) x nach n-ter Stelle ungerundet "abschneiden" Beispiele: Formel Beschreibung sin( x ) Aufruf der Funktion sin() für das Objekt x cos( y + z ) Erzeugen eines neuen Objektes aus der Addition von y und z und Aufruf der Funktion cos() für dieses Objekt Externe FunktionenEiner externen Funktion wird das Objekt, für das sie aufgerufen werden soll, nicht als Parameter übergeben, sondern es sucht dieses Objekt im Plug-Space. Dabei wird das erste Objekt benutzt, für das diese Funktion aufgerufen werden kann. Wenn der Funktion Parameter übergeben werden, so muss dem Funktionsnamen ein '::' vorangestellt werden, da sonst versucht werden würde, die Funktion als interne Funktion des ersten Parameters aufzurufen.So unterscheiden sich beispielsweise die Funktionsaufrufe "Bar(x)" und "::Bar(x)" darin, dass im ersten Fall für das Objekt x die (parameterlose) Funktion "Bar()" aufgerufen wird, während im zweiten im Plug-Space nach einem Objekt gesucht wird, das die Methode "Bar(x)" anbietet, so dass x einen "echten" Parameter darstellt.Im Fall von parameterlosen Funktionen kann die Angabe '::' entfallen, da eine interne Funktion immer mindestens einen Parameter besitzt, und alle parameterlosen Funktionen somit automatisch externe Funktionen sind.Beispiele: Formel Beschreibung Foo() Aufruf der Funktion Foo() für das erste Objekt im Plug-Space, das diese Methode anbietet ::Bar( x ) Aufruf der Funktion Bar() für das erste Objekt im Plug-Space, das diese Methode anbietet, mit x als Parameter BeispielIm folgenden wird ein Beispiel aufgeführt, das die gleichzeitige Verwendung von in- und externen Funktionen zeigt. In dem Beispiel soll das Tagesdatum "4. Advent" für ein bestimmtes Jahr formelmäßig errechnet werden. Dazu ist es notwendig, das sich ein Tagesdatum, welches im gewünschten Jahr liegt, im Plug-Space befindet.Die Formel hat das folgende Aussehen: "Previous(::Day(24,12), 6)"Beim Auswerten der Formel wird zunächst nach einem Objekt im Plug-Space gesucht, welches die Funktion Day(INTEGER, INTEGER) zur Verfügung stellt. In unserem Fall soll dieses das Tagesdatum "1.1.1997" sein. Diese externe Funktion liefert als Ergebnis den "24.12.1997". Für das entstandene Datum wird nun die interne Funktion Previous(INTEGER) mit "6" aufgerufen. Das Ergebnis ist der letzte Sonntag vor dem "24.12.1997", welcher den "4. Advent" darstellt. Als Ergebnis liefert die Formel das Tagesdatum "21.12.1997".Das Programm zu diesem Beispiel hat das folgende Aussehen: // Tagesdatum "1.1.1997" in den 'Plug-Space' stellen Var(date) CreateTransObject(CX_DATE) -> date "1.1.1997" date Put date PlugSpace // Formel erzeugen und auswerten Var(formula) CreateTransObject(CX_FORMULA) -> formula "Previous(::Day(24,12),6)" formula Put formula Call(Evaluate).