Dies ist die Beschreibung der Funktionalität der Klasse "CX_JSON_OBJECT" bezüglich Beschreibung: Diese Klasse repräsentiert ein JSON-Objekt. Auf die Elemente in der JSON-Struktur kann auf die gleiche Weise zugegriffen werden, wie auf das DDI einer Klasse. Intern generiert das CX_JSON_OBJECT auch ein DDI, damit die Felder des JSON-Objekts im Objekt-Inspector untersucht und verändert werden können. In dem JSON-Objekt sind alle untergeordnenten JSON-Objekte und -Arrays nur Referenzen auf Datenstrukturen innerhalb des Wurzel-Objekts. Beispiel: Sei folgendes JSON gegeben {"name":"charlie", "son":{"name":"jack"}}, dann liefern json Copy(name) und "name" json Call(GetTyped) beide den String charlie. Die Aufrufe json Get(son) und "son" json Call(GetTyped) liefern ein CX_JSON_OBJECT, welches den JSON-Ausschnitt {"name":"jack"} repräsentiert. Auf diesem Objekt kann, wie auf dem vorherigen Objekt mit Copy(name) der name ausgelesen werden. Alternativ kann dies auch auf dem Wurzelelement über einen Zugriffsausdruck getan werden: json Copy(son.name) oder "son.name" json Call(GetTyped). 173936: Bei der Rückgabe von Zahlenwerten werden immer 8 Nachkommastellen zurückgegeben. Wird ein nicht existierendes Feld (hier x) abgefragt, ist das Verhalten wie folgt definiert:. Dies ist die Beschreibung der Funktionalität der Klasse "CX_JSON_OBJECT" bezüglich Code-Beispiel: * MA = Member-Access-Funktion TYPE = Typ-ID von (STRING | INTEGER | CX_NUMERIC | CX_BOOLEAN | CX_JSON_OBJECT | CX_JSON_ARRAY) * I = Indizierbares Datenfeld.