Dies ist die Beschreibung der Funktionalität der Klasse "CX_JSON_PARSER" bezüglich Beschreibung: Diese Klasse stellt die Funktionalität bereit, um JSON in Objekte umzuwandeln und um diese wieder als JSON zu serialisieren. Dies wird explizit über eine gesonderte Klasse getan, da ein JSON seit dem RFC 7159 auch aus einem Basisdatentypen (wie INTEGER) bestehen kann. 123 ist beispielsweise ein gültiges JSON. Sollte das JSON ein Objekt, oder ein Array sein, dann wird ein CX_JSON_OBJECT oder CX_JSON_ARRAY vom Parser konstruiert. Diese bieten die Möglichkeit, die Datenstruktur weiter zu verarbeiten. Alles, was von LoadFromString und LoadFromFile zurückgegeben wird, kann auch wieder an WriteToString und WriteToFile übergeben werden und das Ergebnis-JSON wird (bis auf die Formatierung) identisch mit dem Ausgangs-JSON sein. Um diese Abbildung umsetzen zu können, musste für die JSON-Werte true und false der Typ CX_BOOLEAN verwendet werden. Die InstantView-Literale TRUE und FALSE werden nämlich in die Integer-Werte 0 und 1 übersetzt. Dabei geht die Typinformation verloren. Dies ist die Beschreibung der Funktionalität der Klasse "CX_JSON_PARSER" bezüglich Code-Beispiel: * MA = Member-Access-Funktion ANY* = STRING | CX_STRING | INTEGER | CX_INTEGER | CX_FLOAT | CX_NUMERIC | CX_BOOLEAN | CX_JSON_OBJECT | CX_JSON_ARRAY | NULL * I = Indizierbares Datenfeld.