Dies ist die Beschreibung der Klasse "Listen und Berichte": ClassiX bietet eine einheitliche Konzeption für die Anzeige und die Ausgabe von Listen, welche aus drei Teilen besteht. So gibt es zum einen das Modul, welches die Liste und die Suche definiert. Dann gibt es den Bericht, welchem eine eigene Spalten-Definition und Datenbasis zugrunde liegen kann. Als drittes gibt es das Reporting-Modul, welches die Schnittstelle zwischen dem Modul und dem Bericht herstellt. Modulaufbau Benötigte Widgets Toolbar Button Zwischenablage Definition: ListView Definition: Benutzereinstellung Standard Darstellung Definition: Erweiterte Suche Definition: Export als Excel-Datei Definition: Export als HTML-Datei Definition: Abfrage der Datenbasis Definition: Gespeicherte Liste. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Modulaufbau: Im folgenden werden die Elemente beschrieben, aus welchen das Modul aufgebaut ist. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Benötigte Widgets: Für das Anzeigen berichtsabhängiger Listen sind in einem Modul folgende Widgets notwendig :. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Definition: ListView: Die Standardliste ist die in der Regel standardmäßig sichtbare Liste, welcher der User zum Arbeiten in ClassiX nutzt. Die Spalten-Definitionen werden mit der Procedure SetListBox vorgenommen. Die Messages SAVE_FORMAT und RESET_FORMAT werden durch die Menüeinträge "Format speichern" und "Format zurücksetzen" im Burger der Liste ausgelöst und ermöglichen es benutzerabhängige Formatierungen (Auswahl der Spalten, Sortierung) zu speichern. Diese werden im INITIALIZE über den Provideraufruf report::SetListboxByReport wieder geladen. Das Makro SetListBox definiert das Standardformat und ggf. die Standardsortierung der Listbox. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Definition: Erweiterte Suche: Die erweiterte Suche ist eine einfache Möglichkeit für Daten die über eine Liste und einem Datenkonnektor definiert sind eine Query-Abfrage ähnlich SQL auszuführen. Die Ergebnisse können im Excel- und HTML-Format exportiert oder in die aufrufende Liste übernommen werden. Beispiel für die Definition des Buttons: Parameter für den Aufruf von SendMsg(ADVANCED_SEARCH): siehe. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Definition: Export als Excel-Datei: Der Inhalt einer ListBox kann mit nur einem Provideraufruf direkt als Excel-Datei im XLSX-Format exportiert werden. Dazu ist keine Excel-Version notwendig. Für den Dateinamen nimmt wird der Slot "exported.accessPath" am Widget oder die Beschreibung der Gruppe/Fenster genommen. Parameter für den Aufruf von excelFile::ExportObjectListIntoExcelFile:. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Definition: Export als HTML-Datei: Der Inhalt einer ListBox kann mit nur einem Provideraufruf direkt als HTML-Datei in einer Tabelle exportiert werden. Für den Dateinamen nimmt wird der Slot "exported.accessPath" am Widget oder die Beschreibung der Gruppe/Fenster genommen. Parameter für den Aufruf von httpTools::ExportObjectListIntoFile:. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Definition: Abfrage Datenbasis: Es gibt Berichte, die müssen wiederkehrend aufgerufen werden. So könnte wöchentlich ein Bericht der gelieferten aber noch nicht fakturierten Aufträge erstellt werden. Dies kann automatisiert werden, damit man nicht jedes Mal die gleiche Liste aufrufen und die gleichen Auswahlkriterien auswählen muss. Hierzu gibt es im Module der Berichte die Funktion "Abfrage Datenbasis". Aus der Sicht des Anwenders funktioniert die Funktion wie folgt. Man öffnet das Listenmodul und wählt die Suchkriterien aus. Anschließend öffnet man das Reporting Modul und wählt einen Bericht aus oder legt einen neuen Bericht an. Bei der Bearbeitung des Berichtes kann man die "Kommandos zur Abfrage der Datenbasis" automatisch erstellen. Der Bericht holt sich hierbei die Suchkriterien aus dem Listenmodul in Form von Kommandos, die später automatisch abgesetzt werden. Der Anwender ist so in der Lage den Bericht unter seinen Favoriten zu speichern und automatisch ausführen zu lassen. Damit dies Funktioniert müssen beim Schreiben des Moduls folgende Makros definiert werden. Die Berichtsabhängige Liste benötige die Message SELECT_EXECUTES_TO_CREATE_DATA_COLLECTION, welche das Makro SelectExecutesToCreateDataCollection aufruft. Im Hauptmakro SelectExecutesToCreateDataCollection sind dann folgende Absätze einzufügen:. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Definition: Filterung Datenbasis: Beim Aufruf des Bericht Dialogs werden die aktuellen Daten der Liste als Datenbasis verwendet bzw. durch die Schritte in "Abfrage Datenbasis" zusammen gestellt. Anschließend können. Diese Daten werden vor der Ausführung der Filterung in das "ObjectListView" Objekt geschrieben. Mit den Befehlen in der Filterung können Sie diese Daten manipulieren. Es besteht dabei die Möglichkeit über die Variablen objectList ( = ObjectListView) und parentWindow ( = Fenster) direkt auf die Daten der Listbox zu zugreifen. Dies ist die Beschreibung der Funktionalität der Klasse "Listen und Berichte" bezüglich Definition: Gespeicherte Liste: Damit eine gespeicherte Liste direkt aus dem Fenster eigene gespeicherte Listen ausgerufen werden, muss das Fenster mit der Listbox eine "EXEC_."-Nachrichten empfangen können. Hat kann ein Fenster nicht diese Nachricht empfangen, so können gespeicherte Listen nur über das Berichtsfenster ausgewählt werden.