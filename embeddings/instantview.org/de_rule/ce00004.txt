Dies ist die Beschreibung der Klasse "Interface": Hier finden Sie eine Übersicht über die Einbettung des Unternehmensmodells CyberEnterprise in die ClassiX® Architektur. Dieser teilt sich in die folgenden Bereiche auf: Einbindung in die ClassiX® Architektur Schnittstelle zum InstantView® Scripting. Dies ist die Beschreibung der Funktionalität der Klasse "Interface" bezüglich Einbindung in die ClassiX® Architektur: Die InstantView® Geschäftsmodellklassen bilden ein vollständiges, objektorientiertes Unternehmensmodell zur virtuellen Nachbildung von realen Unternehmen. Innerhalb der übergeordneten ClassiX® Architektur stellen die Modellklassen die Basis einer Anwendung dar. Erst zusammen mit dem InstantView® Scripting werden die Geschäftsklassen und deren Attribute (Daten) und Methoden (Funktionen) zu einem ablauffähigem Programm. Das Design der ClassiX® Architektur folgt im Wesentlichen der MVC-Muster, der Trennung der Visualisierung und Funktionalität einer Anwendung: Keine Modell-Klasse des InstantView® weiß etwas von der Visualisierung seiner Daten. Hierdurch wird die hohe Flexibilität von InstantView® Anwendungen gewährleistet, da im Unternehmensumfeld primär die Pflege von Daten und damit die visuelle Aufbereitung von Informationen gefordert ist. Gehören die Modell-Klassen des CyberEnterprise® eher zum statischen Teil einer Anwendung, so definieren die Anweisungen eines InstantView® Scripts die Dynamik und die gesamte Interaktion mit dem Benutzer. Dabei repräsentieren die Modell-Klassen des CyberEnterprise® natürlich nicht nur reine Datenstrukturen, sondern sie stellen grundlegende Funktionalität zur Verfügung. InstantView® Script Kommandofolgen bedienen sich der Eigenschaften dieser Bausteine und erzeugen so durch unterschiedliche Kombinationen und Hinzufügung eigener Programmlogik neue Funktionalität höherer Ordnung. Damit unterstützt die InstantView® Architektur insbesondere auch das rapid application development (RAD). Eine ClassiX® InstantView® Anwendung läuft im Prinzip in folgender Weise ab: Obige beispielhafte Programmfolge zeigt, dass zur Berechnung von Skonto sich das InstantView® Script der Funktionalität "Ermittle Skonto-Fälligkeit" der InstantView® Modellklassen bedient. Wir wollen hier noch nicht näher darauf eingehen, welche spezielle Klasse diese Funktionalität zur Verfügung stellt, noch wie im Einzelnen die Programm-Logik innerhalb von InstantView® aussieht. Es geht zunächst nur um die schematische Darstellung der Abläufe innerhalb einer ClassiX® InstantView® Anwendung. Dies ist die Beschreibung der Funktionalität der Klasse "Interface" bezüglich Schnittstelle zum InstantView® Scripting: Die Modell-Klassen von InstantView® stellen Daten-Attribute und Funktionalität zur Verfügung. Beides soll nahtlos im InstantView® Scripting bereitgestellt werden können. Folgerichtig hat jede Modell-Klasse von InstantView® jeweils ein Daten-Verzeichnis (DDI = data dictionary) und ein Methoden-Verzeichnis (MDI = method dictionary) Einträge in beiden Verzeichnissen werden im InstantView® Scripting direkt mit Namen angesprochen. So hat beispielsweise die Klasse CX_PARTNER ein Attribut mit dem externen Namen name und eine Methode mit dem externen Namen StreetAddress(). Will man für ein bestimmtes Objekt des Typs CX_PARTNER wissen, welchen Namen dieser Partner hat, so kann man sich diesen mit der InstantView®-Script Anweisung Copy(name) vom Geschäftsmodell ausgeben lassen. Ebenso kann man sich die Straßen-Adresse über die InstantView®-Anweisung Call(StreetAddress) übergeben lassen. Natürlich können bei einem Methodenaufruf auch Parameter übergeben werden, die seitens des MDI überprüft werden. Da alle Anweisungen eines InstantView® Scripts interpretativ verarbeitet werden, kann man jederzeit während der Laufzeit einer Anwendung sich bestimmte Daten aus einem Objekt holen oder Methoden des Objekts aufrufen.