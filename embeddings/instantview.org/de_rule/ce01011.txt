Dies ist die Beschreibung der Funktionalität der Klasse "CX_CLASS_SECURITY - Zugriffsrechte für Klassen" bezüglich Beschreibung: Für alle Objekte einer Klasse werden Zugriffsrechte festgelegt. Die Schreib- und Leserechte gelten zunächst für alle Datenfelder (einschließlich dynamischer Datenfelder) der Klasse. Für bestimmte Zugriffsausdrücke können mit Objekten der Klasse CX_ATTRIBUTE_SECURITY hiervon abweichende Rechte definiert werden (Feld accessExpressions) Für Funktionsaufrufe und Indizes gelten folgende zusätzliche Verallgemeinerungen: Objekte der Klasse CX_CLASS_SECURITY beschreiben die Zugriffsrechte für eine Menge von Objekten. Das Datenfeld specializations verweist auf (untergeordnete) Security-Objekte mit abweichenden Festlegungen für Teilmengen (z.B. für abgeleitete Klassen oder für ausgewählte Instanzen einer Klasse). Die untergeordneten Security-Objekte werden nur dann ausgewertet, wenn schon das übergeordnete Objekt bereits eine Aussage liefern könnte. Beispiel: Es existieren die Klassen A, A1, A2 und B, wobei A1 und A2 von A abgeleitet sind: Ein CX_CLASS_SECURITY-Objekt für A - Bit flag 4 sei 0 - beschreibt die Zugriffsrechte für alle Objekte der Klassen A, A1 und A2: Objektmenge MA. Für Objekte der Klasse A1 sollen abweichende Rechte gelten (Menge MA1). Wegen MA > MA1 beschreibt das entsprechende Security-Objekt eine Spezialisierung und kann dem Security-Objekt für A untergeordnet werden. Das gleiche gilt für ein Objekt der Klasse CX_OBJECT_SECURITY, das sich auf ausgewählte Instanzen von A1 bezieht: MA > MA1> MObjects. Dagegen ist es sinnlos, ein Security-Objekt für Klasse B als Spezialisierung des Objekts für A aufzufassen: MB ist keine Teilmenge von MA. Falls in specializations mehrere Security-Objekte für eine Klasse/Objekt zuständig sind, gewinnt das letzte Objekt. Das Verhalten war vor Dll-Version 225901 anders. Dies ist die Beschreibung der Funktionalität der Klasse "CX_CLASS_SECURITY - Zugriffsrechte für Klassen" bezüglich Code-Beispiel: * MA = Member-Access-Funktion * I = Indizierbares Datenfeld.