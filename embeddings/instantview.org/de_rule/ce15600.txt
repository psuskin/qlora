Dies ist die Beschreibung der Funktionalität der Klasse "CX_GENERAL_LEDGER - Sachkonto" bezüglich Beschreibung: Diese Klasse bildet ein Sachkonto ab. Objekte, die den Kontenplan bestimmen. Ein genereller Kontenplan für alle eigenständigen Mandanten prinzipiell möglich über Einstellen verschiedener Domains für die Monitore Account, bei gleichzeitigem gemeinsamen Domain für die GENERAL_LEDGER Objekte. Allerdings problematisch im Bereich der Bankkonten (versch.Konten), Steuern (versch.Finanzämter) und Abstimmkonten (versch. Debitoren/Kreditoren). Daher gemeinsame Nutzung der GENERAL_LEDGER Objekte wohl nur bei Unterteilung ein und derselben Firma (Mandant) in Geschäftsbereiche/profit center. Firmenübergreifende Auswertungen über CX_STRUCTURE-Objekte, die CX_ACCOUNT oder CX_GENERAL_LEDGER Objekte aus versch. Layern halten. Mit Layern und Domains Mahnbereiche, Kreditbereiche, Geschäftsbereiche, etc. einstellen. generalLedgerTypeEnum: als bit-muster implementiert: regelt, ob bestands/erfolgs-konto, aktiv-passiv und/oder aufwands/erfolgs-konto. NN: für gemischte konten (wareneinkauf) aktiv und auch erfolgs-konto gleichzeitig eingebbar ? Wegen gemischter Konten auch keine Ableitung einer eigenen GuV-Klasse. Bei Skonto-Konto ist Aufwand/Ertrag entspr. Skontoaufwand oder Skontoertrag. generalLedgerTypeEnum regelt auch den Austausch zwischen Soll/Haben. Wenn z.B. ein Bank-Konto ein negativen Saldo hat (debit < 0), dann wird Debit() NULL zurückgegeben, und stattdessen der Credit()-Wert ausgegeben. NN: halten der "üblichen" slots: hier also z.B. debit/credit, oder dieses nur über Funktion beim Ankoppeln von CX_ACCOUNT machen ???? Die Währung wird beim Format des debit/credit slots im CX_ACCOUNT Objekt gehalten. OP's halten auch slot originalValue. ANLEGEN !!! generalLedgerTaxTypeEnum: Enum als Bit-muster: steuert die mögliche steuer-verarbeitung mit diesem Konto. Bit 2 hält brutto/netto verarbeitung, wenn 0 dann standard netto (gilt für Skontobrutto-netto Verfahren oder Anzahlungskonten) (s.a. 3.168 in Praxis-Lexikon Buchführung + Bilanz) tax: In collection tax werden alle zugelassenen steuertypen bei Buchungen gehalten, wenn leer, dann alle zugelassen entspr. enum-typ. Bei CX_TAX_ACCOUNT direkter Bezug zum Steuerschlüssel vom Typ CX_TAX, der wiederum an CX_TAX_AUTHORITY hängt. Ebenso CX_CASH_DISCOUNT direkter Bezug als Skonto-Konto bei Steuerschlüssel. Anzahlungen über spezielle slots halten. ANLEGEN !!! Verdichtungen von Kostenarten (CX_ACC_CATEGORY Objekten) auf Sachkonten über REL_MN clearingObjects und Funktion GeneralLedger() aus CX_ACC_CATEG. heraus. Entsprechend CX_PERSONAL_ACCOUNT Verdichtung auf CX_CLEARING_ACCOUNT. ????: ===== eventuell später ein CX_PROFIT_AND_LOSS_ACCOUNT von CX_GENERAL_LEDGER ableiten mit Liste von GuV Konten, und auch die GuV-Konten extra ableiten mit BackReference. Abgrenzungskonten über generalLedgerTypeEnum steuern ?? neutrale Konten irgendwie kennzeichnen ?? Dies ist die Beschreibung der Funktionalität der Klasse "CX_GENERAL_LEDGER - Sachkonto" bezüglich Code-Beispiel: * MA = Member-Access-Funktion, grau unterlegt = geerbte Funktion * I = Indizierbares Datenfeld, grau unterlegt = geerbtes Datenfeld.